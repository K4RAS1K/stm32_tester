
project5_btns.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800a830  0800a830  0001a830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acb0  0800acb0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800acb0  0800acb0  0001acb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acb8  0800acb8  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acb8  0800acb8  0001acb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acbc  0800acbc  0001acbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800acc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  200001d4  0800ae94  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  0800ae94  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010402  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000253f  00000000  00000000  00030649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df8  00000000  00000000  00032b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab9  00000000  00000000  00033980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000244b9  00000000  00000000  00034439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000104a6  00000000  00000000  000588f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df275  00000000  00000000  00068d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f34  00000000  00000000  00148010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0014cf44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a818 	.word	0x0800a818

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800a818 	.word	0x0800a818

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff6:	f000 fbe2 	bl	80017be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffa:	f000 f887 	bl	800110c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffe:	f000 f96b 	bl	80012d8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001002:	f000 f8d5 	bl	80011b0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001006:	f000 f937 	bl	8001278 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if( HAL_UART_Receive(&huart2, str, 1, 3) == HAL_OK ) {
 800100a:	f107 0110 	add.w	r1, r7, #16
 800100e:	2303      	movs	r3, #3
 8001010:	2201      	movs	r2, #1
 8001012:	4836      	ldr	r0, [pc, #216]	; (80010ec <main+0xfc>)
 8001014:	f003 fcd8 	bl	80049c8 <HAL_UART_Receive>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f5      	bne.n	800100a <main+0x1a>
	   // получен байт из UART
		  if (str[0]== 65) {
 800101e:	7c3b      	ldrb	r3, [r7, #16]
 8001020:	2b41      	cmp	r3, #65	; 0x41
 8001022:	d159      	bne.n	80010d8 <main+0xe8>
			  HAL_UART_Transmit(&huart2, (uint8_t*)"B",1, 3);
 8001024:	2303      	movs	r3, #3
 8001026:	2201      	movs	r2, #1
 8001028:	4931      	ldr	r1, [pc, #196]	; (80010f0 <main+0x100>)
 800102a:	4830      	ldr	r0, [pc, #192]	; (80010ec <main+0xfc>)
 800102c:	f003 fc42 	bl	80048b4 <HAL_UART_Transmit>
			  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001030:	217f      	movs	r1, #127	; 0x7f
 8001032:	4830      	ldr	r0, [pc, #192]	; (80010f4 <main+0x104>)
 8001034:	f001 fe96 	bl	8002d64 <HAL_ADCEx_Calibration_Start>
			  while(1){
			  if( HAL_UART_Receive(&huart2, str, 1, 3) == HAL_OK ) {
 8001038:	f107 0110 	add.w	r1, r7, #16
 800103c:	2303      	movs	r3, #3
 800103e:	2201      	movs	r2, #1
 8001040:	482a      	ldr	r0, [pc, #168]	; (80010ec <main+0xfc>)
 8001042:	f003 fcc1 	bl	80049c8 <HAL_UART_Receive>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1f5      	bne.n	8001038 <main+0x48>
				  if (str[0]== 49) {
 800104c:	7c3b      	ldrb	r3, [r7, #16]
 800104e:	2b31      	cmp	r3, #49	; 0x31
 8001050:	d13c      	bne.n	80010cc <main+0xdc>
					  while(1){
					  	  HAL_ADC_Start(&hadc1);
 8001052:	4828      	ldr	r0, [pc, #160]	; (80010f4 <main+0x104>)
 8001054:	f000 ffa4 	bl	8001fa0 <HAL_ADC_Start>
					  	  HAL_ADC_PollForConversion(&hadc1,10);
 8001058:	210a      	movs	r1, #10
 800105a:	4826      	ldr	r0, [pc, #152]	; (80010f4 <main+0x104>)
 800105c:	f001 f836 	bl	80020cc <HAL_ADC_PollForConversion>
					  	  value = HAL_ADC_GetValue(&hadc1);
 8001060:	4824      	ldr	r0, [pc, #144]	; (80010f4 <main+0x104>)
 8001062:	f001 f8c2 	bl	80021ea <HAL_ADC_GetValue>
 8001066:	4603      	mov	r3, r0
 8001068:	b29a      	uxth	r2, r3
 800106a:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <main+0x108>)
 800106c:	801a      	strh	r2, [r3, #0]
					  	  my_value = (float)value/1241;
 800106e:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <main+0x108>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800107a:	eddf 6a20 	vldr	s13, [pc, #128]	; 80010fc <main+0x10c>
 800107e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001082:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <main+0x110>)
 8001084:	edc3 7a00 	vstr	s15, [r3]
					  	  HAL_ADC_Stop(&hadc1);
 8001088:	481a      	ldr	r0, [pc, #104]	; (80010f4 <main+0x104>)
 800108a:	f000 ffec 	bl	8002066 <HAL_ADC_Stop>
					  	  sprintf(long_string, "%.3f\n", my_value);
 800108e:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <main+0x110>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fa58 	bl	8000548 <__aeabi_f2d>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	1d38      	adds	r0, r7, #4
 800109e:	4919      	ldr	r1, [pc, #100]	; (8001104 <main+0x114>)
 80010a0:	f005 ff1e 	bl	8006ee0 <siprintf>
					  	  HAL_UART_Transmit(&huart2, long_string, 5, 3);
 80010a4:	1d39      	adds	r1, r7, #4
 80010a6:	2303      	movs	r3, #3
 80010a8:	2205      	movs	r2, #5
 80010aa:	4810      	ldr	r0, [pc, #64]	; (80010ec <main+0xfc>)
 80010ac:	f003 fc02 	bl	80048b4 <HAL_UART_Transmit>
					  	  HAL_Delay(0.1);
 80010b0:	2000      	movs	r0, #0
 80010b2:	f000 fbf9 	bl	80018a8 <HAL_Delay>
					  	  HAL_UART_Receive_IT(&huart2, str, 1);
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	2201      	movs	r2, #1
 80010bc:	4619      	mov	r1, r3
 80010be:	480b      	ldr	r0, [pc, #44]	; (80010ec <main+0xfc>)
 80010c0:	f003 fd4c 	bl	8004b5c <HAL_UART_Receive_IT>
					  	  if(str[0] == 83){
 80010c4:	7c3b      	ldrb	r3, [r7, #16]
 80010c6:	2b53      	cmp	r3, #83	; 0x53
 80010c8:	d004      	beq.n	80010d4 <main+0xe4>
					  while(1){
 80010ca:	e7c2      	b.n	8001052 <main+0x62>
					  		  break;
					  	  }
					  }
				  }
				  else if(str[0] == 68){
 80010cc:	7c3b      	ldrb	r3, [r7, #16]
 80010ce:	2b44      	cmp	r3, #68	; 0x44
 80010d0:	d009      	beq.n	80010e6 <main+0xf6>
 80010d2:	e7b1      	b.n	8001038 <main+0x48>
					  		  break;
 80010d4:	bf00      	nop
			  if( HAL_UART_Receive(&huart2, str, 1, 3) == HAL_OK ) {
 80010d6:	e7af      	b.n	8001038 <main+0x48>
				  }
				 }
			  }
		  	}
		  else{
			  HAL_UART_Transmit(&huart2, (uint8_t*)"E",1, 3);
 80010d8:	2303      	movs	r3, #3
 80010da:	2201      	movs	r2, #1
 80010dc:	490a      	ldr	r1, [pc, #40]	; (8001108 <main+0x118>)
 80010de:	4803      	ldr	r0, [pc, #12]	; (80010ec <main+0xfc>)
 80010e0:	f003 fbe8 	bl	80048b4 <HAL_UART_Transmit>
 80010e4:	e791      	b.n	800100a <main+0x1a>
					  break;
 80010e6:	bf00      	nop
	  if( HAL_UART_Receive(&huart2, str, 1, 3) == HAL_OK ) {
 80010e8:	e78f      	b.n	800100a <main+0x1a>
 80010ea:	bf00      	nop
 80010ec:	20000254 	.word	0x20000254
 80010f0:	0800a830 	.word	0x0800a830
 80010f4:	200001f0 	.word	0x200001f0
 80010f8:	200002dc 	.word	0x200002dc
 80010fc:	449b2000 	.word	0x449b2000
 8001100:	200002e0 	.word	0x200002e0
 8001104:	0800a834 	.word	0x0800a834
 8001108:	0800a83c 	.word	0x0800a83c

0800110c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b096      	sub	sp, #88	; 0x58
 8001110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	2244      	movs	r2, #68	; 0x44
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f005 ff43 	bl	8006fa6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001120:	463b      	mov	r3, r7
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800112e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001132:	f002 f9a7 	bl	8003484 <HAL_PWREx_ControlVoltageScaling>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800113c:	f000 f918 	bl	8001370 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001140:	2302      	movs	r3, #2
 8001142:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001144:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001148:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800114a:	2310      	movs	r3, #16
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114e:	2302      	movs	r3, #2
 8001150:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001152:	2302      	movs	r3, #2
 8001154:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001156:	2301      	movs	r3, #1
 8001158:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 800115a:	2308      	movs	r3, #8
 800115c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800115e:	2307      	movs	r3, #7
 8001160:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001162:	2302      	movs	r3, #2
 8001164:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001166:	2302      	movs	r3, #2
 8001168:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4618      	mov	r0, r3
 8001170:	f002 f9de 	bl	8003530 <HAL_RCC_OscConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800117a:	f000 f8f9 	bl	8001370 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117e:	230f      	movs	r3, #15
 8001180:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001182:	2303      	movs	r3, #3
 8001184:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001192:	463b      	mov	r3, r7
 8001194:	2103      	movs	r1, #3
 8001196:	4618      	mov	r0, r3
 8001198:	f002 fdde 	bl	8003d58 <HAL_RCC_ClockConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011a2:	f000 f8e5 	bl	8001370 <Error_Handler>
  }
}
 80011a6:	bf00      	nop
 80011a8:	3758      	adds	r7, #88	; 0x58
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011b6:	463b      	mov	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
 80011c4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80011c6:	4b29      	ldr	r3, [pc, #164]	; (800126c <MX_ADC1_Init+0xbc>)
 80011c8:	4a29      	ldr	r2, [pc, #164]	; (8001270 <MX_ADC1_Init+0xc0>)
 80011ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011cc:	4b27      	ldr	r3, [pc, #156]	; (800126c <MX_ADC1_Init+0xbc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011d2:	4b26      	ldr	r3, [pc, #152]	; (800126c <MX_ADC1_Init+0xbc>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011d8:	4b24      	ldr	r3, [pc, #144]	; (800126c <MX_ADC1_Init+0xbc>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011de:	4b23      	ldr	r3, [pc, #140]	; (800126c <MX_ADC1_Init+0xbc>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011e4:	4b21      	ldr	r3, [pc, #132]	; (800126c <MX_ADC1_Init+0xbc>)
 80011e6:	2204      	movs	r2, #4
 80011e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011ea:	4b20      	ldr	r3, [pc, #128]	; (800126c <MX_ADC1_Init+0xbc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <MX_ADC1_Init+0xbc>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80011f6:	4b1d      	ldr	r3, [pc, #116]	; (800126c <MX_ADC1_Init+0xbc>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <MX_ADC1_Init+0xbc>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <MX_ADC1_Init+0xbc>)
 8001206:	2200      	movs	r2, #0
 8001208:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <MX_ADC1_Init+0xbc>)
 800120c:	2200      	movs	r2, #0
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <MX_ADC1_Init+0xbc>)
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <MX_ADC1_Init+0xbc>)
 800121a:	2200      	movs	r2, #0
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <MX_ADC1_Init+0xbc>)
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001226:	4811      	ldr	r0, [pc, #68]	; (800126c <MX_ADC1_Init+0xbc>)
 8001228:	f000 fd78 	bl	8001d1c <HAL_ADC_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001232:	f000 f89d 	bl	8001370 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_ADC1_Init+0xc4>)
 8001238:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800123a:	2306      	movs	r3, #6
 800123c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001242:	237f      	movs	r3, #127	; 0x7f
 8001244:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001246:	2304      	movs	r3, #4
 8001248:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800124e:	463b      	mov	r3, r7
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <MX_ADC1_Init+0xbc>)
 8001254:	f000 ffd6 	bl	8002204 <HAL_ADC_ConfigChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800125e:	f000 f887 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200001f0 	.word	0x200001f0
 8001270:	50040000 	.word	0x50040000
 8001274:	04300002 	.word	0x04300002

08001278 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <MX_USART2_UART_Init+0x58>)
 800127e:	4a15      	ldr	r2, [pc, #84]	; (80012d4 <MX_USART2_UART_Init+0x5c>)
 8001280:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <MX_USART2_UART_Init+0x58>)
 8001284:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001288:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <MX_USART2_UART_Init+0x58>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001290:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <MX_USART2_UART_Init+0x58>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <MX_USART2_UART_Init+0x58>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MX_USART2_UART_Init+0x58>)
 800129e:	220c      	movs	r2, #12
 80012a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <MX_USART2_UART_Init+0x58>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <MX_USART2_UART_Init+0x58>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <MX_USART2_UART_Init+0x58>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <MX_USART2_UART_Init+0x58>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ba:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_USART2_UART_Init+0x58>)
 80012bc:	f003 faac 	bl	8004818 <HAL_UART_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012c6:	f000 f853 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000254 	.word	0x20000254
 80012d4:	40004400 	.word	0x40004400

080012d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <MX_GPIO_Init+0x90>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a1d      	ldr	r2, [pc, #116]	; (8001368 <MX_GPIO_Init+0x90>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fa:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_GPIO_Init+0x90>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <MX_GPIO_Init+0x90>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a17      	ldr	r2, [pc, #92]	; (8001368 <MX_GPIO_Init+0x90>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MX_GPIO_Init+0x90>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <MX_GPIO_Init+0x90>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	4a11      	ldr	r2, [pc, #68]	; (8001368 <MX_GPIO_Init+0x90>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_GPIO_Init+0x90>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 7100 	mov.w	r1, #512	; 0x200
 800133c:	480b      	ldr	r0, [pc, #44]	; (800136c <MX_GPIO_Init+0x94>)
 800133e:	f002 f87b 	bl	8003438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001342:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001346:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	4619      	mov	r1, r3
 800135a:	4804      	ldr	r0, [pc, #16]	; (800136c <MX_GPIO_Init+0x94>)
 800135c:	f001 fef2 	bl	8003144 <HAL_GPIO_Init>

}
 8001360:	bf00      	nop
 8001362:	3720      	adds	r7, #32
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40021000 	.word	0x40021000
 800136c:	48000400 	.word	0x48000400

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001378:	e7fe      	b.n	8001378 <Error_Handler+0x8>
	...

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <HAL_MspInit+0x44>)
 8001384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001386:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <HAL_MspInit+0x44>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6613      	str	r3, [r2, #96]	; 0x60
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <HAL_MspInit+0x44>)
 8001390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_MspInit+0x44>)
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <HAL_MspInit+0x44>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	6593      	str	r3, [r2, #88]	; 0x58
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_MspInit+0x44>)
 80013a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000

080013c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b0a2      	sub	sp, #136	; 0x88
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2260      	movs	r2, #96	; 0x60
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f005 fdde 	bl	8006fa6 <memset>
  if(hadc->Instance==ADC1)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a25      	ldr	r2, [pc, #148]	; (8001484 <HAL_ADC_MspInit+0xc0>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d142      	bne.n	800147a <HAL_ADC_MspInit+0xb6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013f8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80013fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013fe:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001400:	2302      	movs	r3, #2
 8001402:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001404:	2301      	movs	r3, #1
 8001406:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001408:	2308      	movs	r3, #8
 800140a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800140c:	2307      	movs	r3, #7
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001410:	2302      	movs	r3, #2
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001414:	2302      	movs	r3, #2
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001418:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4618      	mov	r0, r3
 8001424:	f002 febc 	bl	80041a0 <HAL_RCCEx_PeriphCLKConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800142e:	f7ff ff9f 	bl	8001370 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HAL_ADC_MspInit+0xc4>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	4a14      	ldr	r2, [pc, #80]	; (8001488 <HAL_ADC_MspInit+0xc4>)
 8001438:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800143c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_ADC_MspInit+0xc4>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_ADC_MspInit+0xc4>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <HAL_ADC_MspInit+0xc4>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001456:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <HAL_ADC_MspInit+0xc4>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001462:	2301      	movs	r3, #1
 8001464:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001466:	230b      	movs	r3, #11
 8001468:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001472:	4619      	mov	r1, r3
 8001474:	4805      	ldr	r0, [pc, #20]	; (800148c <HAL_ADC_MspInit+0xc8>)
 8001476:	f001 fe65 	bl	8003144 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800147a:	bf00      	nop
 800147c:	3788      	adds	r7, #136	; 0x88
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	50040000 	.word	0x50040000
 8001488:	40021000 	.word	0x40021000
 800148c:	48000800 	.word	0x48000800

08001490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b0a2      	sub	sp, #136	; 0x88
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2260      	movs	r2, #96	; 0x60
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f005 fd78 	bl	8006fa6 <memset>
  if(huart->Instance==USART2)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a24      	ldr	r2, [pc, #144]	; (800154c <HAL_UART_MspInit+0xbc>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d140      	bne.n	8001542 <HAL_UART_MspInit+0xb2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014c0:	2302      	movs	r3, #2
 80014c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4618      	mov	r0, r3
 80014ce:	f002 fe67 	bl	80041a0 <HAL_RCCEx_PeriphCLKConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014d8:	f7ff ff4a 	bl	8001370 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014dc:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <HAL_UART_MspInit+0xc0>)
 80014de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e0:	4a1b      	ldr	r2, [pc, #108]	; (8001550 <HAL_UART_MspInit+0xc0>)
 80014e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e6:	6593      	str	r3, [r2, #88]	; 0x58
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_UART_MspInit+0xc0>)
 80014ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_UART_MspInit+0xc0>)
 80014f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f8:	4a15      	ldr	r2, [pc, #84]	; (8001550 <HAL_UART_MspInit+0xc0>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <HAL_UART_MspInit+0xc0>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800150c:	230c      	movs	r3, #12
 800150e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800151e:	2307      	movs	r3, #7
 8001520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001528:	4619      	mov	r1, r3
 800152a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152e:	f001 fe09 	bl	8003144 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	2026      	movs	r0, #38	; 0x26
 8001538:	f001 fd4f 	bl	8002fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800153c:	2026      	movs	r0, #38	; 0x26
 800153e:	f001 fd68 	bl	8003012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001542:	bf00      	nop
 8001544:	3788      	adds	r7, #136	; 0x88
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40004400 	.word	0x40004400
 8001550:	40021000 	.word	0x40021000

08001554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <NMI_Handler+0x4>

0800155a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <HardFault_Handler+0x4>

08001560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <MemManage_Handler+0x4>

08001566 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <BusFault_Handler+0x4>

0800156c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <UsageFault_Handler+0x4>

08001572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a0:	f000 f962 	bl	8001868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <USART2_IRQHandler+0x10>)
 80015ae:	f003 fb21 	bl	8004bf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000254 	.word	0x20000254

080015bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
	return 1;
 80015c0:	2301      	movs	r3, #1
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <_kill>:

int _kill(int pid, int sig)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015d6:	f005 fd39 	bl	800704c <__errno>
 80015da:	4603      	mov	r3, r0
 80015dc:	2216      	movs	r2, #22
 80015de:	601a      	str	r2, [r3, #0]
	return -1;
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_exit>:

void _exit (int status)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015f4:	f04f 31ff 	mov.w	r1, #4294967295
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ffe7 	bl	80015cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80015fe:	e7fe      	b.n	80015fe <_exit+0x12>

08001600 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	e00a      	b.n	8001628 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001612:	f3af 8000 	nop.w
 8001616:	4601      	mov	r1, r0
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	1c5a      	adds	r2, r3, #1
 800161c:	60ba      	str	r2, [r7, #8]
 800161e:	b2ca      	uxtb	r2, r1
 8001620:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	3301      	adds	r3, #1
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	429a      	cmp	r2, r3
 800162e:	dbf0      	blt.n	8001612 <_read+0x12>
	}

return len;
 8001630:	687b      	ldr	r3, [r7, #4]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b086      	sub	sp, #24
 800163e:	af00      	add	r7, sp, #0
 8001640:	60f8      	str	r0, [r7, #12]
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	e009      	b.n	8001660 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	60ba      	str	r2, [r7, #8]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3301      	adds	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	429a      	cmp	r2, r3
 8001666:	dbf1      	blt.n	800164c <_write+0x12>
	}
	return len;
 8001668:	687b      	ldr	r3, [r7, #4]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <_close>:

int _close(int file)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
	return -1;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800169a:	605a      	str	r2, [r3, #4]
	return 0;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <_isatty>:

int _isatty(int file)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
	return 1;
 80016b2:	2301      	movs	r3, #1
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
	return 0;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e4:	4a14      	ldr	r2, [pc, #80]	; (8001738 <_sbrk+0x5c>)
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <_sbrk+0x60>)
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f0:	4b13      	ldr	r3, [pc, #76]	; (8001740 <_sbrk+0x64>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d102      	bne.n	80016fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <_sbrk+0x64>)
 80016fa:	4a12      	ldr	r2, [pc, #72]	; (8001744 <_sbrk+0x68>)
 80016fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	429a      	cmp	r2, r3
 800170a:	d207      	bcs.n	800171c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800170c:	f005 fc9e 	bl	800704c <__errno>
 8001710:	4603      	mov	r3, r0
 8001712:	220c      	movs	r2, #12
 8001714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001716:	f04f 33ff 	mov.w	r3, #4294967295
 800171a:	e009      	b.n	8001730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <_sbrk+0x64>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001722:	4b07      	ldr	r3, [pc, #28]	; (8001740 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	4a05      	ldr	r2, [pc, #20]	; (8001740 <_sbrk+0x64>)
 800172c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800172e:	68fb      	ldr	r3, [r7, #12]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	2000c000 	.word	0x2000c000
 800173c:	00000400 	.word	0x00000400
 8001740:	200002e4 	.word	0x200002e4
 8001744:	20000438 	.word	0x20000438

08001748 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <SystemInit+0x20>)
 800174e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001752:	4a05      	ldr	r2, [pc, #20]	; (8001768 <SystemInit+0x20>)
 8001754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800176c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001770:	f7ff ffea 	bl	8001748 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001774:	480c      	ldr	r0, [pc, #48]	; (80017a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001776:	490d      	ldr	r1, [pc, #52]	; (80017ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001778:	4a0d      	ldr	r2, [pc, #52]	; (80017b0 <LoopForever+0xe>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800177c:	e002      	b.n	8001784 <LoopCopyDataInit>

0800177e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001782:	3304      	adds	r3, #4

08001784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001788:	d3f9      	bcc.n	800177e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800178c:	4c0a      	ldr	r4, [pc, #40]	; (80017b8 <LoopForever+0x16>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001790:	e001      	b.n	8001796 <LoopFillZerobss>

08001792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001794:	3204      	adds	r2, #4

08001796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001798:	d3fb      	bcc.n	8001792 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800179a:	f005 fc5d 	bl	8007058 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800179e:	f7ff fc27 	bl	8000ff0 <main>

080017a2 <LoopForever>:

LoopForever:
    b LoopForever
 80017a2:	e7fe      	b.n	80017a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017a4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80017a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ac:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80017b0:	0800acc0 	.word	0x0800acc0
  ldr r2, =_sbss
 80017b4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80017b8:	20000438 	.word	0x20000438

080017bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017bc:	e7fe      	b.n	80017bc <ADC1_IRQHandler>

080017be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c8:	2003      	movs	r0, #3
 80017ca:	f001 fbfb 	bl	8002fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ce:	200f      	movs	r0, #15
 80017d0:	f000 f80e 	bl	80017f0 <HAL_InitTick>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d002      	beq.n	80017e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	71fb      	strb	r3, [r7, #7]
 80017de:	e001      	b.n	80017e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017e0:	f7ff fdcc 	bl	800137c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017e4:	79fb      	ldrb	r3, [r7, #7]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <HAL_InitTick+0x6c>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d023      	beq.n	800184c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001804:	4b16      	ldr	r3, [pc, #88]	; (8001860 <HAL_InitTick+0x70>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <HAL_InitTick+0x6c>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4619      	mov	r1, r3
 800180e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001812:	fbb3 f3f1 	udiv	r3, r3, r1
 8001816:	fbb2 f3f3 	udiv	r3, r2, r3
 800181a:	4618      	mov	r0, r3
 800181c:	f001 fc07 	bl	800302e <HAL_SYSTICK_Config>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10f      	bne.n	8001846 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b0f      	cmp	r3, #15
 800182a:	d809      	bhi.n	8001840 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800182c:	2200      	movs	r2, #0
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	f04f 30ff 	mov.w	r0, #4294967295
 8001834:	f001 fbd1 	bl	8002fda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001838:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <HAL_InitTick+0x74>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	e007      	b.n	8001850 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	73fb      	strb	r3, [r7, #15]
 8001844:	e004      	b.n	8001850 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	73fb      	strb	r3, [r7, #15]
 800184a:	e001      	b.n	8001850 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000008 	.word	0x20000008
 8001860:	20000000 	.word	0x20000000
 8001864:	20000004 	.word	0x20000004

08001868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_IncTick+0x20>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	461a      	mov	r2, r3
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_IncTick+0x24>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4413      	add	r3, r2
 8001878:	4a04      	ldr	r2, [pc, #16]	; (800188c <HAL_IncTick+0x24>)
 800187a:	6013      	str	r3, [r2, #0]
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000008 	.word	0x20000008
 800188c:	200002e8 	.word	0x200002e8

08001890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return uwTick;
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <HAL_GetTick+0x14>)
 8001896:	681b      	ldr	r3, [r3, #0]
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	200002e8 	.word	0x200002e8

080018a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b0:	f7ff ffee 	bl	8001890 <HAL_GetTick>
 80018b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c0:	d005      	beq.n	80018ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <HAL_Delay+0x44>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4413      	add	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ce:	bf00      	nop
 80018d0:	f7ff ffde 	bl	8001890 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d8f7      	bhi.n	80018d0 <HAL_Delay+0x28>
  {
  }
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000008 	.word	0x20000008

080018f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	431a      	orrs	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	609a      	str	r2, [r3, #8]
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	609a      	str	r2, [r3, #8]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	3360      	adds	r3, #96	; 0x60
 800196a:	461a      	mov	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <LL_ADC_SetOffset+0x44>)
 800197a:	4013      	ands	r3, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	4313      	orrs	r3, r2
 8001988:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001990:	bf00      	nop
 8001992:	371c      	adds	r7, #28
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	03fff000 	.word	0x03fff000

080019a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3360      	adds	r3, #96	; 0x60
 80019ae:	461a      	mov	r2, r3
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	3360      	adds	r3, #96	; 0x60
 80019dc:	461a      	mov	r2, r3
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019f6:	bf00      	nop
 80019f8:	371c      	adds	r7, #28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3330      	adds	r3, #48	; 0x30
 8001a38:	461a      	mov	r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	0a1b      	lsrs	r3, r3, #8
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	f003 030c 	and.w	r3, r3, #12
 8001a44:	4413      	add	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f003 031f 	and.w	r3, r3, #31
 8001a52:	211f      	movs	r1, #31
 8001a54:	fa01 f303 	lsl.w	r3, r1, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	0e9b      	lsrs	r3, r3, #26
 8001a60:	f003 011f 	and.w	r1, r3, #31
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	f003 031f 	and.w	r3, r3, #31
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a74:	bf00      	nop
 8001a76:	371c      	adds	r7, #28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3314      	adds	r3, #20
 8001a90:	461a      	mov	r2, r3
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	0e5b      	lsrs	r3, r3, #25
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	4413      	add	r3, r2
 8001a9e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	0d1b      	lsrs	r3, r3, #20
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	2107      	movs	r1, #7
 8001aae:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	401a      	ands	r2, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	0d1b      	lsrs	r3, r3, #20
 8001aba:	f003 031f 	and.w	r3, r3, #31
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001aca:	bf00      	nop
 8001acc:	371c      	adds	r7, #28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af0:	43db      	mvns	r3, r3
 8001af2:	401a      	ands	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f003 0318 	and.w	r3, r3, #24
 8001afa:	4908      	ldr	r1, [pc, #32]	; (8001b1c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001afc:	40d9      	lsrs	r1, r3
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	400b      	ands	r3, r1
 8001b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b06:	431a      	orrs	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b0e:	bf00      	nop
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	0007ffff 	.word	0x0007ffff

08001b20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6093      	str	r3, [r2, #8]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b58:	d101      	bne.n	8001b5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ba8:	d101      	bne.n	8001bae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bd0:	f043 0201 	orr.w	r2, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bf4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bf8:	f043 0202 	orr.w	r2, r3, #2
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <LL_ADC_IsEnabled+0x18>
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <LL_ADC_IsEnabled+0x1a>
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d101      	bne.n	8001c4a <LL_ADC_IsDisableOngoing+0x18>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <LL_ADC_IsDisableOngoing+0x1a>
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c6c:	f043 0204 	orr.w	r2, r3, #4
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c94:	f043 0210 	orr.w	r2, r3, #16
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d101      	bne.n	8001cc0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cde:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ce2:	f043 0220 	orr.w	r2, r3, #32
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d101      	bne.n	8001d0e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e126      	b.n	8001f84 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d109      	bne.n	8001d58 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff fb3d 	bl	80013c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fef1 	bl	8001b44 <LL_ADC_IsDeepPowerDownEnabled>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d004      	beq.n	8001d72 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fed7 	bl	8001b20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ff0c 	bl	8001b94 <LL_ADC_IsInternalRegulatorEnabled>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d115      	bne.n	8001dae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fef0 	bl	8001b6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d8c:	4b7f      	ldr	r3, [pc, #508]	; (8001f8c <HAL_ADC_Init+0x270>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	099b      	lsrs	r3, r3, #6
 8001d92:	4a7f      	ldr	r2, [pc, #508]	; (8001f90 <HAL_ADC_Init+0x274>)
 8001d94:	fba2 2303 	umull	r2, r3, r2, r3
 8001d98:	099b      	lsrs	r3, r3, #6
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001da0:	e002      	b.n	8001da8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3b01      	subs	r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f9      	bne.n	8001da2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff feee 	bl	8001b94 <LL_ADC_IsInternalRegulatorEnabled>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10d      	bne.n	8001dda <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc2:	f043 0210 	orr.w	r2, r3, #16
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dce:	f043 0201 	orr.w	r2, r3, #1
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ff62 	bl	8001ca8 <LL_ADC_REG_IsConversionOngoing>
 8001de4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f040 80bf 	bne.w	8001f72 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f040 80bb 	bne.w	8001f72 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e00:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e04:	f043 0202 	orr.w	r2, r3, #2
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fefb 	bl	8001c0c <LL_ADC_IsEnabled>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10b      	bne.n	8001e34 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e1c:	485d      	ldr	r0, [pc, #372]	; (8001f94 <HAL_ADC_Init+0x278>)
 8001e1e:	f7ff fef5 	bl	8001c0c <LL_ADC_IsEnabled>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d105      	bne.n	8001e34 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	485a      	ldr	r0, [pc, #360]	; (8001f98 <HAL_ADC_Init+0x27c>)
 8001e30:	f7ff fd5e 	bl	80018f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7e5b      	ldrb	r3, [r3, #25]
 8001e38:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e3e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e44:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e4a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e52:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d106      	bne.n	8001e70 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	3b01      	subs	r3, #1
 8001e68:	045b      	lsls	r3, r3, #17
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d009      	beq.n	8001e8c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e84:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	4b42      	ldr	r3, [pc, #264]	; (8001f9c <HAL_ADC_Init+0x280>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	69b9      	ldr	r1, [r7, #24]
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff26 	bl	8001cf6 <LL_ADC_INJ_IsConversionOngoing>
 8001eaa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d13d      	bne.n	8001f2e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d13a      	bne.n	8001f2e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ebc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ec4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ed4:	f023 0302 	bic.w	r3, r3, #2
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	69b9      	ldr	r1, [r7, #24]
 8001ede:	430b      	orrs	r3, r1
 8001ee0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d118      	bne.n	8001f1e <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ef6:	f023 0304 	bic.w	r3, r3, #4
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f02:	4311      	orrs	r1, r2
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f08:	4311      	orrs	r1, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	431a      	orrs	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	611a      	str	r2, [r3, #16]
 8001f1c:	e007      	b.n	8001f2e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0201 	bic.w	r2, r2, #1
 8001f2c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d10c      	bne.n	8001f50 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	f023 010f 	bic.w	r1, r3, #15
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	1e5a      	subs	r2, r3, #1
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f4e:	e007      	b.n	8001f60 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 020f 	bic.w	r2, r2, #15
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f64:	f023 0303 	bic.w	r3, r3, #3
 8001f68:	f043 0201 	orr.w	r2, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	655a      	str	r2, [r3, #84]	; 0x54
 8001f70:	e007      	b.n	8001f82 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f76:	f043 0210 	orr.w	r2, r3, #16
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f82:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3720      	adds	r7, #32
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	053e2d63 	.word	0x053e2d63
 8001f94:	50040000 	.word	0x50040000
 8001f98:	50040300 	.word	0x50040300
 8001f9c:	fff0c007 	.word	0xfff0c007

08001fa0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fe7b 	bl	8001ca8 <LL_ADC_REG_IsConversionOngoing>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d14f      	bne.n	8002058 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_ADC_Start+0x26>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e04b      	b.n	800205e <HAL_ADC_Start+0xbe>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 fdb6 	bl	8002b40 <ADC_Enable>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d137      	bne.n	800204e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fe6:	f023 0301 	bic.w	r3, r3, #1
 8001fea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ffe:	d106      	bne.n	800200e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	f023 0206 	bic.w	r2, r3, #6
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	659a      	str	r2, [r3, #88]	; 0x58
 800200c:	e002      	b.n	8002014 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	221c      	movs	r2, #28
 800201a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d007      	beq.n	8002042 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002036:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800203a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fe06 	bl	8001c58 <LL_ADC_REG_StartConversion>
 800204c:	e006      	b.n	800205c <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002056:	e001      	b.n	800205c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002058:	2302      	movs	r3, #2
 800205a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800205c:	7bfb      	ldrb	r3, [r7, #15]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b084      	sub	sp, #16
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_ADC_Stop+0x16>
 8002078:	2302      	movs	r3, #2
 800207a:	e023      	b.n	80020c4 <HAL_ADC_Stop+0x5e>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002084:	2103      	movs	r1, #3
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 fc9e 	bl	80029c8 <ADC_ConversionStop>
 800208c:	4603      	mov	r3, r0
 800208e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d111      	bne.n	80020ba <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 fdd8 	bl	8002c4c <ADC_Disable>
 800209c:	4603      	mov	r3, r0
 800209e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020ae:	f023 0301 	bic.w	r3, r3, #1
 80020b2:	f043 0201 	orr.w	r2, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d102      	bne.n	80020e4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80020de:	2308      	movs	r3, #8
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	e010      	b.n	8002106 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d007      	beq.n	8002102 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f6:	f043 0220 	orr.w	r2, r3, #32
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e06f      	b.n	80021e2 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002102:	2304      	movs	r3, #4
 8002104:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002106:	f7ff fbc3 	bl	8001890 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800210c:	e021      	b.n	8002152 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002114:	d01d      	beq.n	8002152 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002116:	f7ff fbbb 	bl	8001890 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d302      	bcc.n	800212c <HAL_ADC_PollForConversion+0x60>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d112      	bne.n	8002152 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	4013      	ands	r3, r2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10b      	bne.n	8002152 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213e:	f043 0204 	orr.w	r2, r3, #4
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e047      	b.n	80021e2 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	4013      	ands	r3, r2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0d6      	beq.n	800210e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002164:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fc46 	bl	8001a02 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d01c      	beq.n	80021b6 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	7e5b      	ldrb	r3, [r3, #25]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d118      	bne.n	80021b6 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b08      	cmp	r3, #8
 8002190:	d111      	bne.n	80021b6 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002196:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d105      	bne.n	80021b6 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ae:	f043 0201 	orr.w	r2, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d104      	bne.n	80021ce <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2208      	movs	r2, #8
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	e008      	b.n	80021e0 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d103      	bne.n	80021e0 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	220c      	movs	r2, #12
 80021de:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b0b6      	sub	sp, #216	; 0xd8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002214:	2300      	movs	r3, #0
 8002216:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800221e:	2b01      	cmp	r3, #1
 8002220:	d101      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x22>
 8002222:	2302      	movs	r3, #2
 8002224:	e3bb      	b.n	800299e <HAL_ADC_ConfigChannel+0x79a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fd38 	bl	8001ca8 <LL_ADC_REG_IsConversionOngoing>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	f040 83a0 	bne.w	8002980 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b05      	cmp	r3, #5
 800224e:	d824      	bhi.n	800229a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	3b02      	subs	r3, #2
 8002256:	2b03      	cmp	r3, #3
 8002258:	d81b      	bhi.n	8002292 <HAL_ADC_ConfigChannel+0x8e>
 800225a:	a201      	add	r2, pc, #4	; (adr r2, 8002260 <HAL_ADC_ConfigChannel+0x5c>)
 800225c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002260:	08002271 	.word	0x08002271
 8002264:	08002279 	.word	0x08002279
 8002268:	08002281 	.word	0x08002281
 800226c:	08002289 	.word	0x08002289
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002270:	230c      	movs	r3, #12
 8002272:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002276:	e010      	b.n	800229a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002278:	2312      	movs	r3, #18
 800227a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800227e:	e00c      	b.n	800229a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002280:	2318      	movs	r3, #24
 8002282:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002286:	e008      	b.n	800229a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002288:	f44f 7380 	mov.w	r3, #256	; 0x100
 800228c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002290:	e003      	b.n	800229a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002292:	2306      	movs	r3, #6
 8002294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002298:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80022a8:	f7ff fbbe 	bl	8001a28 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fcf9 	bl	8001ca8 <LL_ADC_REG_IsConversionOngoing>
 80022b6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fd19 	bl	8001cf6 <LL_ADC_INJ_IsConversionOngoing>
 80022c4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f040 81a4 	bne.w	800261a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f040 819f 	bne.w	800261a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	6819      	ldr	r1, [r3, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	461a      	mov	r2, r3
 80022ea:	f7ff fbc9 	bl	8001a80 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	695a      	ldr	r2, [r3, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	08db      	lsrs	r3, r3, #3
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	2b04      	cmp	r3, #4
 800230e:	d00a      	beq.n	8002326 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	6919      	ldr	r1, [r3, #16]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002320:	f7ff fb1a 	bl	8001958 <LL_ADC_SetOffset>
 8002324:	e179      	b.n	800261a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2100      	movs	r1, #0
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fb37 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002332:	4603      	mov	r3, r0
 8002334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10a      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x14e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fb2c 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	0e9b      	lsrs	r3, r3, #26
 800234c:	f003 021f 	and.w	r2, r3, #31
 8002350:	e01e      	b.n	8002390 <HAL_ADC_ConfigChannel+0x18c>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2100      	movs	r1, #0
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fb21 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 800235e:	4603      	mov	r3, r0
 8002360:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002368:	fa93 f3a3 	rbit	r3, r3
 800236c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002370:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002374:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002378:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002380:	2320      	movs	r3, #32
 8002382:	e004      	b.n	800238e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002384:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002388:	fab3 f383 	clz	r3, r3
 800238c:	b2db      	uxtb	r3, r3
 800238e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002398:	2b00      	cmp	r3, #0
 800239a:	d105      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x1a4>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	0e9b      	lsrs	r3, r3, #26
 80023a2:	f003 031f 	and.w	r3, r3, #31
 80023a6:	e018      	b.n	80023da <HAL_ADC_ConfigChannel+0x1d6>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80023bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80023c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80023cc:	2320      	movs	r3, #32
 80023ce:	e004      	b.n	80023da <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80023d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023d4:	fab3 f383 	clz	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023da:	429a      	cmp	r2, r3
 80023dc:	d106      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2200      	movs	r2, #0
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff faf0 	bl	80019cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2101      	movs	r1, #1
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fad4 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10a      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x214>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2101      	movs	r1, #1
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fac9 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 800240e:	4603      	mov	r3, r0
 8002410:	0e9b      	lsrs	r3, r3, #26
 8002412:	f003 021f 	and.w	r2, r3, #31
 8002416:	e01e      	b.n	8002456 <HAL_ADC_ConfigChannel+0x252>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2101      	movs	r1, #1
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fabe 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002424:	4603      	mov	r3, r0
 8002426:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002436:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800243a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800243e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002446:	2320      	movs	r3, #32
 8002448:	e004      	b.n	8002454 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800244a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800244e:	fab3 f383 	clz	r3, r3
 8002452:	b2db      	uxtb	r3, r3
 8002454:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245e:	2b00      	cmp	r3, #0
 8002460:	d105      	bne.n	800246e <HAL_ADC_ConfigChannel+0x26a>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	0e9b      	lsrs	r3, r3, #26
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	e018      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x29c>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800247a:	fa93 f3a3 	rbit	r3, r3
 800247e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002482:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002486:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800248a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002492:	2320      	movs	r3, #32
 8002494:	e004      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002496:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800249a:	fab3 f383 	clz	r3, r3
 800249e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d106      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2200      	movs	r2, #0
 80024aa:	2101      	movs	r1, #1
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fa8d 	bl	80019cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2102      	movs	r1, #2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fa71 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 80024be:	4603      	mov	r3, r0
 80024c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10a      	bne.n	80024de <HAL_ADC_ConfigChannel+0x2da>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2102      	movs	r1, #2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fa66 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 80024d4:	4603      	mov	r3, r0
 80024d6:	0e9b      	lsrs	r3, r3, #26
 80024d8:	f003 021f 	and.w	r2, r3, #31
 80024dc:	e01e      	b.n	800251c <HAL_ADC_ConfigChannel+0x318>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2102      	movs	r1, #2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff fa5b 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 80024ea:	4603      	mov	r3, r0
 80024ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024f4:	fa93 f3a3 	rbit	r3, r3
 80024f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80024fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002500:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002504:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800250c:	2320      	movs	r3, #32
 800250e:	e004      	b.n	800251a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002510:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002514:	fab3 f383 	clz	r3, r3
 8002518:	b2db      	uxtb	r3, r3
 800251a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002524:	2b00      	cmp	r3, #0
 8002526:	d105      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x330>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	0e9b      	lsrs	r3, r3, #26
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	e014      	b.n	800255e <HAL_ADC_ConfigChannel+0x35a>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800253c:	fa93 f3a3 	rbit	r3, r3
 8002540:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002542:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002544:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002548:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002550:	2320      	movs	r3, #32
 8002552:	e004      	b.n	800255e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002554:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002558:	fab3 f383 	clz	r3, r3
 800255c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800255e:	429a      	cmp	r2, r3
 8002560:	d106      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2200      	movs	r2, #0
 8002568:	2102      	movs	r1, #2
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fa2e 	bl	80019cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2103      	movs	r1, #3
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fa12 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 800257c:	4603      	mov	r3, r0
 800257e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10a      	bne.n	800259c <HAL_ADC_ConfigChannel+0x398>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2103      	movs	r1, #3
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fa07 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002592:	4603      	mov	r3, r0
 8002594:	0e9b      	lsrs	r3, r3, #26
 8002596:	f003 021f 	and.w	r2, r3, #31
 800259a:	e017      	b.n	80025cc <HAL_ADC_ConfigChannel+0x3c8>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2103      	movs	r1, #3
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff f9fc 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 80025a8:	4603      	mov	r3, r0
 80025aa:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025ae:	fa93 f3a3 	rbit	r3, r3
 80025b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80025b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80025b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80025be:	2320      	movs	r3, #32
 80025c0:	e003      	b.n	80025ca <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80025c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d105      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x3e0>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	0e9b      	lsrs	r3, r3, #26
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	e011      	b.n	8002608 <HAL_ADC_ConfigChannel+0x404>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025ec:	fa93 f3a3 	rbit	r3, r3
 80025f0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80025f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025f4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80025f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80025fc:	2320      	movs	r3, #32
 80025fe:	e003      	b.n	8002608 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002600:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002608:	429a      	cmp	r2, r3
 800260a:	d106      	bne.n	800261a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2200      	movs	r2, #0
 8002612:	2103      	movs	r1, #3
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff f9d9 	bl	80019cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff faf4 	bl	8001c0c <LL_ADC_IsEnabled>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	f040 8140 	bne.w	80028ac <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	6819      	ldr	r1, [r3, #0]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	461a      	mov	r2, r3
 800263a:	f7ff fa4d 	bl	8001ad8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	4a8f      	ldr	r2, [pc, #572]	; (8002880 <HAL_ADC_ConfigChannel+0x67c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	f040 8131 	bne.w	80028ac <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10b      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x46e>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	0e9b      	lsrs	r3, r3, #26
 8002660:	3301      	adds	r3, #1
 8002662:	f003 031f 	and.w	r3, r3, #31
 8002666:	2b09      	cmp	r3, #9
 8002668:	bf94      	ite	ls
 800266a:	2301      	movls	r3, #1
 800266c:	2300      	movhi	r3, #0
 800266e:	b2db      	uxtb	r3, r3
 8002670:	e019      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x4a2>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800267a:	fa93 f3a3 	rbit	r3, r3
 800267e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002682:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800268a:	2320      	movs	r3, #32
 800268c:	e003      	b.n	8002696 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800268e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002690:	fab3 f383 	clz	r3, r3
 8002694:	b2db      	uxtb	r3, r3
 8002696:	3301      	adds	r3, #1
 8002698:	f003 031f 	and.w	r3, r3, #31
 800269c:	2b09      	cmp	r3, #9
 800269e:	bf94      	ite	ls
 80026a0:	2301      	movls	r3, #1
 80026a2:	2300      	movhi	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d079      	beq.n	800279e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d107      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x4c2>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	0e9b      	lsrs	r3, r3, #26
 80026bc:	3301      	adds	r3, #1
 80026be:	069b      	lsls	r3, r3, #26
 80026c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026c4:	e015      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x4ee>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80026d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026d6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80026d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80026de:	2320      	movs	r3, #32
 80026e0:	e003      	b.n	80026ea <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80026e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026e4:	fab3 f383 	clz	r3, r3
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	3301      	adds	r3, #1
 80026ec:	069b      	lsls	r3, r3, #26
 80026ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x50e>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	0e9b      	lsrs	r3, r3, #26
 8002704:	3301      	adds	r3, #1
 8002706:	f003 031f 	and.w	r3, r3, #31
 800270a:	2101      	movs	r1, #1
 800270c:	fa01 f303 	lsl.w	r3, r1, r3
 8002710:	e017      	b.n	8002742 <HAL_ADC_ConfigChannel+0x53e>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002722:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800272a:	2320      	movs	r3, #32
 800272c:	e003      	b.n	8002736 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800272e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002730:	fab3 f383 	clz	r3, r3
 8002734:	b2db      	uxtb	r3, r3
 8002736:	3301      	adds	r3, #1
 8002738:	f003 031f 	and.w	r3, r3, #31
 800273c:	2101      	movs	r1, #1
 800273e:	fa01 f303 	lsl.w	r3, r1, r3
 8002742:	ea42 0103 	orr.w	r1, r2, r3
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10a      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x564>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	0e9b      	lsrs	r3, r3, #26
 8002758:	3301      	adds	r3, #1
 800275a:	f003 021f 	and.w	r2, r3, #31
 800275e:	4613      	mov	r3, r2
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4413      	add	r3, r2
 8002764:	051b      	lsls	r3, r3, #20
 8002766:	e018      	b.n	800279a <HAL_ADC_ConfigChannel+0x596>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002770:	fa93 f3a3 	rbit	r3, r3
 8002774:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002778:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800277a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002780:	2320      	movs	r3, #32
 8002782:	e003      	b.n	800278c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002786:	fab3 f383 	clz	r3, r3
 800278a:	b2db      	uxtb	r3, r3
 800278c:	3301      	adds	r3, #1
 800278e:	f003 021f 	and.w	r2, r3, #31
 8002792:	4613      	mov	r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	4413      	add	r3, r2
 8002798:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800279a:	430b      	orrs	r3, r1
 800279c:	e081      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d107      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x5b6>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	0e9b      	lsrs	r3, r3, #26
 80027b0:	3301      	adds	r3, #1
 80027b2:	069b      	lsls	r3, r3, #26
 80027b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027b8:	e015      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x5e2>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80027cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80027d2:	2320      	movs	r3, #32
 80027d4:	e003      	b.n	80027de <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	fab3 f383 	clz	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	3301      	adds	r3, #1
 80027e0:	069b      	lsls	r3, r3, #26
 80027e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d109      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x602>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	0e9b      	lsrs	r3, r3, #26
 80027f8:	3301      	adds	r3, #1
 80027fa:	f003 031f 	and.w	r3, r3, #31
 80027fe:	2101      	movs	r1, #1
 8002800:	fa01 f303 	lsl.w	r3, r1, r3
 8002804:	e017      	b.n	8002836 <HAL_ADC_ConfigChannel+0x632>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	fa93 f3a3 	rbit	r3, r3
 8002812:	61bb      	str	r3, [r7, #24]
  return result;
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800281e:	2320      	movs	r3, #32
 8002820:	e003      	b.n	800282a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	fab3 f383 	clz	r3, r3
 8002828:	b2db      	uxtb	r3, r3
 800282a:	3301      	adds	r3, #1
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	2101      	movs	r1, #1
 8002832:	fa01 f303 	lsl.w	r3, r1, r3
 8002836:	ea42 0103 	orr.w	r1, r2, r3
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10d      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x65e>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	0e9b      	lsrs	r3, r3, #26
 800284c:	3301      	adds	r3, #1
 800284e:	f003 021f 	and.w	r2, r3, #31
 8002852:	4613      	mov	r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4413      	add	r3, r2
 8002858:	3b1e      	subs	r3, #30
 800285a:	051b      	lsls	r3, r3, #20
 800285c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002860:	e01e      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x69c>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	60fb      	str	r3, [r7, #12]
  return result;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d104      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800287a:	2320      	movs	r3, #32
 800287c:	e006      	b.n	800288c <HAL_ADC_ConfigChannel+0x688>
 800287e:	bf00      	nop
 8002880:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	3301      	adds	r3, #1
 800288e:	f003 021f 	and.w	r2, r3, #31
 8002892:	4613      	mov	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	4413      	add	r3, r2
 8002898:	3b1e      	subs	r3, #30
 800289a:	051b      	lsls	r3, r3, #20
 800289c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028a0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028a6:	4619      	mov	r1, r3
 80028a8:	f7ff f8ea 	bl	8001a80 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b3d      	ldr	r3, [pc, #244]	; (80029a8 <HAL_ADC_ConfigChannel+0x7a4>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d06c      	beq.n	8002992 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028b8:	483c      	ldr	r0, [pc, #240]	; (80029ac <HAL_ADC_ConfigChannel+0x7a8>)
 80028ba:	f7ff f83f 	bl	800193c <LL_ADC_GetCommonPathInternalCh>
 80028be:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a3a      	ldr	r2, [pc, #232]	; (80029b0 <HAL_ADC_ConfigChannel+0x7ac>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d127      	bne.n	800291c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d121      	bne.n	800291c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a35      	ldr	r2, [pc, #212]	; (80029b4 <HAL_ADC_ConfigChannel+0x7b0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d157      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028ea:	4619      	mov	r1, r3
 80028ec:	482f      	ldr	r0, [pc, #188]	; (80029ac <HAL_ADC_ConfigChannel+0x7a8>)
 80028ee:	f7ff f812 	bl	8001916 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028f2:	4b31      	ldr	r3, [pc, #196]	; (80029b8 <HAL_ADC_ConfigChannel+0x7b4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	099b      	lsrs	r3, r3, #6
 80028f8:	4a30      	ldr	r2, [pc, #192]	; (80029bc <HAL_ADC_ConfigChannel+0x7b8>)
 80028fa:	fba2 2303 	umull	r2, r3, r2, r3
 80028fe:	099b      	lsrs	r3, r3, #6
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800290c:	e002      	b.n	8002914 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	3b01      	subs	r3, #1
 8002912:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f9      	bne.n	800290e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800291a:	e03a      	b.n	8002992 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a27      	ldr	r2, [pc, #156]	; (80029c0 <HAL_ADC_ConfigChannel+0x7bc>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d113      	bne.n	800294e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002926:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800292a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10d      	bne.n	800294e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1f      	ldr	r2, [pc, #124]	; (80029b4 <HAL_ADC_ConfigChannel+0x7b0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d12a      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800293c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002940:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002944:	4619      	mov	r1, r3
 8002946:	4819      	ldr	r0, [pc, #100]	; (80029ac <HAL_ADC_ConfigChannel+0x7a8>)
 8002948:	f7fe ffe5 	bl	8001916 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800294c:	e021      	b.n	8002992 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a1c      	ldr	r2, [pc, #112]	; (80029c4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d11c      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002958:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800295c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d116      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a12      	ldr	r2, [pc, #72]	; (80029b4 <HAL_ADC_ConfigChannel+0x7b0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d111      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800296e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002972:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002976:	4619      	mov	r1, r3
 8002978:	480c      	ldr	r0, [pc, #48]	; (80029ac <HAL_ADC_ConfigChannel+0x7a8>)
 800297a:	f7fe ffcc 	bl	8001916 <LL_ADC_SetCommonPathInternalCh>
 800297e:	e008      	b.n	8002992 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002984:	f043 0220 	orr.w	r2, r3, #32
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800299a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800299e:	4618      	mov	r0, r3
 80029a0:	37d8      	adds	r7, #216	; 0xd8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	80080000 	.word	0x80080000
 80029ac:	50040300 	.word	0x50040300
 80029b0:	c7520000 	.word	0xc7520000
 80029b4:	50040000 	.word	0x50040000
 80029b8:	20000000 	.word	0x20000000
 80029bc:	053e2d63 	.word	0x053e2d63
 80029c0:	cb840000 	.word	0xcb840000
 80029c4:	80000001 	.word	0x80000001

080029c8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff f962 	bl	8001ca8 <LL_ADC_REG_IsConversionOngoing>
 80029e4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff f983 	bl	8001cf6 <LL_ADC_INJ_IsConversionOngoing>
 80029f0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d103      	bne.n	8002a00 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 8098 	beq.w	8002b30 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d02a      	beq.n	8002a64 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	7e5b      	ldrb	r3, [r3, #25]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d126      	bne.n	8002a64 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7e1b      	ldrb	r3, [r3, #24]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d122      	bne.n	8002a64 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002a22:	e014      	b.n	8002a4e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	4a45      	ldr	r2, [pc, #276]	; (8002b3c <ADC_ConversionStop+0x174>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d90d      	bls.n	8002a48 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a30:	f043 0210 	orr.w	r2, r3, #16
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3c:	f043 0201 	orr.w	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e074      	b.n	8002b32 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a58:	2b40      	cmp	r3, #64	; 0x40
 8002a5a:	d1e3      	bne.n	8002a24 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2240      	movs	r2, #64	; 0x40
 8002a62:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d014      	beq.n	8002a94 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff f91a 	bl	8001ca8 <LL_ADC_REG_IsConversionOngoing>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00c      	beq.n	8002a94 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff f8d7 	bl	8001c32 <LL_ADC_IsDisableOngoing>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d104      	bne.n	8002a94 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff f8f6 	bl	8001c80 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d014      	beq.n	8002ac4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff f929 	bl	8001cf6 <LL_ADC_INJ_IsConversionOngoing>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00c      	beq.n	8002ac4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff f8bf 	bl	8001c32 <LL_ADC_IsDisableOngoing>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d104      	bne.n	8002ac4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff f905 	bl	8001cce <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d005      	beq.n	8002ad6 <ADC_ConversionStop+0x10e>
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d105      	bne.n	8002adc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002ad0:	230c      	movs	r3, #12
 8002ad2:	617b      	str	r3, [r7, #20]
        break;
 8002ad4:	e005      	b.n	8002ae2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002ad6:	2308      	movs	r3, #8
 8002ad8:	617b      	str	r3, [r7, #20]
        break;
 8002ada:	e002      	b.n	8002ae2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002adc:	2304      	movs	r3, #4
 8002ade:	617b      	str	r3, [r7, #20]
        break;
 8002ae0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002ae2:	f7fe fed5 	bl	8001890 <HAL_GetTick>
 8002ae6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ae8:	e01b      	b.n	8002b22 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002aea:	f7fe fed1 	bl	8001890 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	d914      	bls.n	8002b22 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00d      	beq.n	8002b22 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0a:	f043 0210 	orr.w	r2, r3, #16
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b16:	f043 0201 	orr.w	r2, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e007      	b.n	8002b32 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1dc      	bne.n	8002aea <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3720      	adds	r7, #32
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	a33fffff 	.word	0xa33fffff

08002b40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff f85b 	bl	8001c0c <LL_ADC_IsEnabled>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d169      	bne.n	8002c30 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	4b36      	ldr	r3, [pc, #216]	; (8002c3c <ADC_Enable+0xfc>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00d      	beq.n	8002b86 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6e:	f043 0210 	orr.w	r2, r3, #16
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7a:	f043 0201 	orr.w	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e055      	b.n	8002c32 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff f816 	bl	8001bbc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b90:	482b      	ldr	r0, [pc, #172]	; (8002c40 <ADC_Enable+0x100>)
 8002b92:	f7fe fed3 	bl	800193c <LL_ADC_GetCommonPathInternalCh>
 8002b96:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002b98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d013      	beq.n	8002bc8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ba0:	4b28      	ldr	r3, [pc, #160]	; (8002c44 <ADC_Enable+0x104>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	099b      	lsrs	r3, r3, #6
 8002ba6:	4a28      	ldr	r2, [pc, #160]	; (8002c48 <ADC_Enable+0x108>)
 8002ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bac:	099b      	lsrs	r3, r3, #6
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bba:	e002      	b.n	8002bc2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f9      	bne.n	8002bbc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002bc8:	f7fe fe62 	bl	8001890 <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bce:	e028      	b.n	8002c22 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff f819 	bl	8001c0c <LL_ADC_IsEnabled>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d104      	bne.n	8002bea <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fe ffe9 	bl	8001bbc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bea:	f7fe fe51 	bl	8001890 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d914      	bls.n	8002c22 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d00d      	beq.n	8002c22 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0a:	f043 0210 	orr.w	r2, r3, #16
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e007      	b.n	8002c32 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d1cf      	bne.n	8002bd0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	8000003f 	.word	0x8000003f
 8002c40:	50040300 	.word	0x50040300
 8002c44:	20000000 	.word	0x20000000
 8002c48:	053e2d63 	.word	0x053e2d63

08002c4c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fe ffea 	bl	8001c32 <LL_ADC_IsDisableOngoing>
 8002c5e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fe ffd1 	bl	8001c0c <LL_ADC_IsEnabled>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d047      	beq.n	8002d00 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d144      	bne.n	8002d00 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 030d 	and.w	r3, r3, #13
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d10c      	bne.n	8002c9e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe ffab 	bl	8001be4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2203      	movs	r2, #3
 8002c94:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c96:	f7fe fdfb 	bl	8001890 <HAL_GetTick>
 8002c9a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c9c:	e029      	b.n	8002cf2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca2:	f043 0210 	orr.w	r2, r3, #16
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cae:	f043 0201 	orr.w	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e023      	b.n	8002d02 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cba:	f7fe fde9 	bl	8001890 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d914      	bls.n	8002cf2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00d      	beq.n	8002cf2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cda:	f043 0210 	orr.w	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce6:	f043 0201 	orr.w	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e007      	b.n	8002d02 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1dc      	bne.n	8002cba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <LL_ADC_StartCalibration>:
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002d1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <LL_ADC_IsCalibrationOnGoing>:
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d50:	d101      	bne.n	8002d56 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_ADCEx_Calibration_Start+0x1c>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e04d      	b.n	8002e1c <HAL_ADCEx_Calibration_Start+0xb8>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f7ff ff5f 	bl	8002c4c <ADC_Disable>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d136      	bne.n	8002e06 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002da0:	f023 0302 	bic.w	r3, r3, #2
 8002da4:	f043 0202 	orr.w	r2, r3, #2
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6839      	ldr	r1, [r7, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff ffa9 	bl	8002d0a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002db8:	e014      	b.n	8002de4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002dc6:	d30d      	bcc.n	8002de4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dcc:	f023 0312 	bic.w	r3, r3, #18
 8002dd0:	f043 0210 	orr.w	r2, r3, #16
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e01b      	b.n	8002e1c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ffa7 	bl	8002d3c <LL_ADC_IsCalibrationOnGoing>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1e2      	bne.n	8002dba <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df8:	f023 0303 	bic.w	r3, r3, #3
 8002dfc:	f043 0201 	orr.w	r2, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	655a      	str	r2, [r3, #84]	; 0x54
 8002e04:	e005      	b.n	8002e12 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0a:	f043 0210 	orr.w	r2, r3, #16
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e34:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <__NVIC_SetPriorityGrouping+0x44>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e40:	4013      	ands	r3, r2
 8002e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e56:	4a04      	ldr	r2, [pc, #16]	; (8002e68 <__NVIC_SetPriorityGrouping+0x44>)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	60d3      	str	r3, [r2, #12]
}
 8002e5c:	bf00      	nop
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	e000ed00 	.word	0xe000ed00

08002e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e70:	4b04      	ldr	r3, [pc, #16]	; (8002e84 <__NVIC_GetPriorityGrouping+0x18>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	0a1b      	lsrs	r3, r3, #8
 8002e76:	f003 0307 	and.w	r3, r3, #7
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	e000ed00 	.word	0xe000ed00

08002e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	db0b      	blt.n	8002eb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	f003 021f 	and.w	r2, r3, #31
 8002ea0:	4907      	ldr	r1, [pc, #28]	; (8002ec0 <__NVIC_EnableIRQ+0x38>)
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8002eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	e000e100 	.word	0xe000e100

08002ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	6039      	str	r1, [r7, #0]
 8002ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	db0a      	blt.n	8002eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	490c      	ldr	r1, [pc, #48]	; (8002f10 <__NVIC_SetPriority+0x4c>)
 8002ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee2:	0112      	lsls	r2, r2, #4
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eec:	e00a      	b.n	8002f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	4908      	ldr	r1, [pc, #32]	; (8002f14 <__NVIC_SetPriority+0x50>)
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	3b04      	subs	r3, #4
 8002efc:	0112      	lsls	r2, r2, #4
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	440b      	add	r3, r1
 8002f02:	761a      	strb	r2, [r3, #24]
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	e000e100 	.word	0xe000e100
 8002f14:	e000ed00 	.word	0xe000ed00

08002f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b089      	sub	sp, #36	; 0x24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f1c3 0307 	rsb	r3, r3, #7
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	bf28      	it	cs
 8002f36:	2304      	movcs	r3, #4
 8002f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	2b06      	cmp	r3, #6
 8002f40:	d902      	bls.n	8002f48 <NVIC_EncodePriority+0x30>
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	3b03      	subs	r3, #3
 8002f46:	e000      	b.n	8002f4a <NVIC_EncodePriority+0x32>
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43da      	mvns	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	401a      	ands	r2, r3
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f60:	f04f 31ff 	mov.w	r1, #4294967295
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6a:	43d9      	mvns	r1, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f70:	4313      	orrs	r3, r2
         );
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3724      	adds	r7, #36	; 0x24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f90:	d301      	bcc.n	8002f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f92:	2301      	movs	r3, #1
 8002f94:	e00f      	b.n	8002fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f96:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <SysTick_Config+0x40>)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f9e:	210f      	movs	r1, #15
 8002fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa4:	f7ff ff8e 	bl	8002ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fa8:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <SysTick_Config+0x40>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fae:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <SysTick_Config+0x40>)
 8002fb0:	2207      	movs	r2, #7
 8002fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	e000e010 	.word	0xe000e010

08002fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff ff29 	bl	8002e24 <__NVIC_SetPriorityGrouping>
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b086      	sub	sp, #24
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
 8002fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fec:	f7ff ff3e 	bl	8002e6c <__NVIC_GetPriorityGrouping>
 8002ff0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68b9      	ldr	r1, [r7, #8]
 8002ff6:	6978      	ldr	r0, [r7, #20]
 8002ff8:	f7ff ff8e 	bl	8002f18 <NVIC_EncodePriority>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003002:	4611      	mov	r1, r2
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff ff5d 	bl	8002ec4 <__NVIC_SetPriority>
}
 800300a:	bf00      	nop
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	4603      	mov	r3, r0
 800301a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800301c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff ff31 	bl	8002e88 <__NVIC_EnableIRQ>
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff ffa2 	bl	8002f80 <SysTick_Config>
 800303c:	4603      	mov	r3, r0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003046:	b480      	push	{r7}
 8003048:	b085      	sub	sp, #20
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d008      	beq.n	8003070 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2204      	movs	r2, #4
 8003062:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e022      	b.n	80030b6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 020e 	bic.w	r2, r2, #14
 800307e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0201 	bic.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003094:	f003 021c 	and.w	r2, r3, #28
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	2101      	movs	r1, #1
 800309e:	fa01 f202 	lsl.w	r2, r1, r2
 80030a2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b084      	sub	sp, #16
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d005      	beq.n	80030e6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2204      	movs	r2, #4
 80030de:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
 80030e4:	e029      	b.n	800313a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 020e 	bic.w	r2, r2, #14
 80030f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0201 	bic.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	f003 021c 	and.w	r2, r3, #28
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	2101      	movs	r1, #1
 8003114:	fa01 f202 	lsl.w	r2, r1, r2
 8003118:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	4798      	blx	r3
    }
  }
  return status;
 800313a:	7bfb      	ldrb	r3, [r7, #15]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003144:	b480      	push	{r7}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003152:	e154      	b.n	80033fe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	2101      	movs	r1, #1
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	fa01 f303 	lsl.w	r3, r1, r3
 8003160:	4013      	ands	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 8146 	beq.w	80033f8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	2b01      	cmp	r3, #1
 8003176:	d005      	beq.n	8003184 <HAL_GPIO_Init+0x40>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d130      	bne.n	80031e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	2203      	movs	r2, #3
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4013      	ands	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031ba:	2201      	movs	r2, #1
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	4013      	ands	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	091b      	lsrs	r3, r3, #4
 80031d0:	f003 0201 	and.w	r2, r3, #1
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d017      	beq.n	8003222 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	2203      	movs	r2, #3
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4013      	ands	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d123      	bne.n	8003276 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	08da      	lsrs	r2, r3, #3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3208      	adds	r2, #8
 8003236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800323a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	220f      	movs	r2, #15
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43db      	mvns	r3, r3
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4013      	ands	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	08da      	lsrs	r2, r3, #3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3208      	adds	r2, #8
 8003270:	6939      	ldr	r1, [r7, #16]
 8003272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	2203      	movs	r2, #3
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4013      	ands	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 0203 	and.w	r2, r3, #3
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 80a0 	beq.w	80033f8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b8:	4b58      	ldr	r3, [pc, #352]	; (800341c <HAL_GPIO_Init+0x2d8>)
 80032ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032bc:	4a57      	ldr	r2, [pc, #348]	; (800341c <HAL_GPIO_Init+0x2d8>)
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	6613      	str	r3, [r2, #96]	; 0x60
 80032c4:	4b55      	ldr	r3, [pc, #340]	; (800341c <HAL_GPIO_Init+0x2d8>)
 80032c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	60bb      	str	r3, [r7, #8]
 80032ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032d0:	4a53      	ldr	r2, [pc, #332]	; (8003420 <HAL_GPIO_Init+0x2dc>)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	089b      	lsrs	r3, r3, #2
 80032d6:	3302      	adds	r3, #2
 80032d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f003 0303 	and.w	r3, r3, #3
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	220f      	movs	r2, #15
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032fa:	d019      	beq.n	8003330 <HAL_GPIO_Init+0x1ec>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a49      	ldr	r2, [pc, #292]	; (8003424 <HAL_GPIO_Init+0x2e0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d013      	beq.n	800332c <HAL_GPIO_Init+0x1e8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a48      	ldr	r2, [pc, #288]	; (8003428 <HAL_GPIO_Init+0x2e4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d00d      	beq.n	8003328 <HAL_GPIO_Init+0x1e4>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a47      	ldr	r2, [pc, #284]	; (800342c <HAL_GPIO_Init+0x2e8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d007      	beq.n	8003324 <HAL_GPIO_Init+0x1e0>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a46      	ldr	r2, [pc, #280]	; (8003430 <HAL_GPIO_Init+0x2ec>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d101      	bne.n	8003320 <HAL_GPIO_Init+0x1dc>
 800331c:	2304      	movs	r3, #4
 800331e:	e008      	b.n	8003332 <HAL_GPIO_Init+0x1ee>
 8003320:	2307      	movs	r3, #7
 8003322:	e006      	b.n	8003332 <HAL_GPIO_Init+0x1ee>
 8003324:	2303      	movs	r3, #3
 8003326:	e004      	b.n	8003332 <HAL_GPIO_Init+0x1ee>
 8003328:	2302      	movs	r3, #2
 800332a:	e002      	b.n	8003332 <HAL_GPIO_Init+0x1ee>
 800332c:	2301      	movs	r3, #1
 800332e:	e000      	b.n	8003332 <HAL_GPIO_Init+0x1ee>
 8003330:	2300      	movs	r3, #0
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	f002 0203 	and.w	r2, r2, #3
 8003338:	0092      	lsls	r2, r2, #2
 800333a:	4093      	lsls	r3, r2
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003342:	4937      	ldr	r1, [pc, #220]	; (8003420 <HAL_GPIO_Init+0x2dc>)
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	089b      	lsrs	r3, r3, #2
 8003348:	3302      	adds	r3, #2
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003350:	4b38      	ldr	r3, [pc, #224]	; (8003434 <HAL_GPIO_Init+0x2f0>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	43db      	mvns	r3, r3
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4013      	ands	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003374:	4a2f      	ldr	r2, [pc, #188]	; (8003434 <HAL_GPIO_Init+0x2f0>)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800337a:	4b2e      	ldr	r3, [pc, #184]	; (8003434 <HAL_GPIO_Init+0x2f0>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	43db      	mvns	r3, r3
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4013      	ands	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800339e:	4a25      	ldr	r2, [pc, #148]	; (8003434 <HAL_GPIO_Init+0x2f0>)
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80033a4:	4b23      	ldr	r3, [pc, #140]	; (8003434 <HAL_GPIO_Init+0x2f0>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4013      	ands	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033c8:	4a1a      	ldr	r2, [pc, #104]	; (8003434 <HAL_GPIO_Init+0x2f0>)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033ce:	4b19      	ldr	r3, [pc, #100]	; (8003434 <HAL_GPIO_Init+0x2f0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	43db      	mvns	r3, r3
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4013      	ands	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033f2:	4a10      	ldr	r2, [pc, #64]	; (8003434 <HAL_GPIO_Init+0x2f0>)
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	3301      	adds	r3, #1
 80033fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	fa22 f303 	lsr.w	r3, r2, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	f47f aea3 	bne.w	8003154 <HAL_GPIO_Init+0x10>
  }
}
 800340e:	bf00      	nop
 8003410:	bf00      	nop
 8003412:	371c      	adds	r7, #28
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	40021000 	.word	0x40021000
 8003420:	40010000 	.word	0x40010000
 8003424:	48000400 	.word	0x48000400
 8003428:	48000800 	.word	0x48000800
 800342c:	48000c00 	.word	0x48000c00
 8003430:	48001000 	.word	0x48001000
 8003434:	40010400 	.word	0x40010400

08003438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	807b      	strh	r3, [r7, #2]
 8003444:	4613      	mov	r3, r2
 8003446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003448:	787b      	ldrb	r3, [r7, #1]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800344e:	887a      	ldrh	r2, [r7, #2]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003454:	e002      	b.n	800345c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003456:	887a      	ldrh	r2, [r7, #2]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800346c:	4b04      	ldr	r3, [pc, #16]	; (8003480 <HAL_PWREx_GetVoltageRange+0x18>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003474:	4618      	mov	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40007000 	.word	0x40007000

08003484 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003492:	d130      	bne.n	80034f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003494:	4b23      	ldr	r3, [pc, #140]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800349c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a0:	d038      	beq.n	8003514 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034a2:	4b20      	ldr	r3, [pc, #128]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034aa:	4a1e      	ldr	r2, [pc, #120]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034b2:	4b1d      	ldr	r3, [pc, #116]	; (8003528 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2232      	movs	r2, #50	; 0x32
 80034b8:	fb02 f303 	mul.w	r3, r2, r3
 80034bc:	4a1b      	ldr	r2, [pc, #108]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034be:	fba2 2303 	umull	r2, r3, r2, r3
 80034c2:	0c9b      	lsrs	r3, r3, #18
 80034c4:	3301      	adds	r3, #1
 80034c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034c8:	e002      	b.n	80034d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034d0:	4b14      	ldr	r3, [pc, #80]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034dc:	d102      	bne.n	80034e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1f2      	bne.n	80034ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034e4:	4b0f      	ldr	r3, [pc, #60]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f0:	d110      	bne.n	8003514 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e00f      	b.n	8003516 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034f6:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003502:	d007      	beq.n	8003514 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003504:	4b07      	ldr	r3, [pc, #28]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800350c:	4a05      	ldr	r2, [pc, #20]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003512:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40007000 	.word	0x40007000
 8003528:	20000000 	.word	0x20000000
 800352c:	431bde83 	.word	0x431bde83

08003530 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d102      	bne.n	8003544 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	f000 bc02 	b.w	8003d48 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003544:	4b96      	ldr	r3, [pc, #600]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 030c 	and.w	r3, r3, #12
 800354c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800354e:	4b94      	ldr	r3, [pc, #592]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0310 	and.w	r3, r3, #16
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80e4 	beq.w	800372e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d007      	beq.n	800357c <HAL_RCC_OscConfig+0x4c>
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2b0c      	cmp	r3, #12
 8003570:	f040 808b 	bne.w	800368a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2b01      	cmp	r3, #1
 8003578:	f040 8087 	bne.w	800368a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800357c:	4b88      	ldr	r3, [pc, #544]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <HAL_RCC_OscConfig+0x64>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e3d9      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1a      	ldr	r2, [r3, #32]
 8003598:	4b81      	ldr	r3, [pc, #516]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d004      	beq.n	80035ae <HAL_RCC_OscConfig+0x7e>
 80035a4:	4b7e      	ldr	r3, [pc, #504]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035ac:	e005      	b.n	80035ba <HAL_RCC_OscConfig+0x8a>
 80035ae:	4b7c      	ldr	r3, [pc, #496]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 80035b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d223      	bcs.n	8003606 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 fd8c 	bl	80040e0 <RCC_SetFlashLatencyFromMSIRange>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e3ba      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035d2:	4b73      	ldr	r3, [pc, #460]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a72      	ldr	r2, [pc, #456]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 80035d8:	f043 0308 	orr.w	r3, r3, #8
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	4b70      	ldr	r3, [pc, #448]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	496d      	ldr	r1, [pc, #436]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035f0:	4b6b      	ldr	r3, [pc, #428]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	4968      	ldr	r1, [pc, #416]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 8003600:	4313      	orrs	r3, r2
 8003602:	604b      	str	r3, [r1, #4]
 8003604:	e025      	b.n	8003652 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003606:	4b66      	ldr	r3, [pc, #408]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a65      	ldr	r2, [pc, #404]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 800360c:	f043 0308 	orr.w	r3, r3, #8
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	4b63      	ldr	r3, [pc, #396]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	4960      	ldr	r1, [pc, #384]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 8003620:	4313      	orrs	r3, r2
 8003622:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003624:	4b5e      	ldr	r3, [pc, #376]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	021b      	lsls	r3, r3, #8
 8003632:	495b      	ldr	r1, [pc, #364]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 8003634:	4313      	orrs	r3, r2
 8003636:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d109      	bne.n	8003652 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fd4c 	bl	80040e0 <RCC_SetFlashLatencyFromMSIRange>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e37a      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003652:	f000 fc81 	bl	8003f58 <HAL_RCC_GetSysClockFreq>
 8003656:	4602      	mov	r2, r0
 8003658:	4b51      	ldr	r3, [pc, #324]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	091b      	lsrs	r3, r3, #4
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	4950      	ldr	r1, [pc, #320]	; (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003664:	5ccb      	ldrb	r3, [r1, r3]
 8003666:	f003 031f 	and.w	r3, r3, #31
 800366a:	fa22 f303 	lsr.w	r3, r2, r3
 800366e:	4a4e      	ldr	r2, [pc, #312]	; (80037a8 <HAL_RCC_OscConfig+0x278>)
 8003670:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003672:	4b4e      	ldr	r3, [pc, #312]	; (80037ac <HAL_RCC_OscConfig+0x27c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7fe f8ba 	bl	80017f0 <HAL_InitTick>
 800367c:	4603      	mov	r3, r0
 800367e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d052      	beq.n	800372c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	e35e      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d032      	beq.n	80036f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003692:	4b43      	ldr	r3, [pc, #268]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a42      	ldr	r2, [pc, #264]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800369e:	f7fe f8f7 	bl	8001890 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036a6:	f7fe f8f3 	bl	8001890 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e347      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036b8:	4b39      	ldr	r3, [pc, #228]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0f0      	beq.n	80036a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036c4:	4b36      	ldr	r3, [pc, #216]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a35      	ldr	r2, [pc, #212]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 80036ca:	f043 0308 	orr.w	r3, r3, #8
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	4b33      	ldr	r3, [pc, #204]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	4930      	ldr	r1, [pc, #192]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036e2:	4b2f      	ldr	r3, [pc, #188]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	021b      	lsls	r3, r3, #8
 80036f0:	492b      	ldr	r1, [pc, #172]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	604b      	str	r3, [r1, #4]
 80036f6:	e01a      	b.n	800372e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036f8:	4b29      	ldr	r3, [pc, #164]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a28      	ldr	r2, [pc, #160]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 80036fe:	f023 0301 	bic.w	r3, r3, #1
 8003702:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003704:	f7fe f8c4 	bl	8001890 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800370c:	f7fe f8c0 	bl	8001890 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e314      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800371e:	4b20      	ldr	r3, [pc, #128]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x1dc>
 800372a:	e000      	b.n	800372e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800372c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d073      	beq.n	8003822 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	2b08      	cmp	r3, #8
 800373e:	d005      	beq.n	800374c <HAL_RCC_OscConfig+0x21c>
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2b0c      	cmp	r3, #12
 8003744:	d10e      	bne.n	8003764 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2b03      	cmp	r3, #3
 800374a:	d10b      	bne.n	8003764 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800374c:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d063      	beq.n	8003820 <HAL_RCC_OscConfig+0x2f0>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d15f      	bne.n	8003820 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e2f1      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376c:	d106      	bne.n	800377c <HAL_RCC_OscConfig+0x24c>
 800376e:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a0b      	ldr	r2, [pc, #44]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 8003774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	e025      	b.n	80037c8 <HAL_RCC_OscConfig+0x298>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003784:	d114      	bne.n	80037b0 <HAL_RCC_OscConfig+0x280>
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a05      	ldr	r2, [pc, #20]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 800378c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a02      	ldr	r2, [pc, #8]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 8003798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e013      	b.n	80037c8 <HAL_RCC_OscConfig+0x298>
 80037a0:	40021000 	.word	0x40021000
 80037a4:	0800a840 	.word	0x0800a840
 80037a8:	20000000 	.word	0x20000000
 80037ac:	20000004 	.word	0x20000004
 80037b0:	4ba0      	ldr	r3, [pc, #640]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a9f      	ldr	r2, [pc, #636]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 80037b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	4b9d      	ldr	r3, [pc, #628]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a9c      	ldr	r2, [pc, #624]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 80037c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d013      	beq.n	80037f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d0:	f7fe f85e 	bl	8001890 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d8:	f7fe f85a 	bl	8001890 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	; 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e2ae      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ea:	4b92      	ldr	r3, [pc, #584]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0x2a8>
 80037f6:	e014      	b.n	8003822 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f8:	f7fe f84a 	bl	8001890 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003800:	f7fe f846 	bl	8001890 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b64      	cmp	r3, #100	; 0x64
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e29a      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003812:	4b88      	ldr	r3, [pc, #544]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f0      	bne.n	8003800 <HAL_RCC_OscConfig+0x2d0>
 800381e:	e000      	b.n	8003822 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d060      	beq.n	80038f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	2b04      	cmp	r3, #4
 8003832:	d005      	beq.n	8003840 <HAL_RCC_OscConfig+0x310>
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	2b0c      	cmp	r3, #12
 8003838:	d119      	bne.n	800386e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b02      	cmp	r3, #2
 800383e:	d116      	bne.n	800386e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003840:	4b7c      	ldr	r3, [pc, #496]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_RCC_OscConfig+0x328>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e277      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003858:	4b76      	ldr	r3, [pc, #472]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	061b      	lsls	r3, r3, #24
 8003866:	4973      	ldr	r1, [pc, #460]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 8003868:	4313      	orrs	r3, r2
 800386a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800386c:	e040      	b.n	80038f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d023      	beq.n	80038be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003876:	4b6f      	ldr	r3, [pc, #444]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a6e      	ldr	r2, [pc, #440]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 800387c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003882:	f7fe f805 	bl	8001890 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800388a:	f7fe f801 	bl	8001890 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e255      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800389c:	4b65      	ldr	r3, [pc, #404]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0f0      	beq.n	800388a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a8:	4b62      	ldr	r3, [pc, #392]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	061b      	lsls	r3, r3, #24
 80038b6:	495f      	ldr	r1, [pc, #380]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]
 80038bc:	e018      	b.n	80038f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038be:	4b5d      	ldr	r3, [pc, #372]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a5c      	ldr	r2, [pc, #368]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 80038c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ca:	f7fd ffe1 	bl	8001890 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d2:	f7fd ffdd 	bl	8001890 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e231      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038e4:	4b53      	ldr	r3, [pc, #332]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1f0      	bne.n	80038d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d03c      	beq.n	8003976 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d01c      	beq.n	800393e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003904:	4b4b      	ldr	r3, [pc, #300]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 8003906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800390a:	4a4a      	ldr	r2, [pc, #296]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003914:	f7fd ffbc 	bl	8001890 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800391c:	f7fd ffb8 	bl	8001890 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e20c      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800392e:	4b41      	ldr	r3, [pc, #260]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 8003930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0ef      	beq.n	800391c <HAL_RCC_OscConfig+0x3ec>
 800393c:	e01b      	b.n	8003976 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800393e:	4b3d      	ldr	r3, [pc, #244]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 8003940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003944:	4a3b      	ldr	r2, [pc, #236]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 8003946:	f023 0301 	bic.w	r3, r3, #1
 800394a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394e:	f7fd ff9f 	bl	8001890 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003956:	f7fd ff9b 	bl	8001890 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e1ef      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003968:	4b32      	ldr	r3, [pc, #200]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 800396a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1ef      	bne.n	8003956 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 80a6 	beq.w	8003ad0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003984:	2300      	movs	r3, #0
 8003986:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003988:	4b2a      	ldr	r3, [pc, #168]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 800398a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10d      	bne.n	80039b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003994:	4b27      	ldr	r3, [pc, #156]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 8003996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003998:	4a26      	ldr	r2, [pc, #152]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 800399a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399e:	6593      	str	r3, [r2, #88]	; 0x58
 80039a0:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 80039a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ac:	2301      	movs	r3, #1
 80039ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039b0:	4b21      	ldr	r3, [pc, #132]	; (8003a38 <HAL_RCC_OscConfig+0x508>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d118      	bne.n	80039ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039bc:	4b1e      	ldr	r3, [pc, #120]	; (8003a38 <HAL_RCC_OscConfig+0x508>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a1d      	ldr	r2, [pc, #116]	; (8003a38 <HAL_RCC_OscConfig+0x508>)
 80039c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c8:	f7fd ff62 	bl	8001890 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d0:	f7fd ff5e 	bl	8001890 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e1b2      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039e2:	4b15      	ldr	r3, [pc, #84]	; (8003a38 <HAL_RCC_OscConfig+0x508>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0f0      	beq.n	80039d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d108      	bne.n	8003a08 <HAL_RCC_OscConfig+0x4d8>
 80039f6:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 80039f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fc:	4a0d      	ldr	r2, [pc, #52]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 80039fe:	f043 0301 	orr.w	r3, r3, #1
 8003a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a06:	e029      	b.n	8003a5c <HAL_RCC_OscConfig+0x52c>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b05      	cmp	r3, #5
 8003a0e:	d115      	bne.n	8003a3c <HAL_RCC_OscConfig+0x50c>
 8003a10:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 8003a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a16:	4a07      	ldr	r2, [pc, #28]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 8003a18:	f043 0304 	orr.w	r3, r3, #4
 8003a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a20:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 8003a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a26:	4a03      	ldr	r2, [pc, #12]	; (8003a34 <HAL_RCC_OscConfig+0x504>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a30:	e014      	b.n	8003a5c <HAL_RCC_OscConfig+0x52c>
 8003a32:	bf00      	nop
 8003a34:	40021000 	.word	0x40021000
 8003a38:	40007000 	.word	0x40007000
 8003a3c:	4b9a      	ldr	r3, [pc, #616]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a42:	4a99      	ldr	r2, [pc, #612]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a4c:	4b96      	ldr	r3, [pc, #600]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a52:	4a95      	ldr	r2, [pc, #596]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003a54:	f023 0304 	bic.w	r3, r3, #4
 8003a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d016      	beq.n	8003a92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a64:	f7fd ff14 	bl	8001890 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a6a:	e00a      	b.n	8003a82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6c:	f7fd ff10 	bl	8001890 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e162      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a82:	4b89      	ldr	r3, [pc, #548]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0ed      	beq.n	8003a6c <HAL_RCC_OscConfig+0x53c>
 8003a90:	e015      	b.n	8003abe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a92:	f7fd fefd 	bl	8001890 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9a:	f7fd fef9 	bl	8001890 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e14b      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ab0:	4b7d      	ldr	r3, [pc, #500]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1ed      	bne.n	8003a9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003abe:	7ffb      	ldrb	r3, [r7, #31]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d105      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac4:	4b78      	ldr	r3, [pc, #480]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac8:	4a77      	ldr	r2, [pc, #476]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ace:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d03c      	beq.n	8003b56 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01c      	beq.n	8003b1e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ae4:	4b70      	ldr	r3, [pc, #448]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003ae6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aea:	4a6f      	ldr	r2, [pc, #444]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af4:	f7fd fecc 	bl	8001890 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003afc:	f7fd fec8 	bl	8001890 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e11c      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b0e:	4b66      	ldr	r3, [pc, #408]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003b10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0ef      	beq.n	8003afc <HAL_RCC_OscConfig+0x5cc>
 8003b1c:	e01b      	b.n	8003b56 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b1e:	4b62      	ldr	r3, [pc, #392]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003b20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b24:	4a60      	ldr	r2, [pc, #384]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003b26:	f023 0301 	bic.w	r3, r3, #1
 8003b2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2e:	f7fd feaf 	bl	8001890 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b36:	f7fd feab 	bl	8001890 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e0ff      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b48:	4b57      	ldr	r3, [pc, #348]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003b4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1ef      	bne.n	8003b36 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 80f3 	beq.w	8003d46 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	f040 80c9 	bne.w	8003cfc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b6a:	4b4f      	ldr	r3, [pc, #316]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f003 0203 	and.w	r2, r3, #3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d12c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d123      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d11b      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d113      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bba:	085b      	lsrs	r3, r3, #1
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d109      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	085b      	lsrs	r3, r3, #1
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d06b      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	2b0c      	cmp	r3, #12
 8003bdc:	d062      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bde:	4b32      	ldr	r3, [pc, #200]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e0ac      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003bee:	4b2e      	ldr	r3, [pc, #184]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a2d      	ldr	r2, [pc, #180]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003bf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bf8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bfa:	f7fd fe49 	bl	8001890 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c02:	f7fd fe45 	bl	8001890 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e099      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c14:	4b24      	ldr	r3, [pc, #144]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1f0      	bne.n	8003c02 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c20:	4b21      	ldr	r3, [pc, #132]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	4b21      	ldr	r3, [pc, #132]	; (8003cac <HAL_RCC_OscConfig+0x77c>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c30:	3a01      	subs	r2, #1
 8003c32:	0112      	lsls	r2, r2, #4
 8003c34:	4311      	orrs	r1, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c3a:	0212      	lsls	r2, r2, #8
 8003c3c:	4311      	orrs	r1, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c42:	0852      	lsrs	r2, r2, #1
 8003c44:	3a01      	subs	r2, #1
 8003c46:	0552      	lsls	r2, r2, #21
 8003c48:	4311      	orrs	r1, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c4e:	0852      	lsrs	r2, r2, #1
 8003c50:	3a01      	subs	r2, #1
 8003c52:	0652      	lsls	r2, r2, #25
 8003c54:	4311      	orrs	r1, r2
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c5a:	06d2      	lsls	r2, r2, #27
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	4912      	ldr	r1, [pc, #72]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c64:	4b10      	ldr	r3, [pc, #64]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a0f      	ldr	r2, [pc, #60]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c70:	4b0d      	ldr	r3, [pc, #52]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4a0c      	ldr	r2, [pc, #48]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c7c:	f7fd fe08 	bl	8001890 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c84:	f7fd fe04 	bl	8001890 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e058      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c96:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <HAL_RCC_OscConfig+0x778>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ca2:	e050      	b.n	8003d46 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e04f      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cb0:	4b27      	ldr	r3, [pc, #156]	; (8003d50 <HAL_RCC_OscConfig+0x820>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d144      	bne.n	8003d46 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cbc:	4b24      	ldr	r3, [pc, #144]	; (8003d50 <HAL_RCC_OscConfig+0x820>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a23      	ldr	r2, [pc, #140]	; (8003d50 <HAL_RCC_OscConfig+0x820>)
 8003cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cc8:	4b21      	ldr	r3, [pc, #132]	; (8003d50 <HAL_RCC_OscConfig+0x820>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	4a20      	ldr	r2, [pc, #128]	; (8003d50 <HAL_RCC_OscConfig+0x820>)
 8003cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cd4:	f7fd fddc 	bl	8001890 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7fd fdd8 	bl	8001890 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e02c      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cee:	4b18      	ldr	r3, [pc, #96]	; (8003d50 <HAL_RCC_OscConfig+0x820>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0x7ac>
 8003cfa:	e024      	b.n	8003d46 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	2b0c      	cmp	r3, #12
 8003d00:	d01f      	beq.n	8003d42 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d02:	4b13      	ldr	r3, [pc, #76]	; (8003d50 <HAL_RCC_OscConfig+0x820>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a12      	ldr	r2, [pc, #72]	; (8003d50 <HAL_RCC_OscConfig+0x820>)
 8003d08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0e:	f7fd fdbf 	bl	8001890 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d16:	f7fd fdbb 	bl	8001890 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e00f      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d28:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <HAL_RCC_OscConfig+0x820>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1f0      	bne.n	8003d16 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <HAL_RCC_OscConfig+0x820>)
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	4905      	ldr	r1, [pc, #20]	; (8003d50 <HAL_RCC_OscConfig+0x820>)
 8003d3a:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <HAL_RCC_OscConfig+0x824>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	60cb      	str	r3, [r1, #12]
 8003d40:	e001      	b.n	8003d46 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3720      	adds	r7, #32
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40021000 	.word	0x40021000
 8003d54:	feeefffc 	.word	0xfeeefffc

08003d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0e7      	b.n	8003f3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d6c:	4b75      	ldr	r3, [pc, #468]	; (8003f44 <HAL_RCC_ClockConfig+0x1ec>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d910      	bls.n	8003d9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7a:	4b72      	ldr	r3, [pc, #456]	; (8003f44 <HAL_RCC_ClockConfig+0x1ec>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f023 0207 	bic.w	r2, r3, #7
 8003d82:	4970      	ldr	r1, [pc, #448]	; (8003f44 <HAL_RCC_ClockConfig+0x1ec>)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8a:	4b6e      	ldr	r3, [pc, #440]	; (8003f44 <HAL_RCC_ClockConfig+0x1ec>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e0cf      	b.n	8003f3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d010      	beq.n	8003dca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	4b66      	ldr	r3, [pc, #408]	; (8003f48 <HAL_RCC_ClockConfig+0x1f0>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d908      	bls.n	8003dca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db8:	4b63      	ldr	r3, [pc, #396]	; (8003f48 <HAL_RCC_ClockConfig+0x1f0>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	4960      	ldr	r1, [pc, #384]	; (8003f48 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d04c      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d107      	bne.n	8003dee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dde:	4b5a      	ldr	r3, [pc, #360]	; (8003f48 <HAL_RCC_ClockConfig+0x1f0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d121      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e0a6      	b.n	8003f3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d107      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003df6:	4b54      	ldr	r3, [pc, #336]	; (8003f48 <HAL_RCC_ClockConfig+0x1f0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d115      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e09a      	b.n	8003f3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d107      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e0e:	4b4e      	ldr	r3, [pc, #312]	; (8003f48 <HAL_RCC_ClockConfig+0x1f0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d109      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e08e      	b.n	8003f3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e1e:	4b4a      	ldr	r3, [pc, #296]	; (8003f48 <HAL_RCC_ClockConfig+0x1f0>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e086      	b.n	8003f3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e2e:	4b46      	ldr	r3, [pc, #280]	; (8003f48 <HAL_RCC_ClockConfig+0x1f0>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f023 0203 	bic.w	r2, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	4943      	ldr	r1, [pc, #268]	; (8003f48 <HAL_RCC_ClockConfig+0x1f0>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e40:	f7fd fd26 	bl	8001890 <HAL_GetTick>
 8003e44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e46:	e00a      	b.n	8003e5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e48:	f7fd fd22 	bl	8001890 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e06e      	b.n	8003f3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5e:	4b3a      	ldr	r3, [pc, #232]	; (8003f48 <HAL_RCC_ClockConfig+0x1f0>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 020c 	and.w	r2, r3, #12
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d1eb      	bne.n	8003e48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d010      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	4b31      	ldr	r3, [pc, #196]	; (8003f48 <HAL_RCC_ClockConfig+0x1f0>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d208      	bcs.n	8003e9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e8c:	4b2e      	ldr	r3, [pc, #184]	; (8003f48 <HAL_RCC_ClockConfig+0x1f0>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	492b      	ldr	r1, [pc, #172]	; (8003f48 <HAL_RCC_ClockConfig+0x1f0>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e9e:	4b29      	ldr	r3, [pc, #164]	; (8003f44 <HAL_RCC_ClockConfig+0x1ec>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d210      	bcs.n	8003ece <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eac:	4b25      	ldr	r3, [pc, #148]	; (8003f44 <HAL_RCC_ClockConfig+0x1ec>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f023 0207 	bic.w	r2, r3, #7
 8003eb4:	4923      	ldr	r1, [pc, #140]	; (8003f44 <HAL_RCC_ClockConfig+0x1ec>)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ebc:	4b21      	ldr	r3, [pc, #132]	; (8003f44 <HAL_RCC_ClockConfig+0x1ec>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d001      	beq.n	8003ece <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e036      	b.n	8003f3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d008      	beq.n	8003eec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eda:	4b1b      	ldr	r3, [pc, #108]	; (8003f48 <HAL_RCC_ClockConfig+0x1f0>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	4918      	ldr	r1, [pc, #96]	; (8003f48 <HAL_RCC_ClockConfig+0x1f0>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d009      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ef8:	4b13      	ldr	r3, [pc, #76]	; (8003f48 <HAL_RCC_ClockConfig+0x1f0>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	4910      	ldr	r1, [pc, #64]	; (8003f48 <HAL_RCC_ClockConfig+0x1f0>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f0c:	f000 f824 	bl	8003f58 <HAL_RCC_GetSysClockFreq>
 8003f10:	4602      	mov	r2, r0
 8003f12:	4b0d      	ldr	r3, [pc, #52]	; (8003f48 <HAL_RCC_ClockConfig+0x1f0>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	091b      	lsrs	r3, r3, #4
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	490b      	ldr	r1, [pc, #44]	; (8003f4c <HAL_RCC_ClockConfig+0x1f4>)
 8003f1e:	5ccb      	ldrb	r3, [r1, r3]
 8003f20:	f003 031f 	and.w	r3, r3, #31
 8003f24:	fa22 f303 	lsr.w	r3, r2, r3
 8003f28:	4a09      	ldr	r2, [pc, #36]	; (8003f50 <HAL_RCC_ClockConfig+0x1f8>)
 8003f2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f2c:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <HAL_RCC_ClockConfig+0x1fc>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fd fc5d 	bl	80017f0 <HAL_InitTick>
 8003f36:	4603      	mov	r3, r0
 8003f38:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f3a:	7afb      	ldrb	r3, [r7, #11]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40022000 	.word	0x40022000
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	0800a840 	.word	0x0800a840
 8003f50:	20000000 	.word	0x20000000
 8003f54:	20000004 	.word	0x20000004

08003f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b089      	sub	sp, #36	; 0x24
 8003f5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61fb      	str	r3, [r7, #28]
 8003f62:	2300      	movs	r3, #0
 8003f64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f66:	4b3e      	ldr	r3, [pc, #248]	; (8004060 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f70:	4b3b      	ldr	r3, [pc, #236]	; (8004060 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d005      	beq.n	8003f8c <HAL_RCC_GetSysClockFreq+0x34>
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	2b0c      	cmp	r3, #12
 8003f84:	d121      	bne.n	8003fca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d11e      	bne.n	8003fca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f8c:	4b34      	ldr	r3, [pc, #208]	; (8004060 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d107      	bne.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f98:	4b31      	ldr	r3, [pc, #196]	; (8004060 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f9e:	0a1b      	lsrs	r3, r3, #8
 8003fa0:	f003 030f 	and.w	r3, r3, #15
 8003fa4:	61fb      	str	r3, [r7, #28]
 8003fa6:	e005      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003fa8:	4b2d      	ldr	r3, [pc, #180]	; (8004060 <HAL_RCC_GetSysClockFreq+0x108>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fb4:	4a2b      	ldr	r2, [pc, #172]	; (8004064 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10d      	bne.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fc8:	e00a      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d102      	bne.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fd0:	4b25      	ldr	r3, [pc, #148]	; (8004068 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fd2:	61bb      	str	r3, [r7, #24]
 8003fd4:	e004      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d101      	bne.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fdc:	4b23      	ldr	r3, [pc, #140]	; (800406c <HAL_RCC_GetSysClockFreq+0x114>)
 8003fde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2b0c      	cmp	r3, #12
 8003fe4:	d134      	bne.n	8004050 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fe6:	4b1e      	ldr	r3, [pc, #120]	; (8004060 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d003      	beq.n	8003ffe <HAL_RCC_GetSysClockFreq+0xa6>
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d003      	beq.n	8004004 <HAL_RCC_GetSysClockFreq+0xac>
 8003ffc:	e005      	b.n	800400a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ffe:	4b1a      	ldr	r3, [pc, #104]	; (8004068 <HAL_RCC_GetSysClockFreq+0x110>)
 8004000:	617b      	str	r3, [r7, #20]
      break;
 8004002:	e005      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004004:	4b19      	ldr	r3, [pc, #100]	; (800406c <HAL_RCC_GetSysClockFreq+0x114>)
 8004006:	617b      	str	r3, [r7, #20]
      break;
 8004008:	e002      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	617b      	str	r3, [r7, #20]
      break;
 800400e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004010:	4b13      	ldr	r3, [pc, #76]	; (8004060 <HAL_RCC_GetSysClockFreq+0x108>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	091b      	lsrs	r3, r3, #4
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	3301      	adds	r3, #1
 800401c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800401e:	4b10      	ldr	r3, [pc, #64]	; (8004060 <HAL_RCC_GetSysClockFreq+0x108>)
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	0a1b      	lsrs	r3, r3, #8
 8004024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	fb03 f202 	mul.w	r2, r3, r2
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	fbb2 f3f3 	udiv	r3, r2, r3
 8004034:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004036:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <HAL_RCC_GetSysClockFreq+0x108>)
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	0e5b      	lsrs	r3, r3, #25
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	3301      	adds	r3, #1
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	fbb2 f3f3 	udiv	r3, r2, r3
 800404e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004050:	69bb      	ldr	r3, [r7, #24]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3724      	adds	r7, #36	; 0x24
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40021000 	.word	0x40021000
 8004064:	0800a858 	.word	0x0800a858
 8004068:	00f42400 	.word	0x00f42400
 800406c:	007a1200 	.word	0x007a1200

08004070 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004074:	4b03      	ldr	r3, [pc, #12]	; (8004084 <HAL_RCC_GetHCLKFreq+0x14>)
 8004076:	681b      	ldr	r3, [r3, #0]
}
 8004078:	4618      	mov	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	20000000 	.word	0x20000000

08004088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800408c:	f7ff fff0 	bl	8004070 <HAL_RCC_GetHCLKFreq>
 8004090:	4602      	mov	r2, r0
 8004092:	4b06      	ldr	r3, [pc, #24]	; (80040ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	0a1b      	lsrs	r3, r3, #8
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	4904      	ldr	r1, [pc, #16]	; (80040b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800409e:	5ccb      	ldrb	r3, [r1, r3]
 80040a0:	f003 031f 	and.w	r3, r3, #31
 80040a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40021000 	.word	0x40021000
 80040b0:	0800a850 	.word	0x0800a850

080040b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040b8:	f7ff ffda 	bl	8004070 <HAL_RCC_GetHCLKFreq>
 80040bc:	4602      	mov	r2, r0
 80040be:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	0adb      	lsrs	r3, r3, #11
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	4904      	ldr	r1, [pc, #16]	; (80040dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80040ca:	5ccb      	ldrb	r3, [r1, r3]
 80040cc:	f003 031f 	and.w	r3, r3, #31
 80040d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40021000 	.word	0x40021000
 80040dc:	0800a850 	.word	0x0800a850

080040e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040e8:	2300      	movs	r3, #0
 80040ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040ec:	4b2a      	ldr	r3, [pc, #168]	; (8004198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040f8:	f7ff f9b6 	bl	8003468 <HAL_PWREx_GetVoltageRange>
 80040fc:	6178      	str	r0, [r7, #20]
 80040fe:	e014      	b.n	800412a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004100:	4b25      	ldr	r3, [pc, #148]	; (8004198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004104:	4a24      	ldr	r2, [pc, #144]	; (8004198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800410a:	6593      	str	r3, [r2, #88]	; 0x58
 800410c:	4b22      	ldr	r3, [pc, #136]	; (8004198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800410e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004118:	f7ff f9a6 	bl	8003468 <HAL_PWREx_GetVoltageRange>
 800411c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800411e:	4b1e      	ldr	r3, [pc, #120]	; (8004198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004122:	4a1d      	ldr	r2, [pc, #116]	; (8004198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004128:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004130:	d10b      	bne.n	800414a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b80      	cmp	r3, #128	; 0x80
 8004136:	d919      	bls.n	800416c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2ba0      	cmp	r3, #160	; 0xa0
 800413c:	d902      	bls.n	8004144 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800413e:	2302      	movs	r3, #2
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	e013      	b.n	800416c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004144:	2301      	movs	r3, #1
 8004146:	613b      	str	r3, [r7, #16]
 8004148:	e010      	b.n	800416c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b80      	cmp	r3, #128	; 0x80
 800414e:	d902      	bls.n	8004156 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004150:	2303      	movs	r3, #3
 8004152:	613b      	str	r3, [r7, #16]
 8004154:	e00a      	b.n	800416c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b80      	cmp	r3, #128	; 0x80
 800415a:	d102      	bne.n	8004162 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800415c:	2302      	movs	r3, #2
 800415e:	613b      	str	r3, [r7, #16]
 8004160:	e004      	b.n	800416c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b70      	cmp	r3, #112	; 0x70
 8004166:	d101      	bne.n	800416c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004168:	2301      	movs	r3, #1
 800416a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800416c:	4b0b      	ldr	r3, [pc, #44]	; (800419c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f023 0207 	bic.w	r2, r3, #7
 8004174:	4909      	ldr	r1, [pc, #36]	; (800419c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800417c:	4b07      	ldr	r3, [pc, #28]	; (800419c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	429a      	cmp	r2, r3
 8004188:	d001      	beq.n	800418e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e000      	b.n	8004190 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40021000 	.word	0x40021000
 800419c:	40022000 	.word	0x40022000

080041a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041a8:	2300      	movs	r3, #0
 80041aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041ac:	2300      	movs	r3, #0
 80041ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d031      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041c4:	d01a      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80041c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041ca:	d814      	bhi.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d009      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80041d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041d4:	d10f      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80041d6:	4b5d      	ldr	r3, [pc, #372]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	4a5c      	ldr	r2, [pc, #368]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041e2:	e00c      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3304      	adds	r3, #4
 80041e8:	2100      	movs	r1, #0
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fa22 	bl	8004634 <RCCEx_PLLSAI1_Config>
 80041f0:	4603      	mov	r3, r0
 80041f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041f4:	e003      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	74fb      	strb	r3, [r7, #19]
      break;
 80041fa:	e000      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80041fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041fe:	7cfb      	ldrb	r3, [r7, #19]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10b      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004204:	4b51      	ldr	r3, [pc, #324]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004212:	494e      	ldr	r1, [pc, #312]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800421a:	e001      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421c:	7cfb      	ldrb	r3, [r7, #19]
 800421e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 809e 	beq.w	800436a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800422e:	2300      	movs	r3, #0
 8004230:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004232:	4b46      	ldr	r3, [pc, #280]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004242:	2300      	movs	r3, #0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00d      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004248:	4b40      	ldr	r3, [pc, #256]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800424a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424c:	4a3f      	ldr	r2, [pc, #252]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800424e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004252:	6593      	str	r3, [r2, #88]	; 0x58
 8004254:	4b3d      	ldr	r3, [pc, #244]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004260:	2301      	movs	r3, #1
 8004262:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004264:	4b3a      	ldr	r3, [pc, #232]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a39      	ldr	r2, [pc, #228]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800426a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004270:	f7fd fb0e 	bl	8001890 <HAL_GetTick>
 8004274:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004276:	e009      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004278:	f7fd fb0a 	bl	8001890 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d902      	bls.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	74fb      	strb	r3, [r7, #19]
        break;
 800428a:	e005      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800428c:	4b30      	ldr	r3, [pc, #192]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0ef      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004298:	7cfb      	ldrb	r3, [r7, #19]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d15a      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800429e:	4b2b      	ldr	r3, [pc, #172]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d01e      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d019      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042ba:	4b24      	ldr	r3, [pc, #144]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042c6:	4b21      	ldr	r3, [pc, #132]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042cc:	4a1f      	ldr	r2, [pc, #124]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042d6:	4b1d      	ldr	r3, [pc, #116]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042dc:	4a1b      	ldr	r2, [pc, #108]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042e6:	4a19      	ldr	r2, [pc, #100]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d016      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f8:	f7fd faca 	bl	8001890 <HAL_GetTick>
 80042fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042fe:	e00b      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004300:	f7fd fac6 	bl	8001890 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	f241 3288 	movw	r2, #5000	; 0x1388
 800430e:	4293      	cmp	r3, r2
 8004310:	d902      	bls.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	74fb      	strb	r3, [r7, #19]
            break;
 8004316:	e006      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004318:	4b0c      	ldr	r3, [pc, #48]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0ec      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004326:	7cfb      	ldrb	r3, [r7, #19]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10b      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800432c:	4b07      	ldr	r3, [pc, #28]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800432e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004332:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433a:	4904      	ldr	r1, [pc, #16]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004342:	e009      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004344:	7cfb      	ldrb	r3, [r7, #19]
 8004346:	74bb      	strb	r3, [r7, #18]
 8004348:	e006      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800434a:	bf00      	nop
 800434c:	40021000 	.word	0x40021000
 8004350:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004354:	7cfb      	ldrb	r3, [r7, #19]
 8004356:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004358:	7c7b      	ldrb	r3, [r7, #17]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d105      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800435e:	4b8d      	ldr	r3, [pc, #564]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004362:	4a8c      	ldr	r2, [pc, #560]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004368:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004376:	4b87      	ldr	r3, [pc, #540]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f023 0203 	bic.w	r2, r3, #3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	4983      	ldr	r1, [pc, #524]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004398:	4b7e      	ldr	r3, [pc, #504]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439e:	f023 020c 	bic.w	r2, r3, #12
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	497b      	ldr	r1, [pc, #492]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043ba:	4b76      	ldr	r3, [pc, #472]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c8:	4972      	ldr	r1, [pc, #456]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043dc:	4b6d      	ldr	r3, [pc, #436]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	496a      	ldr	r1, [pc, #424]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043fe:	4b65      	ldr	r3, [pc, #404]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004404:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440c:	4961      	ldr	r1, [pc, #388]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004420:	4b5c      	ldr	r3, [pc, #368]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	4959      	ldr	r1, [pc, #356]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004442:	4b54      	ldr	r3, [pc, #336]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004448:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	4950      	ldr	r1, [pc, #320]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004464:	4b4b      	ldr	r3, [pc, #300]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004472:	4948      	ldr	r1, [pc, #288]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004486:	4b43      	ldr	r3, [pc, #268]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004494:	493f      	ldr	r1, [pc, #252]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d028      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044a8:	4b3a      	ldr	r3, [pc, #232]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b6:	4937      	ldr	r1, [pc, #220]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044c6:	d106      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044c8:	4b32      	ldr	r3, [pc, #200]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	4a31      	ldr	r2, [pc, #196]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044d2:	60d3      	str	r3, [r2, #12]
 80044d4:	e011      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044de:	d10c      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3304      	adds	r3, #4
 80044e4:	2101      	movs	r1, #1
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 f8a4 	bl	8004634 <RCCEx_PLLSAI1_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044f0:	7cfb      	ldrb	r3, [r7, #19]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80044f6:	7cfb      	ldrb	r3, [r7, #19]
 80044f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d028      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004506:	4b23      	ldr	r3, [pc, #140]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004514:	491f      	ldr	r1, [pc, #124]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004520:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004524:	d106      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004526:	4b1b      	ldr	r3, [pc, #108]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	4a1a      	ldr	r2, [pc, #104]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800452c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004530:	60d3      	str	r3, [r2, #12]
 8004532:	e011      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004538:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800453c:	d10c      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3304      	adds	r3, #4
 8004542:	2101      	movs	r1, #1
 8004544:	4618      	mov	r0, r3
 8004546:	f000 f875 	bl	8004634 <RCCEx_PLLSAI1_Config>
 800454a:	4603      	mov	r3, r0
 800454c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800454e:	7cfb      	ldrb	r3, [r7, #19]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004554:	7cfb      	ldrb	r3, [r7, #19]
 8004556:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d02b      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004564:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004572:	4908      	ldr	r1, [pc, #32]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800457e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004582:	d109      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004584:	4b03      	ldr	r3, [pc, #12]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	4a02      	ldr	r2, [pc, #8]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800458a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800458e:	60d3      	str	r3, [r2, #12]
 8004590:	e014      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800459c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045a0:	d10c      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	3304      	adds	r3, #4
 80045a6:	2101      	movs	r1, #1
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 f843 	bl	8004634 <RCCEx_PLLSAI1_Config>
 80045ae:	4603      	mov	r3, r0
 80045b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045b2:	7cfb      	ldrb	r3, [r7, #19]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80045b8:	7cfb      	ldrb	r3, [r7, #19]
 80045ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d01c      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045c8:	4b19      	ldr	r3, [pc, #100]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d6:	4916      	ldr	r1, [pc, #88]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045e6:	d10c      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3304      	adds	r3, #4
 80045ec:	2102      	movs	r1, #2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 f820 	bl	8004634 <RCCEx_PLLSAI1_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045f8:	7cfb      	ldrb	r3, [r7, #19]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80045fe:	7cfb      	ldrb	r3, [r7, #19]
 8004600:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800460e:	4b08      	ldr	r3, [pc, #32]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004614:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461c:	4904      	ldr	r1, [pc, #16]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004624:	7cbb      	ldrb	r3, [r7, #18]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	40021000 	.word	0x40021000

08004634 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004642:	4b74      	ldr	r3, [pc, #464]	; (8004814 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d018      	beq.n	8004680 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800464e:	4b71      	ldr	r3, [pc, #452]	; (8004814 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f003 0203 	and.w	r2, r3, #3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d10d      	bne.n	800467a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
       ||
 8004662:	2b00      	cmp	r3, #0
 8004664:	d009      	beq.n	800467a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004666:	4b6b      	ldr	r3, [pc, #428]	; (8004814 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	091b      	lsrs	r3, r3, #4
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
       ||
 8004676:	429a      	cmp	r2, r3
 8004678:	d047      	beq.n	800470a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	73fb      	strb	r3, [r7, #15]
 800467e:	e044      	b.n	800470a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b03      	cmp	r3, #3
 8004686:	d018      	beq.n	80046ba <RCCEx_PLLSAI1_Config+0x86>
 8004688:	2b03      	cmp	r3, #3
 800468a:	d825      	bhi.n	80046d8 <RCCEx_PLLSAI1_Config+0xa4>
 800468c:	2b01      	cmp	r3, #1
 800468e:	d002      	beq.n	8004696 <RCCEx_PLLSAI1_Config+0x62>
 8004690:	2b02      	cmp	r3, #2
 8004692:	d009      	beq.n	80046a8 <RCCEx_PLLSAI1_Config+0x74>
 8004694:	e020      	b.n	80046d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004696:	4b5f      	ldr	r3, [pc, #380]	; (8004814 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d11d      	bne.n	80046de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046a6:	e01a      	b.n	80046de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046a8:	4b5a      	ldr	r3, [pc, #360]	; (8004814 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d116      	bne.n	80046e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046b8:	e013      	b.n	80046e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046ba:	4b56      	ldr	r3, [pc, #344]	; (8004814 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10f      	bne.n	80046e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046c6:	4b53      	ldr	r3, [pc, #332]	; (8004814 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046d6:	e006      	b.n	80046e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	73fb      	strb	r3, [r7, #15]
      break;
 80046dc:	e004      	b.n	80046e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046de:	bf00      	nop
 80046e0:	e002      	b.n	80046e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046e2:	bf00      	nop
 80046e4:	e000      	b.n	80046e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10d      	bne.n	800470a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046ee:	4b49      	ldr	r3, [pc, #292]	; (8004814 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6819      	ldr	r1, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	3b01      	subs	r3, #1
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	430b      	orrs	r3, r1
 8004704:	4943      	ldr	r1, [pc, #268]	; (8004814 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004706:	4313      	orrs	r3, r2
 8004708:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800470a:	7bfb      	ldrb	r3, [r7, #15]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d17c      	bne.n	800480a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004710:	4b40      	ldr	r3, [pc, #256]	; (8004814 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a3f      	ldr	r2, [pc, #252]	; (8004814 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004716:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800471a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800471c:	f7fd f8b8 	bl	8001890 <HAL_GetTick>
 8004720:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004722:	e009      	b.n	8004738 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004724:	f7fd f8b4 	bl	8001890 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d902      	bls.n	8004738 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	73fb      	strb	r3, [r7, #15]
        break;
 8004736:	e005      	b.n	8004744 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004738:	4b36      	ldr	r3, [pc, #216]	; (8004814 <RCCEx_PLLSAI1_Config+0x1e0>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1ef      	bne.n	8004724 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d15f      	bne.n	800480a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d110      	bne.n	8004772 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004750:	4b30      	ldr	r3, [pc, #192]	; (8004814 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004758:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6892      	ldr	r2, [r2, #8]
 8004760:	0211      	lsls	r1, r2, #8
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	68d2      	ldr	r2, [r2, #12]
 8004766:	06d2      	lsls	r2, r2, #27
 8004768:	430a      	orrs	r2, r1
 800476a:	492a      	ldr	r1, [pc, #168]	; (8004814 <RCCEx_PLLSAI1_Config+0x1e0>)
 800476c:	4313      	orrs	r3, r2
 800476e:	610b      	str	r3, [r1, #16]
 8004770:	e027      	b.n	80047c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d112      	bne.n	800479e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004778:	4b26      	ldr	r3, [pc, #152]	; (8004814 <RCCEx_PLLSAI1_Config+0x1e0>)
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004780:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6892      	ldr	r2, [r2, #8]
 8004788:	0211      	lsls	r1, r2, #8
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6912      	ldr	r2, [r2, #16]
 800478e:	0852      	lsrs	r2, r2, #1
 8004790:	3a01      	subs	r2, #1
 8004792:	0552      	lsls	r2, r2, #21
 8004794:	430a      	orrs	r2, r1
 8004796:	491f      	ldr	r1, [pc, #124]	; (8004814 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004798:	4313      	orrs	r3, r2
 800479a:	610b      	str	r3, [r1, #16]
 800479c:	e011      	b.n	80047c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800479e:	4b1d      	ldr	r3, [pc, #116]	; (8004814 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6892      	ldr	r2, [r2, #8]
 80047ae:	0211      	lsls	r1, r2, #8
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6952      	ldr	r2, [r2, #20]
 80047b4:	0852      	lsrs	r2, r2, #1
 80047b6:	3a01      	subs	r2, #1
 80047b8:	0652      	lsls	r2, r2, #25
 80047ba:	430a      	orrs	r2, r1
 80047bc:	4915      	ldr	r1, [pc, #84]	; (8004814 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047c2:	4b14      	ldr	r3, [pc, #80]	; (8004814 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a13      	ldr	r2, [pc, #76]	; (8004814 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ce:	f7fd f85f 	bl	8001890 <HAL_GetTick>
 80047d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047d4:	e009      	b.n	80047ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047d6:	f7fd f85b 	bl	8001890 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d902      	bls.n	80047ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	73fb      	strb	r3, [r7, #15]
          break;
 80047e8:	e005      	b.n	80047f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047ea:	4b0a      	ldr	r3, [pc, #40]	; (8004814 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0ef      	beq.n	80047d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d106      	bne.n	800480a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047fc:	4b05      	ldr	r3, [pc, #20]	; (8004814 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047fe:	691a      	ldr	r2, [r3, #16]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	4903      	ldr	r1, [pc, #12]	; (8004814 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004806:	4313      	orrs	r3, r2
 8004808:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800480a:	7bfb      	ldrb	r3, [r7, #15]
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	40021000 	.word	0x40021000

08004818 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e040      	b.n	80048ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d106      	bne.n	8004840 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7fc fe28 	bl	8001490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2224      	movs	r2, #36	; 0x24
 8004844:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0201 	bic.w	r2, r2, #1
 8004854:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 ff36 	bl	80056d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 fcd9 	bl	800521c <UART_SetConfig>
 800486a:	4603      	mov	r3, r0
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e01b      	b.n	80048ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004882:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004892:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0201 	orr.w	r2, r2, #1
 80048a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 ffb5 	bl	8005814 <UART_CheckIdleState>
 80048aa:	4603      	mov	r3, r0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08a      	sub	sp, #40	; 0x28
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	603b      	str	r3, [r7, #0]
 80048c0:	4613      	mov	r3, r2
 80048c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d178      	bne.n	80049be <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_UART_Transmit+0x24>
 80048d2:	88fb      	ldrh	r3, [r7, #6]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e071      	b.n	80049c0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2221      	movs	r2, #33	; 0x21
 80048e8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048ea:	f7fc ffd1 	bl	8001890 <HAL_GetTick>
 80048ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	88fa      	ldrh	r2, [r7, #6]
 80048f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	88fa      	ldrh	r2, [r7, #6]
 80048fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004908:	d108      	bne.n	800491c <HAL_UART_Transmit+0x68>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d104      	bne.n	800491c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004912:	2300      	movs	r3, #0
 8004914:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	61bb      	str	r3, [r7, #24]
 800491a:	e003      	b.n	8004924 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004920:	2300      	movs	r3, #0
 8004922:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004924:	e030      	b.n	8004988 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2200      	movs	r2, #0
 800492e:	2180      	movs	r1, #128	; 0x80
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f001 f817 	bl	8005964 <UART_WaitOnFlagUntilTimeout>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d004      	beq.n	8004946 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2220      	movs	r2, #32
 8004940:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e03c      	b.n	80049c0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10b      	bne.n	8004964 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	881a      	ldrh	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004958:	b292      	uxth	r2, r2
 800495a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	3302      	adds	r3, #2
 8004960:	61bb      	str	r3, [r7, #24]
 8004962:	e008      	b.n	8004976 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	781a      	ldrb	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	b292      	uxth	r2, r2
 800496e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	3301      	adds	r3, #1
 8004974:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800498e:	b29b      	uxth	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1c8      	bne.n	8004926 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	2200      	movs	r2, #0
 800499c:	2140      	movs	r1, #64	; 0x40
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 ffe0 	bl	8005964 <UART_WaitOnFlagUntilTimeout>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d004      	beq.n	80049b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2220      	movs	r2, #32
 80049ae:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e005      	b.n	80049c0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2220      	movs	r2, #32
 80049b8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	e000      	b.n	80049c0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80049be:	2302      	movs	r3, #2
  }
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3720      	adds	r7, #32
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08a      	sub	sp, #40	; 0x28
 80049cc:	af02      	add	r7, sp, #8
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	603b      	str	r3, [r7, #0]
 80049d4:	4613      	mov	r3, r2
 80049d6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049de:	2b20      	cmp	r3, #32
 80049e0:	f040 80b6 	bne.w	8004b50 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <HAL_UART_Receive+0x28>
 80049ea:	88fb      	ldrh	r3, [r7, #6]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e0ae      	b.n	8004b52 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2222      	movs	r2, #34	; 0x22
 8004a00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a0a:	f7fc ff41 	bl	8001890 <HAL_GetTick>
 8004a0e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	88fa      	ldrh	r2, [r7, #6]
 8004a14:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	88fa      	ldrh	r2, [r7, #6]
 8004a1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a28:	d10e      	bne.n	8004a48 <HAL_UART_Receive+0x80>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d105      	bne.n	8004a3e <HAL_UART_Receive+0x76>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004a38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a3c:	e02d      	b.n	8004a9a <HAL_UART_Receive+0xd2>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	22ff      	movs	r2, #255	; 0xff
 8004a42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a46:	e028      	b.n	8004a9a <HAL_UART_Receive+0xd2>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10d      	bne.n	8004a6c <HAL_UART_Receive+0xa4>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d104      	bne.n	8004a62 <HAL_UART_Receive+0x9a>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	22ff      	movs	r2, #255	; 0xff
 8004a5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a60:	e01b      	b.n	8004a9a <HAL_UART_Receive+0xd2>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	227f      	movs	r2, #127	; 0x7f
 8004a66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a6a:	e016      	b.n	8004a9a <HAL_UART_Receive+0xd2>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a74:	d10d      	bne.n	8004a92 <HAL_UART_Receive+0xca>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d104      	bne.n	8004a88 <HAL_UART_Receive+0xc0>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	227f      	movs	r2, #127	; 0x7f
 8004a82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a86:	e008      	b.n	8004a9a <HAL_UART_Receive+0xd2>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	223f      	movs	r2, #63	; 0x3f
 8004a8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a90:	e003      	b.n	8004a9a <HAL_UART_Receive+0xd2>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004aa0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aaa:	d108      	bne.n	8004abe <HAL_UART_Receive+0xf6>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d104      	bne.n	8004abe <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	61bb      	str	r3, [r7, #24]
 8004abc:	e003      	b.n	8004ac6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004ac6:	e037      	b.n	8004b38 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	2120      	movs	r1, #32
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 ff46 	bl	8005964 <UART_WaitOnFlagUntilTimeout>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d005      	beq.n	8004aea <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e033      	b.n	8004b52 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10c      	bne.n	8004b0a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	8a7b      	ldrh	r3, [r7, #18]
 8004afa:	4013      	ands	r3, r2
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	3302      	adds	r3, #2
 8004b06:	61bb      	str	r3, [r7, #24]
 8004b08:	e00d      	b.n	8004b26 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	8a7b      	ldrh	r3, [r7, #18]
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	4013      	ands	r3, r2
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	3301      	adds	r3, #1
 8004b24:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1c1      	bne.n	8004ac8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	e000      	b.n	8004b52 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004b50:	2302      	movs	r3, #2
  }
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3720      	adds	r7, #32
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
	...

08004b5c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b08a      	sub	sp, #40	; 0x28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	4613      	mov	r3, r2
 8004b68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b70:	2b20      	cmp	r3, #32
 8004b72:	d137      	bne.n	8004be4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <HAL_UART_Receive_IT+0x24>
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e030      	b.n	8004be6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a18      	ldr	r2, [pc, #96]	; (8004bf0 <HAL_UART_Receive_IT+0x94>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d01f      	beq.n	8004bd4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d018      	beq.n	8004bd4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	e853 3f00 	ldrex	r3, [r3]
 8004bae:	613b      	str	r3, [r7, #16]
   return(result);
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	623b      	str	r3, [r7, #32]
 8004bc2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc4:	69f9      	ldr	r1, [r7, #28]
 8004bc6:	6a3a      	ldr	r2, [r7, #32]
 8004bc8:	e841 2300 	strex	r3, r2, [r1]
 8004bcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1e6      	bne.n	8004ba2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004bd4:	88fb      	ldrh	r3, [r7, #6]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 ff2a 	bl	8005a34 <UART_Start_Receive_IT>
 8004be0:	4603      	mov	r3, r0
 8004be2:	e000      	b.n	8004be6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004be4:	2302      	movs	r3, #2
  }
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3728      	adds	r7, #40	; 0x28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40008000 	.word	0x40008000

08004bf4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b0ba      	sub	sp, #232	; 0xe8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004c1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004c22:	4013      	ands	r3, r2
 8004c24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004c28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d115      	bne.n	8004c5c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c34:	f003 0320 	and.w	r3, r3, #32
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00f      	beq.n	8004c5c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c40:	f003 0320 	and.w	r3, r3, #32
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d009      	beq.n	8004c5c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 82ae 	beq.w	80051ae <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	4798      	blx	r3
      }
      return;
 8004c5a:	e2a8      	b.n	80051ae <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004c5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 8117 	beq.w	8004e94 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d106      	bne.n	8004c80 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004c72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004c76:	4b85      	ldr	r3, [pc, #532]	; (8004e8c <HAL_UART_IRQHandler+0x298>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 810a 	beq.w	8004e94 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d011      	beq.n	8004cb0 <HAL_UART_IRQHandler+0xbc>
 8004c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00b      	beq.n	8004cb0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ca6:	f043 0201 	orr.w	r2, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d011      	beq.n	8004ce0 <HAL_UART_IRQHandler+0xec>
 8004cbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00b      	beq.n	8004ce0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2202      	movs	r2, #2
 8004cce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd6:	f043 0204 	orr.w	r2, r3, #4
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d011      	beq.n	8004d10 <HAL_UART_IRQHandler+0x11c>
 8004cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00b      	beq.n	8004d10 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2204      	movs	r2, #4
 8004cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d06:	f043 0202 	orr.w	r2, r3, #2
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d017      	beq.n	8004d4c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d20:	f003 0320 	and.w	r3, r3, #32
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d105      	bne.n	8004d34 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004d28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d2c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00b      	beq.n	8004d4c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2208      	movs	r2, #8
 8004d3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d42:	f043 0208 	orr.w	r2, r3, #8
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d012      	beq.n	8004d7e <HAL_UART_IRQHandler+0x18a>
 8004d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00c      	beq.n	8004d7e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d74:	f043 0220 	orr.w	r2, r3, #32
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 8214 	beq.w	80051b2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00d      	beq.n	8004db2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d007      	beq.n	8004db2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc6:	2b40      	cmp	r3, #64	; 0x40
 8004dc8:	d005      	beq.n	8004dd6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004dca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004dce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d04f      	beq.n	8004e76 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fef2 	bl	8005bc0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de6:	2b40      	cmp	r3, #64	; 0x40
 8004de8:	d141      	bne.n	8004e6e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3308      	adds	r3, #8
 8004df0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004df8:	e853 3f00 	ldrex	r3, [r3]
 8004dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3308      	adds	r3, #8
 8004e12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1d9      	bne.n	8004dea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d013      	beq.n	8004e66 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e42:	4a13      	ldr	r2, [pc, #76]	; (8004e90 <HAL_UART_IRQHandler+0x29c>)
 8004e44:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fe f939 	bl	80030c2 <HAL_DMA_Abort_IT>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d017      	beq.n	8004e86 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e60:	4610      	mov	r0, r2
 8004e62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e64:	e00f      	b.n	8004e86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f9c2 	bl	80051f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e6c:	e00b      	b.n	8004e86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f9be 	bl	80051f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e74:	e007      	b.n	8004e86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f9ba 	bl	80051f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004e84:	e195      	b.n	80051b2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e86:	bf00      	nop
    return;
 8004e88:	e193      	b.n	80051b2 <HAL_UART_IRQHandler+0x5be>
 8004e8a:	bf00      	nop
 8004e8c:	04000120 	.word	0x04000120
 8004e90:	08005c89 	.word	0x08005c89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	f040 814e 	bne.w	800513a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea2:	f003 0310 	and.w	r3, r3, #16
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 8147 	beq.w	800513a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eb0:	f003 0310 	and.w	r3, r3, #16
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 8140 	beq.w	800513a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2210      	movs	r2, #16
 8004ec0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ecc:	2b40      	cmp	r3, #64	; 0x40
 8004ece:	f040 80b8 	bne.w	8005042 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ede:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 8167 	beq.w	80051b6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004eee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	f080 815f 	bcs.w	80051b6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004efe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f040 8086 	bne.w	8005020 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f20:	e853 3f00 	ldrex	r3, [r3]
 8004f24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f42:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f4e:	e841 2300 	strex	r3, r2, [r1]
 8004f52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1da      	bne.n	8004f14 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3308      	adds	r3, #8
 8004f64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f70:	f023 0301 	bic.w	r3, r3, #1
 8004f74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f8e:	e841 2300 	strex	r3, r2, [r1]
 8004f92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1e1      	bne.n	8004f5e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3308      	adds	r3, #8
 8004fa0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fa4:	e853 3f00 	ldrex	r3, [r3]
 8004fa8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3308      	adds	r3, #8
 8004fba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004fbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004fc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004fc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004fc6:	e841 2300 	strex	r3, r2, [r1]
 8004fca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004fcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1e3      	bne.n	8004f9a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fe8:	e853 3f00 	ldrex	r3, [r3]
 8004fec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ff0:	f023 0310 	bic.w	r3, r3, #16
 8004ff4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005002:	65bb      	str	r3, [r7, #88]	; 0x58
 8005004:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005008:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e4      	bne.n	8004fe0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800501a:	4618      	mov	r0, r3
 800501c:	f7fe f813 	bl	8003046 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005032:	b29b      	uxth	r3, r3
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	b29b      	uxth	r3, r3
 8005038:	4619      	mov	r1, r3
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f8e2 	bl	8005204 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005040:	e0b9      	b.n	80051b6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800504e:	b29b      	uxth	r3, r3
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 80ab 	beq.w	80051ba <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005064:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 80a6 	beq.w	80051ba <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005076:	e853 3f00 	ldrex	r3, [r3]
 800507a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800507c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005082:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005090:	647b      	str	r3, [r7, #68]	; 0x44
 8005092:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005096:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800509e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e4      	bne.n	800506e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3308      	adds	r3, #8
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	e853 3f00 	ldrex	r3, [r3]
 80050b2:	623b      	str	r3, [r7, #32]
   return(result);
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	f023 0301 	bic.w	r3, r3, #1
 80050ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3308      	adds	r3, #8
 80050c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80050c8:	633a      	str	r2, [r7, #48]	; 0x30
 80050ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d0:	e841 2300 	strex	r3, r2, [r1]
 80050d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1e3      	bne.n	80050a4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	e853 3f00 	ldrex	r3, [r3]
 80050fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f023 0310 	bic.w	r3, r3, #16
 8005104:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	461a      	mov	r2, r3
 800510e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005112:	61fb      	str	r3, [r7, #28]
 8005114:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005116:	69b9      	ldr	r1, [r7, #24]
 8005118:	69fa      	ldr	r2, [r7, #28]
 800511a:	e841 2300 	strex	r3, r2, [r1]
 800511e:	617b      	str	r3, [r7, #20]
   return(result);
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1e4      	bne.n	80050f0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2202      	movs	r2, #2
 800512a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800512c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005130:	4619      	mov	r1, r3
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f866 	bl	8005204 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005138:	e03f      	b.n	80051ba <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800513a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800513e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00e      	beq.n	8005164 <HAL_UART_IRQHandler+0x570>
 8005146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800514a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d008      	beq.n	8005164 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800515a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 ff8f 	bl	8006080 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005162:	e02d      	b.n	80051c0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00e      	beq.n	800518e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005178:	2b00      	cmp	r3, #0
 800517a:	d008      	beq.n	800518e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005180:	2b00      	cmp	r3, #0
 8005182:	d01c      	beq.n	80051be <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	4798      	blx	r3
    }
    return;
 800518c:	e017      	b.n	80051be <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800518e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	d012      	beq.n	80051c0 <HAL_UART_IRQHandler+0x5cc>
 800519a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800519e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00c      	beq.n	80051c0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fd84 	bl	8005cb4 <UART_EndTransmit_IT>
    return;
 80051ac:	e008      	b.n	80051c0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80051ae:	bf00      	nop
 80051b0:	e006      	b.n	80051c0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80051b2:	bf00      	nop
 80051b4:	e004      	b.n	80051c0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80051b6:	bf00      	nop
 80051b8:	e002      	b.n	80051c0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80051ba:	bf00      	nop
 80051bc:	e000      	b.n	80051c0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80051be:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80051c0:	37e8      	adds	r7, #232	; 0xe8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop

080051c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800521c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005220:	b08a      	sub	sp, #40	; 0x28
 8005222:	af00      	add	r7, sp, #0
 8005224:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	431a      	orrs	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	431a      	orrs	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	4313      	orrs	r3, r2
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	4b9e      	ldr	r3, [pc, #632]	; (80054c4 <UART_SetConfig+0x2a8>)
 800524c:	4013      	ands	r3, r2
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	6812      	ldr	r2, [r2, #0]
 8005252:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005254:	430b      	orrs	r3, r1
 8005256:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a93      	ldr	r2, [pc, #588]	; (80054c8 <UART_SetConfig+0x2ac>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d004      	beq.n	8005288 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005284:	4313      	orrs	r3, r2
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005298:	430a      	orrs	r2, r1
 800529a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a8a      	ldr	r2, [pc, #552]	; (80054cc <UART_SetConfig+0x2b0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d126      	bne.n	80052f4 <UART_SetConfig+0xd8>
 80052a6:	4b8a      	ldr	r3, [pc, #552]	; (80054d0 <UART_SetConfig+0x2b4>)
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ac:	f003 0303 	and.w	r3, r3, #3
 80052b0:	2b03      	cmp	r3, #3
 80052b2:	d81b      	bhi.n	80052ec <UART_SetConfig+0xd0>
 80052b4:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <UART_SetConfig+0xa0>)
 80052b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ba:	bf00      	nop
 80052bc:	080052cd 	.word	0x080052cd
 80052c0:	080052dd 	.word	0x080052dd
 80052c4:	080052d5 	.word	0x080052d5
 80052c8:	080052e5 	.word	0x080052e5
 80052cc:	2301      	movs	r3, #1
 80052ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d2:	e0ab      	b.n	800542c <UART_SetConfig+0x210>
 80052d4:	2302      	movs	r3, #2
 80052d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052da:	e0a7      	b.n	800542c <UART_SetConfig+0x210>
 80052dc:	2304      	movs	r3, #4
 80052de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e2:	e0a3      	b.n	800542c <UART_SetConfig+0x210>
 80052e4:	2308      	movs	r3, #8
 80052e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ea:	e09f      	b.n	800542c <UART_SetConfig+0x210>
 80052ec:	2310      	movs	r3, #16
 80052ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052f2:	e09b      	b.n	800542c <UART_SetConfig+0x210>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a76      	ldr	r2, [pc, #472]	; (80054d4 <UART_SetConfig+0x2b8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d138      	bne.n	8005370 <UART_SetConfig+0x154>
 80052fe:	4b74      	ldr	r3, [pc, #464]	; (80054d0 <UART_SetConfig+0x2b4>)
 8005300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005304:	f003 030c 	and.w	r3, r3, #12
 8005308:	2b0c      	cmp	r3, #12
 800530a:	d82d      	bhi.n	8005368 <UART_SetConfig+0x14c>
 800530c:	a201      	add	r2, pc, #4	; (adr r2, 8005314 <UART_SetConfig+0xf8>)
 800530e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005312:	bf00      	nop
 8005314:	08005349 	.word	0x08005349
 8005318:	08005369 	.word	0x08005369
 800531c:	08005369 	.word	0x08005369
 8005320:	08005369 	.word	0x08005369
 8005324:	08005359 	.word	0x08005359
 8005328:	08005369 	.word	0x08005369
 800532c:	08005369 	.word	0x08005369
 8005330:	08005369 	.word	0x08005369
 8005334:	08005351 	.word	0x08005351
 8005338:	08005369 	.word	0x08005369
 800533c:	08005369 	.word	0x08005369
 8005340:	08005369 	.word	0x08005369
 8005344:	08005361 	.word	0x08005361
 8005348:	2300      	movs	r3, #0
 800534a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800534e:	e06d      	b.n	800542c <UART_SetConfig+0x210>
 8005350:	2302      	movs	r3, #2
 8005352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005356:	e069      	b.n	800542c <UART_SetConfig+0x210>
 8005358:	2304      	movs	r3, #4
 800535a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800535e:	e065      	b.n	800542c <UART_SetConfig+0x210>
 8005360:	2308      	movs	r3, #8
 8005362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005366:	e061      	b.n	800542c <UART_SetConfig+0x210>
 8005368:	2310      	movs	r3, #16
 800536a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800536e:	e05d      	b.n	800542c <UART_SetConfig+0x210>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a58      	ldr	r2, [pc, #352]	; (80054d8 <UART_SetConfig+0x2bc>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d125      	bne.n	80053c6 <UART_SetConfig+0x1aa>
 800537a:	4b55      	ldr	r3, [pc, #340]	; (80054d0 <UART_SetConfig+0x2b4>)
 800537c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005380:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005384:	2b30      	cmp	r3, #48	; 0x30
 8005386:	d016      	beq.n	80053b6 <UART_SetConfig+0x19a>
 8005388:	2b30      	cmp	r3, #48	; 0x30
 800538a:	d818      	bhi.n	80053be <UART_SetConfig+0x1a2>
 800538c:	2b20      	cmp	r3, #32
 800538e:	d00a      	beq.n	80053a6 <UART_SetConfig+0x18a>
 8005390:	2b20      	cmp	r3, #32
 8005392:	d814      	bhi.n	80053be <UART_SetConfig+0x1a2>
 8005394:	2b00      	cmp	r3, #0
 8005396:	d002      	beq.n	800539e <UART_SetConfig+0x182>
 8005398:	2b10      	cmp	r3, #16
 800539a:	d008      	beq.n	80053ae <UART_SetConfig+0x192>
 800539c:	e00f      	b.n	80053be <UART_SetConfig+0x1a2>
 800539e:	2300      	movs	r3, #0
 80053a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053a4:	e042      	b.n	800542c <UART_SetConfig+0x210>
 80053a6:	2302      	movs	r3, #2
 80053a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ac:	e03e      	b.n	800542c <UART_SetConfig+0x210>
 80053ae:	2304      	movs	r3, #4
 80053b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053b4:	e03a      	b.n	800542c <UART_SetConfig+0x210>
 80053b6:	2308      	movs	r3, #8
 80053b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053bc:	e036      	b.n	800542c <UART_SetConfig+0x210>
 80053be:	2310      	movs	r3, #16
 80053c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053c4:	e032      	b.n	800542c <UART_SetConfig+0x210>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a3f      	ldr	r2, [pc, #252]	; (80054c8 <UART_SetConfig+0x2ac>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d12a      	bne.n	8005426 <UART_SetConfig+0x20a>
 80053d0:	4b3f      	ldr	r3, [pc, #252]	; (80054d0 <UART_SetConfig+0x2b4>)
 80053d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053de:	d01a      	beq.n	8005416 <UART_SetConfig+0x1fa>
 80053e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053e4:	d81b      	bhi.n	800541e <UART_SetConfig+0x202>
 80053e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ea:	d00c      	beq.n	8005406 <UART_SetConfig+0x1ea>
 80053ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f0:	d815      	bhi.n	800541e <UART_SetConfig+0x202>
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <UART_SetConfig+0x1e2>
 80053f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053fa:	d008      	beq.n	800540e <UART_SetConfig+0x1f2>
 80053fc:	e00f      	b.n	800541e <UART_SetConfig+0x202>
 80053fe:	2300      	movs	r3, #0
 8005400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005404:	e012      	b.n	800542c <UART_SetConfig+0x210>
 8005406:	2302      	movs	r3, #2
 8005408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800540c:	e00e      	b.n	800542c <UART_SetConfig+0x210>
 800540e:	2304      	movs	r3, #4
 8005410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005414:	e00a      	b.n	800542c <UART_SetConfig+0x210>
 8005416:	2308      	movs	r3, #8
 8005418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800541c:	e006      	b.n	800542c <UART_SetConfig+0x210>
 800541e:	2310      	movs	r3, #16
 8005420:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005424:	e002      	b.n	800542c <UART_SetConfig+0x210>
 8005426:	2310      	movs	r3, #16
 8005428:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a25      	ldr	r2, [pc, #148]	; (80054c8 <UART_SetConfig+0x2ac>)
 8005432:	4293      	cmp	r3, r2
 8005434:	f040 808a 	bne.w	800554c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005438:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800543c:	2b08      	cmp	r3, #8
 800543e:	d824      	bhi.n	800548a <UART_SetConfig+0x26e>
 8005440:	a201      	add	r2, pc, #4	; (adr r2, 8005448 <UART_SetConfig+0x22c>)
 8005442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005446:	bf00      	nop
 8005448:	0800546d 	.word	0x0800546d
 800544c:	0800548b 	.word	0x0800548b
 8005450:	08005475 	.word	0x08005475
 8005454:	0800548b 	.word	0x0800548b
 8005458:	0800547b 	.word	0x0800547b
 800545c:	0800548b 	.word	0x0800548b
 8005460:	0800548b 	.word	0x0800548b
 8005464:	0800548b 	.word	0x0800548b
 8005468:	08005483 	.word	0x08005483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800546c:	f7fe fe0c 	bl	8004088 <HAL_RCC_GetPCLK1Freq>
 8005470:	61f8      	str	r0, [r7, #28]
        break;
 8005472:	e010      	b.n	8005496 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005474:	4b19      	ldr	r3, [pc, #100]	; (80054dc <UART_SetConfig+0x2c0>)
 8005476:	61fb      	str	r3, [r7, #28]
        break;
 8005478:	e00d      	b.n	8005496 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800547a:	f7fe fd6d 	bl	8003f58 <HAL_RCC_GetSysClockFreq>
 800547e:	61f8      	str	r0, [r7, #28]
        break;
 8005480:	e009      	b.n	8005496 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005486:	61fb      	str	r3, [r7, #28]
        break;
 8005488:	e005      	b.n	8005496 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005494:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 8109 	beq.w	80056b0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	4413      	add	r3, r2
 80054a8:	69fa      	ldr	r2, [r7, #28]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d305      	bcc.n	80054ba <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054b4:	69fa      	ldr	r2, [r7, #28]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d912      	bls.n	80054e0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80054c0:	e0f6      	b.n	80056b0 <UART_SetConfig+0x494>
 80054c2:	bf00      	nop
 80054c4:	efff69f3 	.word	0xefff69f3
 80054c8:	40008000 	.word	0x40008000
 80054cc:	40013800 	.word	0x40013800
 80054d0:	40021000 	.word	0x40021000
 80054d4:	40004400 	.word	0x40004400
 80054d8:	40004800 	.word	0x40004800
 80054dc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	2200      	movs	r2, #0
 80054e4:	461c      	mov	r4, r3
 80054e6:	4615      	mov	r5, r2
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	f04f 0300 	mov.w	r3, #0
 80054f0:	022b      	lsls	r3, r5, #8
 80054f2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80054f6:	0222      	lsls	r2, r4, #8
 80054f8:	68f9      	ldr	r1, [r7, #12]
 80054fa:	6849      	ldr	r1, [r1, #4]
 80054fc:	0849      	lsrs	r1, r1, #1
 80054fe:	2000      	movs	r0, #0
 8005500:	4688      	mov	r8, r1
 8005502:	4681      	mov	r9, r0
 8005504:	eb12 0a08 	adds.w	sl, r2, r8
 8005508:	eb43 0b09 	adc.w	fp, r3, r9
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	603b      	str	r3, [r7, #0]
 8005514:	607a      	str	r2, [r7, #4]
 8005516:	e9d7 2300 	ldrd	r2, r3, [r7]
 800551a:	4650      	mov	r0, sl
 800551c:	4659      	mov	r1, fp
 800551e:	f7fb fbb3 	bl	8000c88 <__aeabi_uldivmod>
 8005522:	4602      	mov	r2, r0
 8005524:	460b      	mov	r3, r1
 8005526:	4613      	mov	r3, r2
 8005528:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005530:	d308      	bcc.n	8005544 <UART_SetConfig+0x328>
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005538:	d204      	bcs.n	8005544 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	60da      	str	r2, [r3, #12]
 8005542:	e0b5      	b.n	80056b0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800554a:	e0b1      	b.n	80056b0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005554:	d15d      	bne.n	8005612 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8005556:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800555a:	2b08      	cmp	r3, #8
 800555c:	d827      	bhi.n	80055ae <UART_SetConfig+0x392>
 800555e:	a201      	add	r2, pc, #4	; (adr r2, 8005564 <UART_SetConfig+0x348>)
 8005560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005564:	08005589 	.word	0x08005589
 8005568:	08005591 	.word	0x08005591
 800556c:	08005599 	.word	0x08005599
 8005570:	080055af 	.word	0x080055af
 8005574:	0800559f 	.word	0x0800559f
 8005578:	080055af 	.word	0x080055af
 800557c:	080055af 	.word	0x080055af
 8005580:	080055af 	.word	0x080055af
 8005584:	080055a7 	.word	0x080055a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005588:	f7fe fd7e 	bl	8004088 <HAL_RCC_GetPCLK1Freq>
 800558c:	61f8      	str	r0, [r7, #28]
        break;
 800558e:	e014      	b.n	80055ba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005590:	f7fe fd90 	bl	80040b4 <HAL_RCC_GetPCLK2Freq>
 8005594:	61f8      	str	r0, [r7, #28]
        break;
 8005596:	e010      	b.n	80055ba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005598:	4b4c      	ldr	r3, [pc, #304]	; (80056cc <UART_SetConfig+0x4b0>)
 800559a:	61fb      	str	r3, [r7, #28]
        break;
 800559c:	e00d      	b.n	80055ba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800559e:	f7fe fcdb 	bl	8003f58 <HAL_RCC_GetSysClockFreq>
 80055a2:	61f8      	str	r0, [r7, #28]
        break;
 80055a4:	e009      	b.n	80055ba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055aa:	61fb      	str	r3, [r7, #28]
        break;
 80055ac:	e005      	b.n	80055ba <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80055b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d077      	beq.n	80056b0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	005a      	lsls	r2, r3, #1
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	085b      	lsrs	r3, r3, #1
 80055ca:	441a      	add	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	2b0f      	cmp	r3, #15
 80055da:	d916      	bls.n	800560a <UART_SetConfig+0x3ee>
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e2:	d212      	bcs.n	800560a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	f023 030f 	bic.w	r3, r3, #15
 80055ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	085b      	lsrs	r3, r3, #1
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	8afb      	ldrh	r3, [r7, #22]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	8afa      	ldrh	r2, [r7, #22]
 8005606:	60da      	str	r2, [r3, #12]
 8005608:	e052      	b.n	80056b0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005610:	e04e      	b.n	80056b0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005612:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005616:	2b08      	cmp	r3, #8
 8005618:	d827      	bhi.n	800566a <UART_SetConfig+0x44e>
 800561a:	a201      	add	r2, pc, #4	; (adr r2, 8005620 <UART_SetConfig+0x404>)
 800561c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005620:	08005645 	.word	0x08005645
 8005624:	0800564d 	.word	0x0800564d
 8005628:	08005655 	.word	0x08005655
 800562c:	0800566b 	.word	0x0800566b
 8005630:	0800565b 	.word	0x0800565b
 8005634:	0800566b 	.word	0x0800566b
 8005638:	0800566b 	.word	0x0800566b
 800563c:	0800566b 	.word	0x0800566b
 8005640:	08005663 	.word	0x08005663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005644:	f7fe fd20 	bl	8004088 <HAL_RCC_GetPCLK1Freq>
 8005648:	61f8      	str	r0, [r7, #28]
        break;
 800564a:	e014      	b.n	8005676 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800564c:	f7fe fd32 	bl	80040b4 <HAL_RCC_GetPCLK2Freq>
 8005650:	61f8      	str	r0, [r7, #28]
        break;
 8005652:	e010      	b.n	8005676 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005654:	4b1d      	ldr	r3, [pc, #116]	; (80056cc <UART_SetConfig+0x4b0>)
 8005656:	61fb      	str	r3, [r7, #28]
        break;
 8005658:	e00d      	b.n	8005676 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800565a:	f7fe fc7d 	bl	8003f58 <HAL_RCC_GetSysClockFreq>
 800565e:	61f8      	str	r0, [r7, #28]
        break;
 8005660:	e009      	b.n	8005676 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005666:	61fb      	str	r3, [r7, #28]
        break;
 8005668:	e005      	b.n	8005676 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005674:	bf00      	nop
    }

    if (pclk != 0U)
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d019      	beq.n	80056b0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	085a      	lsrs	r2, r3, #1
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	441a      	add	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	fbb2 f3f3 	udiv	r3, r2, r3
 800568e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	2b0f      	cmp	r3, #15
 8005694:	d909      	bls.n	80056aa <UART_SetConfig+0x48e>
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800569c:	d205      	bcs.n	80056aa <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	60da      	str	r2, [r3, #12]
 80056a8:	e002      	b.n	80056b0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80056bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3728      	adds	r7, #40	; 0x28
 80056c4:	46bd      	mov	sp, r7
 80056c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056ca:	bf00      	nop
 80056cc:	00f42400 	.word	0x00f42400

080056d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	f003 0308 	and.w	r3, r3, #8
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00a      	beq.n	80056fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00a      	beq.n	800573e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	f003 0304 	and.w	r3, r3, #4
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	f003 0310 	and.w	r3, r3, #16
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00a      	beq.n	8005782 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d01a      	beq.n	80057e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ce:	d10a      	bne.n	80057e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	605a      	str	r2, [r3, #4]
  }
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b098      	sub	sp, #96	; 0x60
 8005818:	af02      	add	r7, sp, #8
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005824:	f7fc f834 	bl	8001890 <HAL_GetTick>
 8005828:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0308 	and.w	r3, r3, #8
 8005834:	2b08      	cmp	r3, #8
 8005836:	d12e      	bne.n	8005896 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005838:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005840:	2200      	movs	r2, #0
 8005842:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f88c 	bl	8005964 <UART_WaitOnFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d021      	beq.n	8005896 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585a:	e853 3f00 	ldrex	r3, [r3]
 800585e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005862:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005866:	653b      	str	r3, [r7, #80]	; 0x50
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	461a      	mov	r2, r3
 800586e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005870:	647b      	str	r3, [r7, #68]	; 0x44
 8005872:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005874:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005876:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005878:	e841 2300 	strex	r3, r2, [r1]
 800587c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800587e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1e6      	bne.n	8005852 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2220      	movs	r2, #32
 8005888:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e062      	b.n	800595c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	d149      	bne.n	8005938 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ac:	2200      	movs	r2, #0
 80058ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f856 	bl	8005964 <UART_WaitOnFlagUntilTimeout>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d03c      	beq.n	8005938 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	e853 3f00 	ldrex	r3, [r3]
 80058ca:	623b      	str	r3, [r7, #32]
   return(result);
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	461a      	mov	r2, r3
 80058da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058dc:	633b      	str	r3, [r7, #48]	; 0x30
 80058de:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058e4:	e841 2300 	strex	r3, r2, [r1]
 80058e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e6      	bne.n	80058be <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3308      	adds	r3, #8
 80058f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	e853 3f00 	ldrex	r3, [r3]
 80058fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 0301 	bic.w	r3, r3, #1
 8005906:	64bb      	str	r3, [r7, #72]	; 0x48
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3308      	adds	r3, #8
 800590e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005910:	61fa      	str	r2, [r7, #28]
 8005912:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005914:	69b9      	ldr	r1, [r7, #24]
 8005916:	69fa      	ldr	r2, [r7, #28]
 8005918:	e841 2300 	strex	r3, r2, [r1]
 800591c:	617b      	str	r3, [r7, #20]
   return(result);
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1e5      	bne.n	80058f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2220      	movs	r2, #32
 8005928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e011      	b.n	800595c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2220      	movs	r2, #32
 800593c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2220      	movs	r2, #32
 8005942:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3758      	adds	r7, #88	; 0x58
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	603b      	str	r3, [r7, #0]
 8005970:	4613      	mov	r3, r2
 8005972:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005974:	e049      	b.n	8005a0a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597c:	d045      	beq.n	8005a0a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597e:	f7fb ff87 	bl	8001890 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	429a      	cmp	r2, r3
 800598c:	d302      	bcc.n	8005994 <UART_WaitOnFlagUntilTimeout+0x30>
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e048      	b.n	8005a2a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d031      	beq.n	8005a0a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	f003 0308 	and.w	r3, r3, #8
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d110      	bne.n	80059d6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2208      	movs	r2, #8
 80059ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 f8ff 	bl	8005bc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2208      	movs	r2, #8
 80059c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e029      	b.n	8005a2a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059e4:	d111      	bne.n	8005a0a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 f8e5 	bl	8005bc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e00f      	b.n	8005a2a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69da      	ldr	r2, [r3, #28]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	4013      	ands	r3, r2
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	bf0c      	ite	eq
 8005a1a:	2301      	moveq	r3, #1
 8005a1c:	2300      	movne	r3, #0
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	461a      	mov	r2, r3
 8005a22:	79fb      	ldrb	r3, [r7, #7]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d0a6      	beq.n	8005976 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
	...

08005a34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b097      	sub	sp, #92	; 0x5c
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	88fa      	ldrh	r2, [r7, #6]
 8005a4c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	88fa      	ldrh	r2, [r7, #6]
 8005a54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a66:	d10e      	bne.n	8005a86 <UART_Start_Receive_IT+0x52>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d105      	bne.n	8005a7c <UART_Start_Receive_IT+0x48>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005a76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a7a:	e02d      	b.n	8005ad8 <UART_Start_Receive_IT+0xa4>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	22ff      	movs	r2, #255	; 0xff
 8005a80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a84:	e028      	b.n	8005ad8 <UART_Start_Receive_IT+0xa4>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10d      	bne.n	8005aaa <UART_Start_Receive_IT+0x76>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d104      	bne.n	8005aa0 <UART_Start_Receive_IT+0x6c>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	22ff      	movs	r2, #255	; 0xff
 8005a9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a9e:	e01b      	b.n	8005ad8 <UART_Start_Receive_IT+0xa4>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	227f      	movs	r2, #127	; 0x7f
 8005aa4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005aa8:	e016      	b.n	8005ad8 <UART_Start_Receive_IT+0xa4>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ab2:	d10d      	bne.n	8005ad0 <UART_Start_Receive_IT+0x9c>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d104      	bne.n	8005ac6 <UART_Start_Receive_IT+0x92>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	227f      	movs	r2, #127	; 0x7f
 8005ac0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ac4:	e008      	b.n	8005ad8 <UART_Start_Receive_IT+0xa4>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	223f      	movs	r2, #63	; 0x3f
 8005aca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ace:	e003      	b.n	8005ad8 <UART_Start_Receive_IT+0xa4>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2222      	movs	r2, #34	; 0x22
 8005ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3308      	adds	r3, #8
 8005aee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afa:	f043 0301 	orr.w	r3, r3, #1
 8005afe:	657b      	str	r3, [r7, #84]	; 0x54
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	3308      	adds	r3, #8
 8005b06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b08:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b0a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b10:	e841 2300 	strex	r3, r2, [r1]
 8005b14:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e5      	bne.n	8005ae8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b24:	d107      	bne.n	8005b36 <UART_Start_Receive_IT+0x102>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d103      	bne.n	8005b36 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4a21      	ldr	r2, [pc, #132]	; (8005bb8 <UART_Start_Receive_IT+0x184>)
 8005b32:	669a      	str	r2, [r3, #104]	; 0x68
 8005b34:	e002      	b.n	8005b3c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4a20      	ldr	r2, [pc, #128]	; (8005bbc <UART_Start_Receive_IT+0x188>)
 8005b3a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d019      	beq.n	8005b78 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	e853 3f00 	ldrex	r3, [r3]
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005b58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b62:	637b      	str	r3, [r7, #52]	; 0x34
 8005b64:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b6a:	e841 2300 	strex	r3, r2, [r1]
 8005b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1e6      	bne.n	8005b44 <UART_Start_Receive_IT+0x110>
 8005b76:	e018      	b.n	8005baa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	e853 3f00 	ldrex	r3, [r3]
 8005b84:	613b      	str	r3, [r7, #16]
   return(result);
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f043 0320 	orr.w	r3, r3, #32
 8005b8c:	653b      	str	r3, [r7, #80]	; 0x50
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b96:	623b      	str	r3, [r7, #32]
 8005b98:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9a:	69f9      	ldr	r1, [r7, #28]
 8005b9c:	6a3a      	ldr	r2, [r7, #32]
 8005b9e:	e841 2300 	strex	r3, r2, [r1]
 8005ba2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1e6      	bne.n	8005b78 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	375c      	adds	r7, #92	; 0x5c
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	08005ec5 	.word	0x08005ec5
 8005bbc:	08005d09 	.word	0x08005d09

08005bc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b095      	sub	sp, #84	; 0x54
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd0:	e853 3f00 	ldrex	r3, [r3]
 8005bd4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	461a      	mov	r2, r3
 8005be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005be6:	643b      	str	r3, [r7, #64]	; 0x40
 8005be8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bee:	e841 2300 	strex	r3, r2, [r1]
 8005bf2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1e6      	bne.n	8005bc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3308      	adds	r3, #8
 8005c00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	e853 3f00 	ldrex	r3, [r3]
 8005c08:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	f023 0301 	bic.w	r3, r3, #1
 8005c10:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3308      	adds	r3, #8
 8005c18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c22:	e841 2300 	strex	r3, r2, [r1]
 8005c26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1e5      	bne.n	8005bfa <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d118      	bne.n	8005c68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	e853 3f00 	ldrex	r3, [r3]
 8005c42:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f023 0310 	bic.w	r3, r3, #16
 8005c4a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	461a      	mov	r2, r3
 8005c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c54:	61bb      	str	r3, [r7, #24]
 8005c56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c58:	6979      	ldr	r1, [r7, #20]
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	e841 2300 	strex	r3, r2, [r1]
 8005c60:	613b      	str	r3, [r7, #16]
   return(result);
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1e6      	bne.n	8005c36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c7c:	bf00      	nop
 8005c7e:	3754      	adds	r7, #84	; 0x54
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f7ff faa2 	bl	80051f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cac:	bf00      	nop
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cd0:	61fb      	str	r3, [r7, #28]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	61bb      	str	r3, [r7, #24]
 8005cdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	6979      	ldr	r1, [r7, #20]
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e6      	bne.n	8005cbc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7ff fa64 	bl	80051c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d00:	bf00      	nop
 8005d02:	3720      	adds	r7, #32
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b09c      	sub	sp, #112	; 0x70
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d16:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d20:	2b22      	cmp	r3, #34	; 0x22
 8005d22:	f040 80be 	bne.w	8005ea2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d2c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d30:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005d34:	b2d9      	uxtb	r1, r3
 8005d36:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d40:	400a      	ands	r2, r1
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f040 80a3 	bne.w	8005eb6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d84:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d90:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1e6      	bne.n	8005d70 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3308      	adds	r3, #8
 8005da8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dac:	e853 3f00 	ldrex	r3, [r3]
 8005db0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db4:	f023 0301 	bic.w	r3, r3, #1
 8005db8:	667b      	str	r3, [r7, #100]	; 0x64
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3308      	adds	r3, #8
 8005dc0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005dc2:	647a      	str	r2, [r7, #68]	; 0x44
 8005dc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dca:	e841 2300 	strex	r3, r2, [r1]
 8005dce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1e5      	bne.n	8005da2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a34      	ldr	r2, [pc, #208]	; (8005ec0 <UART_RxISR_8BIT+0x1b8>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d01f      	beq.n	8005e34 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d018      	beq.n	8005e34 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	e853 3f00 	ldrex	r3, [r3]
 8005e0e:	623b      	str	r3, [r7, #32]
   return(result);
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e16:	663b      	str	r3, [r7, #96]	; 0x60
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e20:	633b      	str	r3, [r7, #48]	; 0x30
 8005e22:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e28:	e841 2300 	strex	r3, r2, [r1]
 8005e2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1e6      	bne.n	8005e02 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d12e      	bne.n	8005e9a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	e853 3f00 	ldrex	r3, [r3]
 8005e4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0310 	bic.w	r3, r3, #16
 8005e56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e60:	61fb      	str	r3, [r7, #28]
 8005e62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e64:	69b9      	ldr	r1, [r7, #24]
 8005e66:	69fa      	ldr	r2, [r7, #28]
 8005e68:	e841 2300 	strex	r3, r2, [r1]
 8005e6c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1e6      	bne.n	8005e42 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	f003 0310 	and.w	r3, r3, #16
 8005e7e:	2b10      	cmp	r3, #16
 8005e80:	d103      	bne.n	8005e8a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2210      	movs	r2, #16
 8005e88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e90:	4619      	mov	r1, r3
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7ff f9b6 	bl	8005204 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e98:	e00d      	b.n	8005eb6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7ff f99e 	bl	80051dc <HAL_UART_RxCpltCallback>
}
 8005ea0:	e009      	b.n	8005eb6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	8b1b      	ldrh	r3, [r3, #24]
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f042 0208 	orr.w	r2, r2, #8
 8005eb2:	b292      	uxth	r2, r2
 8005eb4:	831a      	strh	r2, [r3, #24]
}
 8005eb6:	bf00      	nop
 8005eb8:	3770      	adds	r7, #112	; 0x70
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	40008000 	.word	0x40008000

08005ec4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b09c      	sub	sp, #112	; 0x70
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ed2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005edc:	2b22      	cmp	r3, #34	; 0x22
 8005ede:	f040 80be 	bne.w	800605e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ee8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005ef2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005ef6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005efa:	4013      	ands	r3, r2
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f06:	1c9a      	adds	r2, r3, #2
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	3b01      	subs	r3, #1
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f040 80a3 	bne.w	8006072 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f40:	667b      	str	r3, [r7, #100]	; 0x64
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	461a      	mov	r2, r3
 8005f48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f4a:	657b      	str	r3, [r7, #84]	; 0x54
 8005f4c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f52:	e841 2300 	strex	r3, r2, [r1]
 8005f56:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1e6      	bne.n	8005f2c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3308      	adds	r3, #8
 8005f64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f68:	e853 3f00 	ldrex	r3, [r3]
 8005f6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f70:	f023 0301 	bic.w	r3, r3, #1
 8005f74:	663b      	str	r3, [r7, #96]	; 0x60
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3308      	adds	r3, #8
 8005f7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f7e:	643a      	str	r2, [r7, #64]	; 0x40
 8005f80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f86:	e841 2300 	strex	r3, r2, [r1]
 8005f8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1e5      	bne.n	8005f5e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2220      	movs	r2, #32
 8005f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a34      	ldr	r2, [pc, #208]	; (800607c <UART_RxISR_16BIT+0x1b8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d01f      	beq.n	8005ff0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d018      	beq.n	8005ff0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	e853 3f00 	ldrex	r3, [r3]
 8005fca:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fde:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fe4:	e841 2300 	strex	r3, r2, [r1]
 8005fe8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1e6      	bne.n	8005fbe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d12e      	bne.n	8006056 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	e853 3f00 	ldrex	r3, [r3]
 800600a:	60bb      	str	r3, [r7, #8]
   return(result);
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f023 0310 	bic.w	r3, r3, #16
 8006012:	65bb      	str	r3, [r7, #88]	; 0x58
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	461a      	mov	r2, r3
 800601a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800601c:	61bb      	str	r3, [r7, #24]
 800601e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006020:	6979      	ldr	r1, [r7, #20]
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	e841 2300 	strex	r3, r2, [r1]
 8006028:	613b      	str	r3, [r7, #16]
   return(result);
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1e6      	bne.n	8005ffe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	f003 0310 	and.w	r3, r3, #16
 800603a:	2b10      	cmp	r3, #16
 800603c:	d103      	bne.n	8006046 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2210      	movs	r2, #16
 8006044:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800604c:	4619      	mov	r1, r3
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7ff f8d8 	bl	8005204 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006054:	e00d      	b.n	8006072 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff f8c0 	bl	80051dc <HAL_UART_RxCpltCallback>
}
 800605c:	e009      	b.n	8006072 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	8b1b      	ldrh	r3, [r3, #24]
 8006064:	b29a      	uxth	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0208 	orr.w	r2, r2, #8
 800606e:	b292      	uxth	r2, r2
 8006070:	831a      	strh	r2, [r3, #24]
}
 8006072:	bf00      	nop
 8006074:	3770      	adds	r7, #112	; 0x70
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	40008000 	.word	0x40008000

08006080 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <__cvt>:
 8006094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006098:	ec55 4b10 	vmov	r4, r5, d0
 800609c:	2d00      	cmp	r5, #0
 800609e:	460e      	mov	r6, r1
 80060a0:	4619      	mov	r1, r3
 80060a2:	462b      	mov	r3, r5
 80060a4:	bfbb      	ittet	lt
 80060a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80060aa:	461d      	movlt	r5, r3
 80060ac:	2300      	movge	r3, #0
 80060ae:	232d      	movlt	r3, #45	; 0x2d
 80060b0:	700b      	strb	r3, [r1, #0]
 80060b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80060b8:	4691      	mov	r9, r2
 80060ba:	f023 0820 	bic.w	r8, r3, #32
 80060be:	bfbc      	itt	lt
 80060c0:	4622      	movlt	r2, r4
 80060c2:	4614      	movlt	r4, r2
 80060c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060c8:	d005      	beq.n	80060d6 <__cvt+0x42>
 80060ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80060ce:	d100      	bne.n	80060d2 <__cvt+0x3e>
 80060d0:	3601      	adds	r6, #1
 80060d2:	2102      	movs	r1, #2
 80060d4:	e000      	b.n	80060d8 <__cvt+0x44>
 80060d6:	2103      	movs	r1, #3
 80060d8:	ab03      	add	r3, sp, #12
 80060da:	9301      	str	r3, [sp, #4]
 80060dc:	ab02      	add	r3, sp, #8
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	ec45 4b10 	vmov	d0, r4, r5
 80060e4:	4653      	mov	r3, sl
 80060e6:	4632      	mov	r2, r6
 80060e8:	f001 f86a 	bl	80071c0 <_dtoa_r>
 80060ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80060f0:	4607      	mov	r7, r0
 80060f2:	d102      	bne.n	80060fa <__cvt+0x66>
 80060f4:	f019 0f01 	tst.w	r9, #1
 80060f8:	d022      	beq.n	8006140 <__cvt+0xac>
 80060fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060fe:	eb07 0906 	add.w	r9, r7, r6
 8006102:	d110      	bne.n	8006126 <__cvt+0x92>
 8006104:	783b      	ldrb	r3, [r7, #0]
 8006106:	2b30      	cmp	r3, #48	; 0x30
 8006108:	d10a      	bne.n	8006120 <__cvt+0x8c>
 800610a:	2200      	movs	r2, #0
 800610c:	2300      	movs	r3, #0
 800610e:	4620      	mov	r0, r4
 8006110:	4629      	mov	r1, r5
 8006112:	f7fa fcd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006116:	b918      	cbnz	r0, 8006120 <__cvt+0x8c>
 8006118:	f1c6 0601 	rsb	r6, r6, #1
 800611c:	f8ca 6000 	str.w	r6, [sl]
 8006120:	f8da 3000 	ldr.w	r3, [sl]
 8006124:	4499      	add	r9, r3
 8006126:	2200      	movs	r2, #0
 8006128:	2300      	movs	r3, #0
 800612a:	4620      	mov	r0, r4
 800612c:	4629      	mov	r1, r5
 800612e:	f7fa fccb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006132:	b108      	cbz	r0, 8006138 <__cvt+0xa4>
 8006134:	f8cd 900c 	str.w	r9, [sp, #12]
 8006138:	2230      	movs	r2, #48	; 0x30
 800613a:	9b03      	ldr	r3, [sp, #12]
 800613c:	454b      	cmp	r3, r9
 800613e:	d307      	bcc.n	8006150 <__cvt+0xbc>
 8006140:	9b03      	ldr	r3, [sp, #12]
 8006142:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006144:	1bdb      	subs	r3, r3, r7
 8006146:	4638      	mov	r0, r7
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	b004      	add	sp, #16
 800614c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006150:	1c59      	adds	r1, r3, #1
 8006152:	9103      	str	r1, [sp, #12]
 8006154:	701a      	strb	r2, [r3, #0]
 8006156:	e7f0      	b.n	800613a <__cvt+0xa6>

08006158 <__exponent>:
 8006158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800615a:	4603      	mov	r3, r0
 800615c:	2900      	cmp	r1, #0
 800615e:	bfb8      	it	lt
 8006160:	4249      	neglt	r1, r1
 8006162:	f803 2b02 	strb.w	r2, [r3], #2
 8006166:	bfb4      	ite	lt
 8006168:	222d      	movlt	r2, #45	; 0x2d
 800616a:	222b      	movge	r2, #43	; 0x2b
 800616c:	2909      	cmp	r1, #9
 800616e:	7042      	strb	r2, [r0, #1]
 8006170:	dd2a      	ble.n	80061c8 <__exponent+0x70>
 8006172:	f10d 0207 	add.w	r2, sp, #7
 8006176:	4617      	mov	r7, r2
 8006178:	260a      	movs	r6, #10
 800617a:	4694      	mov	ip, r2
 800617c:	fb91 f5f6 	sdiv	r5, r1, r6
 8006180:	fb06 1415 	mls	r4, r6, r5, r1
 8006184:	3430      	adds	r4, #48	; 0x30
 8006186:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800618a:	460c      	mov	r4, r1
 800618c:	2c63      	cmp	r4, #99	; 0x63
 800618e:	f102 32ff 	add.w	r2, r2, #4294967295
 8006192:	4629      	mov	r1, r5
 8006194:	dcf1      	bgt.n	800617a <__exponent+0x22>
 8006196:	3130      	adds	r1, #48	; 0x30
 8006198:	f1ac 0402 	sub.w	r4, ip, #2
 800619c:	f802 1c01 	strb.w	r1, [r2, #-1]
 80061a0:	1c41      	adds	r1, r0, #1
 80061a2:	4622      	mov	r2, r4
 80061a4:	42ba      	cmp	r2, r7
 80061a6:	d30a      	bcc.n	80061be <__exponent+0x66>
 80061a8:	f10d 0209 	add.w	r2, sp, #9
 80061ac:	eba2 020c 	sub.w	r2, r2, ip
 80061b0:	42bc      	cmp	r4, r7
 80061b2:	bf88      	it	hi
 80061b4:	2200      	movhi	r2, #0
 80061b6:	4413      	add	r3, r2
 80061b8:	1a18      	subs	r0, r3, r0
 80061ba:	b003      	add	sp, #12
 80061bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061be:	f812 5b01 	ldrb.w	r5, [r2], #1
 80061c2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80061c6:	e7ed      	b.n	80061a4 <__exponent+0x4c>
 80061c8:	2330      	movs	r3, #48	; 0x30
 80061ca:	3130      	adds	r1, #48	; 0x30
 80061cc:	7083      	strb	r3, [r0, #2]
 80061ce:	70c1      	strb	r1, [r0, #3]
 80061d0:	1d03      	adds	r3, r0, #4
 80061d2:	e7f1      	b.n	80061b8 <__exponent+0x60>

080061d4 <_printf_float>:
 80061d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d8:	ed2d 8b02 	vpush	{d8}
 80061dc:	b08d      	sub	sp, #52	; 0x34
 80061de:	460c      	mov	r4, r1
 80061e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80061e4:	4616      	mov	r6, r2
 80061e6:	461f      	mov	r7, r3
 80061e8:	4605      	mov	r5, r0
 80061ea:	f000 fee5 	bl	8006fb8 <_localeconv_r>
 80061ee:	f8d0 a000 	ldr.w	sl, [r0]
 80061f2:	4650      	mov	r0, sl
 80061f4:	f7fa f83c 	bl	8000270 <strlen>
 80061f8:	2300      	movs	r3, #0
 80061fa:	930a      	str	r3, [sp, #40]	; 0x28
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	9305      	str	r3, [sp, #20]
 8006200:	f8d8 3000 	ldr.w	r3, [r8]
 8006204:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006208:	3307      	adds	r3, #7
 800620a:	f023 0307 	bic.w	r3, r3, #7
 800620e:	f103 0208 	add.w	r2, r3, #8
 8006212:	f8c8 2000 	str.w	r2, [r8]
 8006216:	e9d3 8900 	ldrd	r8, r9, [r3]
 800621a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800621e:	9307      	str	r3, [sp, #28]
 8006220:	f8cd 8018 	str.w	r8, [sp, #24]
 8006224:	ee08 0a10 	vmov	s16, r0
 8006228:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800622c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006230:	4b9e      	ldr	r3, [pc, #632]	; (80064ac <_printf_float+0x2d8>)
 8006232:	f04f 32ff 	mov.w	r2, #4294967295
 8006236:	f7fa fc79 	bl	8000b2c <__aeabi_dcmpun>
 800623a:	bb88      	cbnz	r0, 80062a0 <_printf_float+0xcc>
 800623c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006240:	4b9a      	ldr	r3, [pc, #616]	; (80064ac <_printf_float+0x2d8>)
 8006242:	f04f 32ff 	mov.w	r2, #4294967295
 8006246:	f7fa fc53 	bl	8000af0 <__aeabi_dcmple>
 800624a:	bb48      	cbnz	r0, 80062a0 <_printf_float+0xcc>
 800624c:	2200      	movs	r2, #0
 800624e:	2300      	movs	r3, #0
 8006250:	4640      	mov	r0, r8
 8006252:	4649      	mov	r1, r9
 8006254:	f7fa fc42 	bl	8000adc <__aeabi_dcmplt>
 8006258:	b110      	cbz	r0, 8006260 <_printf_float+0x8c>
 800625a:	232d      	movs	r3, #45	; 0x2d
 800625c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006260:	4a93      	ldr	r2, [pc, #588]	; (80064b0 <_printf_float+0x2dc>)
 8006262:	4b94      	ldr	r3, [pc, #592]	; (80064b4 <_printf_float+0x2e0>)
 8006264:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006268:	bf94      	ite	ls
 800626a:	4690      	movls	r8, r2
 800626c:	4698      	movhi	r8, r3
 800626e:	2303      	movs	r3, #3
 8006270:	6123      	str	r3, [r4, #16]
 8006272:	9b05      	ldr	r3, [sp, #20]
 8006274:	f023 0304 	bic.w	r3, r3, #4
 8006278:	6023      	str	r3, [r4, #0]
 800627a:	f04f 0900 	mov.w	r9, #0
 800627e:	9700      	str	r7, [sp, #0]
 8006280:	4633      	mov	r3, r6
 8006282:	aa0b      	add	r2, sp, #44	; 0x2c
 8006284:	4621      	mov	r1, r4
 8006286:	4628      	mov	r0, r5
 8006288:	f000 f9da 	bl	8006640 <_printf_common>
 800628c:	3001      	adds	r0, #1
 800628e:	f040 8090 	bne.w	80063b2 <_printf_float+0x1de>
 8006292:	f04f 30ff 	mov.w	r0, #4294967295
 8006296:	b00d      	add	sp, #52	; 0x34
 8006298:	ecbd 8b02 	vpop	{d8}
 800629c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a0:	4642      	mov	r2, r8
 80062a2:	464b      	mov	r3, r9
 80062a4:	4640      	mov	r0, r8
 80062a6:	4649      	mov	r1, r9
 80062a8:	f7fa fc40 	bl	8000b2c <__aeabi_dcmpun>
 80062ac:	b140      	cbz	r0, 80062c0 <_printf_float+0xec>
 80062ae:	464b      	mov	r3, r9
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	bfbc      	itt	lt
 80062b4:	232d      	movlt	r3, #45	; 0x2d
 80062b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80062ba:	4a7f      	ldr	r2, [pc, #508]	; (80064b8 <_printf_float+0x2e4>)
 80062bc:	4b7f      	ldr	r3, [pc, #508]	; (80064bc <_printf_float+0x2e8>)
 80062be:	e7d1      	b.n	8006264 <_printf_float+0x90>
 80062c0:	6863      	ldr	r3, [r4, #4]
 80062c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80062c6:	9206      	str	r2, [sp, #24]
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	d13f      	bne.n	800634c <_printf_float+0x178>
 80062cc:	2306      	movs	r3, #6
 80062ce:	6063      	str	r3, [r4, #4]
 80062d0:	9b05      	ldr	r3, [sp, #20]
 80062d2:	6861      	ldr	r1, [r4, #4]
 80062d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80062d8:	2300      	movs	r3, #0
 80062da:	9303      	str	r3, [sp, #12]
 80062dc:	ab0a      	add	r3, sp, #40	; 0x28
 80062de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80062e2:	ab09      	add	r3, sp, #36	; 0x24
 80062e4:	ec49 8b10 	vmov	d0, r8, r9
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	6022      	str	r2, [r4, #0]
 80062ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80062f0:	4628      	mov	r0, r5
 80062f2:	f7ff fecf 	bl	8006094 <__cvt>
 80062f6:	9b06      	ldr	r3, [sp, #24]
 80062f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062fa:	2b47      	cmp	r3, #71	; 0x47
 80062fc:	4680      	mov	r8, r0
 80062fe:	d108      	bne.n	8006312 <_printf_float+0x13e>
 8006300:	1cc8      	adds	r0, r1, #3
 8006302:	db02      	blt.n	800630a <_printf_float+0x136>
 8006304:	6863      	ldr	r3, [r4, #4]
 8006306:	4299      	cmp	r1, r3
 8006308:	dd41      	ble.n	800638e <_printf_float+0x1ba>
 800630a:	f1ab 0302 	sub.w	r3, fp, #2
 800630e:	fa5f fb83 	uxtb.w	fp, r3
 8006312:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006316:	d820      	bhi.n	800635a <_printf_float+0x186>
 8006318:	3901      	subs	r1, #1
 800631a:	465a      	mov	r2, fp
 800631c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006320:	9109      	str	r1, [sp, #36]	; 0x24
 8006322:	f7ff ff19 	bl	8006158 <__exponent>
 8006326:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006328:	1813      	adds	r3, r2, r0
 800632a:	2a01      	cmp	r2, #1
 800632c:	4681      	mov	r9, r0
 800632e:	6123      	str	r3, [r4, #16]
 8006330:	dc02      	bgt.n	8006338 <_printf_float+0x164>
 8006332:	6822      	ldr	r2, [r4, #0]
 8006334:	07d2      	lsls	r2, r2, #31
 8006336:	d501      	bpl.n	800633c <_printf_float+0x168>
 8006338:	3301      	adds	r3, #1
 800633a:	6123      	str	r3, [r4, #16]
 800633c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006340:	2b00      	cmp	r3, #0
 8006342:	d09c      	beq.n	800627e <_printf_float+0xaa>
 8006344:	232d      	movs	r3, #45	; 0x2d
 8006346:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800634a:	e798      	b.n	800627e <_printf_float+0xaa>
 800634c:	9a06      	ldr	r2, [sp, #24]
 800634e:	2a47      	cmp	r2, #71	; 0x47
 8006350:	d1be      	bne.n	80062d0 <_printf_float+0xfc>
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1bc      	bne.n	80062d0 <_printf_float+0xfc>
 8006356:	2301      	movs	r3, #1
 8006358:	e7b9      	b.n	80062ce <_printf_float+0xfa>
 800635a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800635e:	d118      	bne.n	8006392 <_printf_float+0x1be>
 8006360:	2900      	cmp	r1, #0
 8006362:	6863      	ldr	r3, [r4, #4]
 8006364:	dd0b      	ble.n	800637e <_printf_float+0x1aa>
 8006366:	6121      	str	r1, [r4, #16]
 8006368:	b913      	cbnz	r3, 8006370 <_printf_float+0x19c>
 800636a:	6822      	ldr	r2, [r4, #0]
 800636c:	07d0      	lsls	r0, r2, #31
 800636e:	d502      	bpl.n	8006376 <_printf_float+0x1a2>
 8006370:	3301      	adds	r3, #1
 8006372:	440b      	add	r3, r1
 8006374:	6123      	str	r3, [r4, #16]
 8006376:	65a1      	str	r1, [r4, #88]	; 0x58
 8006378:	f04f 0900 	mov.w	r9, #0
 800637c:	e7de      	b.n	800633c <_printf_float+0x168>
 800637e:	b913      	cbnz	r3, 8006386 <_printf_float+0x1b2>
 8006380:	6822      	ldr	r2, [r4, #0]
 8006382:	07d2      	lsls	r2, r2, #31
 8006384:	d501      	bpl.n	800638a <_printf_float+0x1b6>
 8006386:	3302      	adds	r3, #2
 8006388:	e7f4      	b.n	8006374 <_printf_float+0x1a0>
 800638a:	2301      	movs	r3, #1
 800638c:	e7f2      	b.n	8006374 <_printf_float+0x1a0>
 800638e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006394:	4299      	cmp	r1, r3
 8006396:	db05      	blt.n	80063a4 <_printf_float+0x1d0>
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	6121      	str	r1, [r4, #16]
 800639c:	07d8      	lsls	r0, r3, #31
 800639e:	d5ea      	bpl.n	8006376 <_printf_float+0x1a2>
 80063a0:	1c4b      	adds	r3, r1, #1
 80063a2:	e7e7      	b.n	8006374 <_printf_float+0x1a0>
 80063a4:	2900      	cmp	r1, #0
 80063a6:	bfd4      	ite	le
 80063a8:	f1c1 0202 	rsble	r2, r1, #2
 80063ac:	2201      	movgt	r2, #1
 80063ae:	4413      	add	r3, r2
 80063b0:	e7e0      	b.n	8006374 <_printf_float+0x1a0>
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	055a      	lsls	r2, r3, #21
 80063b6:	d407      	bmi.n	80063c8 <_printf_float+0x1f4>
 80063b8:	6923      	ldr	r3, [r4, #16]
 80063ba:	4642      	mov	r2, r8
 80063bc:	4631      	mov	r1, r6
 80063be:	4628      	mov	r0, r5
 80063c0:	47b8      	blx	r7
 80063c2:	3001      	adds	r0, #1
 80063c4:	d12c      	bne.n	8006420 <_printf_float+0x24c>
 80063c6:	e764      	b.n	8006292 <_printf_float+0xbe>
 80063c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80063cc:	f240 80e0 	bls.w	8006590 <_printf_float+0x3bc>
 80063d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063d4:	2200      	movs	r2, #0
 80063d6:	2300      	movs	r3, #0
 80063d8:	f7fa fb76 	bl	8000ac8 <__aeabi_dcmpeq>
 80063dc:	2800      	cmp	r0, #0
 80063de:	d034      	beq.n	800644a <_printf_float+0x276>
 80063e0:	4a37      	ldr	r2, [pc, #220]	; (80064c0 <_printf_float+0x2ec>)
 80063e2:	2301      	movs	r3, #1
 80063e4:	4631      	mov	r1, r6
 80063e6:	4628      	mov	r0, r5
 80063e8:	47b8      	blx	r7
 80063ea:	3001      	adds	r0, #1
 80063ec:	f43f af51 	beq.w	8006292 <_printf_float+0xbe>
 80063f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063f4:	429a      	cmp	r2, r3
 80063f6:	db02      	blt.n	80063fe <_printf_float+0x22a>
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	07d8      	lsls	r0, r3, #31
 80063fc:	d510      	bpl.n	8006420 <_printf_float+0x24c>
 80063fe:	ee18 3a10 	vmov	r3, s16
 8006402:	4652      	mov	r2, sl
 8006404:	4631      	mov	r1, r6
 8006406:	4628      	mov	r0, r5
 8006408:	47b8      	blx	r7
 800640a:	3001      	adds	r0, #1
 800640c:	f43f af41 	beq.w	8006292 <_printf_float+0xbe>
 8006410:	f04f 0800 	mov.w	r8, #0
 8006414:	f104 091a 	add.w	r9, r4, #26
 8006418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800641a:	3b01      	subs	r3, #1
 800641c:	4543      	cmp	r3, r8
 800641e:	dc09      	bgt.n	8006434 <_printf_float+0x260>
 8006420:	6823      	ldr	r3, [r4, #0]
 8006422:	079b      	lsls	r3, r3, #30
 8006424:	f100 8107 	bmi.w	8006636 <_printf_float+0x462>
 8006428:	68e0      	ldr	r0, [r4, #12]
 800642a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800642c:	4298      	cmp	r0, r3
 800642e:	bfb8      	it	lt
 8006430:	4618      	movlt	r0, r3
 8006432:	e730      	b.n	8006296 <_printf_float+0xc2>
 8006434:	2301      	movs	r3, #1
 8006436:	464a      	mov	r2, r9
 8006438:	4631      	mov	r1, r6
 800643a:	4628      	mov	r0, r5
 800643c:	47b8      	blx	r7
 800643e:	3001      	adds	r0, #1
 8006440:	f43f af27 	beq.w	8006292 <_printf_float+0xbe>
 8006444:	f108 0801 	add.w	r8, r8, #1
 8006448:	e7e6      	b.n	8006418 <_printf_float+0x244>
 800644a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800644c:	2b00      	cmp	r3, #0
 800644e:	dc39      	bgt.n	80064c4 <_printf_float+0x2f0>
 8006450:	4a1b      	ldr	r2, [pc, #108]	; (80064c0 <_printf_float+0x2ec>)
 8006452:	2301      	movs	r3, #1
 8006454:	4631      	mov	r1, r6
 8006456:	4628      	mov	r0, r5
 8006458:	47b8      	blx	r7
 800645a:	3001      	adds	r0, #1
 800645c:	f43f af19 	beq.w	8006292 <_printf_float+0xbe>
 8006460:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006464:	4313      	orrs	r3, r2
 8006466:	d102      	bne.n	800646e <_printf_float+0x29a>
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	07d9      	lsls	r1, r3, #31
 800646c:	d5d8      	bpl.n	8006420 <_printf_float+0x24c>
 800646e:	ee18 3a10 	vmov	r3, s16
 8006472:	4652      	mov	r2, sl
 8006474:	4631      	mov	r1, r6
 8006476:	4628      	mov	r0, r5
 8006478:	47b8      	blx	r7
 800647a:	3001      	adds	r0, #1
 800647c:	f43f af09 	beq.w	8006292 <_printf_float+0xbe>
 8006480:	f04f 0900 	mov.w	r9, #0
 8006484:	f104 0a1a 	add.w	sl, r4, #26
 8006488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800648a:	425b      	negs	r3, r3
 800648c:	454b      	cmp	r3, r9
 800648e:	dc01      	bgt.n	8006494 <_printf_float+0x2c0>
 8006490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006492:	e792      	b.n	80063ba <_printf_float+0x1e6>
 8006494:	2301      	movs	r3, #1
 8006496:	4652      	mov	r2, sl
 8006498:	4631      	mov	r1, r6
 800649a:	4628      	mov	r0, r5
 800649c:	47b8      	blx	r7
 800649e:	3001      	adds	r0, #1
 80064a0:	f43f aef7 	beq.w	8006292 <_printf_float+0xbe>
 80064a4:	f109 0901 	add.w	r9, r9, #1
 80064a8:	e7ee      	b.n	8006488 <_printf_float+0x2b4>
 80064aa:	bf00      	nop
 80064ac:	7fefffff 	.word	0x7fefffff
 80064b0:	0800a888 	.word	0x0800a888
 80064b4:	0800a88c 	.word	0x0800a88c
 80064b8:	0800a890 	.word	0x0800a890
 80064bc:	0800a894 	.word	0x0800a894
 80064c0:	0800a898 	.word	0x0800a898
 80064c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064c8:	429a      	cmp	r2, r3
 80064ca:	bfa8      	it	ge
 80064cc:	461a      	movge	r2, r3
 80064ce:	2a00      	cmp	r2, #0
 80064d0:	4691      	mov	r9, r2
 80064d2:	dc37      	bgt.n	8006544 <_printf_float+0x370>
 80064d4:	f04f 0b00 	mov.w	fp, #0
 80064d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064dc:	f104 021a 	add.w	r2, r4, #26
 80064e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064e2:	9305      	str	r3, [sp, #20]
 80064e4:	eba3 0309 	sub.w	r3, r3, r9
 80064e8:	455b      	cmp	r3, fp
 80064ea:	dc33      	bgt.n	8006554 <_printf_float+0x380>
 80064ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064f0:	429a      	cmp	r2, r3
 80064f2:	db3b      	blt.n	800656c <_printf_float+0x398>
 80064f4:	6823      	ldr	r3, [r4, #0]
 80064f6:	07da      	lsls	r2, r3, #31
 80064f8:	d438      	bmi.n	800656c <_printf_float+0x398>
 80064fa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80064fe:	eba2 0903 	sub.w	r9, r2, r3
 8006502:	9b05      	ldr	r3, [sp, #20]
 8006504:	1ad2      	subs	r2, r2, r3
 8006506:	4591      	cmp	r9, r2
 8006508:	bfa8      	it	ge
 800650a:	4691      	movge	r9, r2
 800650c:	f1b9 0f00 	cmp.w	r9, #0
 8006510:	dc35      	bgt.n	800657e <_printf_float+0x3aa>
 8006512:	f04f 0800 	mov.w	r8, #0
 8006516:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800651a:	f104 0a1a 	add.w	sl, r4, #26
 800651e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006522:	1a9b      	subs	r3, r3, r2
 8006524:	eba3 0309 	sub.w	r3, r3, r9
 8006528:	4543      	cmp	r3, r8
 800652a:	f77f af79 	ble.w	8006420 <_printf_float+0x24c>
 800652e:	2301      	movs	r3, #1
 8006530:	4652      	mov	r2, sl
 8006532:	4631      	mov	r1, r6
 8006534:	4628      	mov	r0, r5
 8006536:	47b8      	blx	r7
 8006538:	3001      	adds	r0, #1
 800653a:	f43f aeaa 	beq.w	8006292 <_printf_float+0xbe>
 800653e:	f108 0801 	add.w	r8, r8, #1
 8006542:	e7ec      	b.n	800651e <_printf_float+0x34a>
 8006544:	4613      	mov	r3, r2
 8006546:	4631      	mov	r1, r6
 8006548:	4642      	mov	r2, r8
 800654a:	4628      	mov	r0, r5
 800654c:	47b8      	blx	r7
 800654e:	3001      	adds	r0, #1
 8006550:	d1c0      	bne.n	80064d4 <_printf_float+0x300>
 8006552:	e69e      	b.n	8006292 <_printf_float+0xbe>
 8006554:	2301      	movs	r3, #1
 8006556:	4631      	mov	r1, r6
 8006558:	4628      	mov	r0, r5
 800655a:	9205      	str	r2, [sp, #20]
 800655c:	47b8      	blx	r7
 800655e:	3001      	adds	r0, #1
 8006560:	f43f ae97 	beq.w	8006292 <_printf_float+0xbe>
 8006564:	9a05      	ldr	r2, [sp, #20]
 8006566:	f10b 0b01 	add.w	fp, fp, #1
 800656a:	e7b9      	b.n	80064e0 <_printf_float+0x30c>
 800656c:	ee18 3a10 	vmov	r3, s16
 8006570:	4652      	mov	r2, sl
 8006572:	4631      	mov	r1, r6
 8006574:	4628      	mov	r0, r5
 8006576:	47b8      	blx	r7
 8006578:	3001      	adds	r0, #1
 800657a:	d1be      	bne.n	80064fa <_printf_float+0x326>
 800657c:	e689      	b.n	8006292 <_printf_float+0xbe>
 800657e:	9a05      	ldr	r2, [sp, #20]
 8006580:	464b      	mov	r3, r9
 8006582:	4442      	add	r2, r8
 8006584:	4631      	mov	r1, r6
 8006586:	4628      	mov	r0, r5
 8006588:	47b8      	blx	r7
 800658a:	3001      	adds	r0, #1
 800658c:	d1c1      	bne.n	8006512 <_printf_float+0x33e>
 800658e:	e680      	b.n	8006292 <_printf_float+0xbe>
 8006590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006592:	2a01      	cmp	r2, #1
 8006594:	dc01      	bgt.n	800659a <_printf_float+0x3c6>
 8006596:	07db      	lsls	r3, r3, #31
 8006598:	d53a      	bpl.n	8006610 <_printf_float+0x43c>
 800659a:	2301      	movs	r3, #1
 800659c:	4642      	mov	r2, r8
 800659e:	4631      	mov	r1, r6
 80065a0:	4628      	mov	r0, r5
 80065a2:	47b8      	blx	r7
 80065a4:	3001      	adds	r0, #1
 80065a6:	f43f ae74 	beq.w	8006292 <_printf_float+0xbe>
 80065aa:	ee18 3a10 	vmov	r3, s16
 80065ae:	4652      	mov	r2, sl
 80065b0:	4631      	mov	r1, r6
 80065b2:	4628      	mov	r0, r5
 80065b4:	47b8      	blx	r7
 80065b6:	3001      	adds	r0, #1
 80065b8:	f43f ae6b 	beq.w	8006292 <_printf_float+0xbe>
 80065bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065c0:	2200      	movs	r2, #0
 80065c2:	2300      	movs	r3, #0
 80065c4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80065c8:	f7fa fa7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80065cc:	b9d8      	cbnz	r0, 8006606 <_printf_float+0x432>
 80065ce:	f10a 33ff 	add.w	r3, sl, #4294967295
 80065d2:	f108 0201 	add.w	r2, r8, #1
 80065d6:	4631      	mov	r1, r6
 80065d8:	4628      	mov	r0, r5
 80065da:	47b8      	blx	r7
 80065dc:	3001      	adds	r0, #1
 80065de:	d10e      	bne.n	80065fe <_printf_float+0x42a>
 80065e0:	e657      	b.n	8006292 <_printf_float+0xbe>
 80065e2:	2301      	movs	r3, #1
 80065e4:	4652      	mov	r2, sl
 80065e6:	4631      	mov	r1, r6
 80065e8:	4628      	mov	r0, r5
 80065ea:	47b8      	blx	r7
 80065ec:	3001      	adds	r0, #1
 80065ee:	f43f ae50 	beq.w	8006292 <_printf_float+0xbe>
 80065f2:	f108 0801 	add.w	r8, r8, #1
 80065f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065f8:	3b01      	subs	r3, #1
 80065fa:	4543      	cmp	r3, r8
 80065fc:	dcf1      	bgt.n	80065e2 <_printf_float+0x40e>
 80065fe:	464b      	mov	r3, r9
 8006600:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006604:	e6da      	b.n	80063bc <_printf_float+0x1e8>
 8006606:	f04f 0800 	mov.w	r8, #0
 800660a:	f104 0a1a 	add.w	sl, r4, #26
 800660e:	e7f2      	b.n	80065f6 <_printf_float+0x422>
 8006610:	2301      	movs	r3, #1
 8006612:	4642      	mov	r2, r8
 8006614:	e7df      	b.n	80065d6 <_printf_float+0x402>
 8006616:	2301      	movs	r3, #1
 8006618:	464a      	mov	r2, r9
 800661a:	4631      	mov	r1, r6
 800661c:	4628      	mov	r0, r5
 800661e:	47b8      	blx	r7
 8006620:	3001      	adds	r0, #1
 8006622:	f43f ae36 	beq.w	8006292 <_printf_float+0xbe>
 8006626:	f108 0801 	add.w	r8, r8, #1
 800662a:	68e3      	ldr	r3, [r4, #12]
 800662c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800662e:	1a5b      	subs	r3, r3, r1
 8006630:	4543      	cmp	r3, r8
 8006632:	dcf0      	bgt.n	8006616 <_printf_float+0x442>
 8006634:	e6f8      	b.n	8006428 <_printf_float+0x254>
 8006636:	f04f 0800 	mov.w	r8, #0
 800663a:	f104 0919 	add.w	r9, r4, #25
 800663e:	e7f4      	b.n	800662a <_printf_float+0x456>

08006640 <_printf_common>:
 8006640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006644:	4616      	mov	r6, r2
 8006646:	4699      	mov	r9, r3
 8006648:	688a      	ldr	r2, [r1, #8]
 800664a:	690b      	ldr	r3, [r1, #16]
 800664c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006650:	4293      	cmp	r3, r2
 8006652:	bfb8      	it	lt
 8006654:	4613      	movlt	r3, r2
 8006656:	6033      	str	r3, [r6, #0]
 8006658:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800665c:	4607      	mov	r7, r0
 800665e:	460c      	mov	r4, r1
 8006660:	b10a      	cbz	r2, 8006666 <_printf_common+0x26>
 8006662:	3301      	adds	r3, #1
 8006664:	6033      	str	r3, [r6, #0]
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	0699      	lsls	r1, r3, #26
 800666a:	bf42      	ittt	mi
 800666c:	6833      	ldrmi	r3, [r6, #0]
 800666e:	3302      	addmi	r3, #2
 8006670:	6033      	strmi	r3, [r6, #0]
 8006672:	6825      	ldr	r5, [r4, #0]
 8006674:	f015 0506 	ands.w	r5, r5, #6
 8006678:	d106      	bne.n	8006688 <_printf_common+0x48>
 800667a:	f104 0a19 	add.w	sl, r4, #25
 800667e:	68e3      	ldr	r3, [r4, #12]
 8006680:	6832      	ldr	r2, [r6, #0]
 8006682:	1a9b      	subs	r3, r3, r2
 8006684:	42ab      	cmp	r3, r5
 8006686:	dc26      	bgt.n	80066d6 <_printf_common+0x96>
 8006688:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800668c:	1e13      	subs	r3, r2, #0
 800668e:	6822      	ldr	r2, [r4, #0]
 8006690:	bf18      	it	ne
 8006692:	2301      	movne	r3, #1
 8006694:	0692      	lsls	r2, r2, #26
 8006696:	d42b      	bmi.n	80066f0 <_printf_common+0xb0>
 8006698:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800669c:	4649      	mov	r1, r9
 800669e:	4638      	mov	r0, r7
 80066a0:	47c0      	blx	r8
 80066a2:	3001      	adds	r0, #1
 80066a4:	d01e      	beq.n	80066e4 <_printf_common+0xa4>
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	6922      	ldr	r2, [r4, #16]
 80066aa:	f003 0306 	and.w	r3, r3, #6
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	bf02      	ittt	eq
 80066b2:	68e5      	ldreq	r5, [r4, #12]
 80066b4:	6833      	ldreq	r3, [r6, #0]
 80066b6:	1aed      	subeq	r5, r5, r3
 80066b8:	68a3      	ldr	r3, [r4, #8]
 80066ba:	bf0c      	ite	eq
 80066bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066c0:	2500      	movne	r5, #0
 80066c2:	4293      	cmp	r3, r2
 80066c4:	bfc4      	itt	gt
 80066c6:	1a9b      	subgt	r3, r3, r2
 80066c8:	18ed      	addgt	r5, r5, r3
 80066ca:	2600      	movs	r6, #0
 80066cc:	341a      	adds	r4, #26
 80066ce:	42b5      	cmp	r5, r6
 80066d0:	d11a      	bne.n	8006708 <_printf_common+0xc8>
 80066d2:	2000      	movs	r0, #0
 80066d4:	e008      	b.n	80066e8 <_printf_common+0xa8>
 80066d6:	2301      	movs	r3, #1
 80066d8:	4652      	mov	r2, sl
 80066da:	4649      	mov	r1, r9
 80066dc:	4638      	mov	r0, r7
 80066de:	47c0      	blx	r8
 80066e0:	3001      	adds	r0, #1
 80066e2:	d103      	bne.n	80066ec <_printf_common+0xac>
 80066e4:	f04f 30ff 	mov.w	r0, #4294967295
 80066e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ec:	3501      	adds	r5, #1
 80066ee:	e7c6      	b.n	800667e <_printf_common+0x3e>
 80066f0:	18e1      	adds	r1, r4, r3
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	2030      	movs	r0, #48	; 0x30
 80066f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066fa:	4422      	add	r2, r4
 80066fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006700:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006704:	3302      	adds	r3, #2
 8006706:	e7c7      	b.n	8006698 <_printf_common+0x58>
 8006708:	2301      	movs	r3, #1
 800670a:	4622      	mov	r2, r4
 800670c:	4649      	mov	r1, r9
 800670e:	4638      	mov	r0, r7
 8006710:	47c0      	blx	r8
 8006712:	3001      	adds	r0, #1
 8006714:	d0e6      	beq.n	80066e4 <_printf_common+0xa4>
 8006716:	3601      	adds	r6, #1
 8006718:	e7d9      	b.n	80066ce <_printf_common+0x8e>
	...

0800671c <_printf_i>:
 800671c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006720:	7e0f      	ldrb	r7, [r1, #24]
 8006722:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006724:	2f78      	cmp	r7, #120	; 0x78
 8006726:	4691      	mov	r9, r2
 8006728:	4680      	mov	r8, r0
 800672a:	460c      	mov	r4, r1
 800672c:	469a      	mov	sl, r3
 800672e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006732:	d807      	bhi.n	8006744 <_printf_i+0x28>
 8006734:	2f62      	cmp	r7, #98	; 0x62
 8006736:	d80a      	bhi.n	800674e <_printf_i+0x32>
 8006738:	2f00      	cmp	r7, #0
 800673a:	f000 80d4 	beq.w	80068e6 <_printf_i+0x1ca>
 800673e:	2f58      	cmp	r7, #88	; 0x58
 8006740:	f000 80c0 	beq.w	80068c4 <_printf_i+0x1a8>
 8006744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006748:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800674c:	e03a      	b.n	80067c4 <_printf_i+0xa8>
 800674e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006752:	2b15      	cmp	r3, #21
 8006754:	d8f6      	bhi.n	8006744 <_printf_i+0x28>
 8006756:	a101      	add	r1, pc, #4	; (adr r1, 800675c <_printf_i+0x40>)
 8006758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800675c:	080067b5 	.word	0x080067b5
 8006760:	080067c9 	.word	0x080067c9
 8006764:	08006745 	.word	0x08006745
 8006768:	08006745 	.word	0x08006745
 800676c:	08006745 	.word	0x08006745
 8006770:	08006745 	.word	0x08006745
 8006774:	080067c9 	.word	0x080067c9
 8006778:	08006745 	.word	0x08006745
 800677c:	08006745 	.word	0x08006745
 8006780:	08006745 	.word	0x08006745
 8006784:	08006745 	.word	0x08006745
 8006788:	080068cd 	.word	0x080068cd
 800678c:	080067f5 	.word	0x080067f5
 8006790:	08006887 	.word	0x08006887
 8006794:	08006745 	.word	0x08006745
 8006798:	08006745 	.word	0x08006745
 800679c:	080068ef 	.word	0x080068ef
 80067a0:	08006745 	.word	0x08006745
 80067a4:	080067f5 	.word	0x080067f5
 80067a8:	08006745 	.word	0x08006745
 80067ac:	08006745 	.word	0x08006745
 80067b0:	0800688f 	.word	0x0800688f
 80067b4:	682b      	ldr	r3, [r5, #0]
 80067b6:	1d1a      	adds	r2, r3, #4
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	602a      	str	r2, [r5, #0]
 80067bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067c4:	2301      	movs	r3, #1
 80067c6:	e09f      	b.n	8006908 <_printf_i+0x1ec>
 80067c8:	6820      	ldr	r0, [r4, #0]
 80067ca:	682b      	ldr	r3, [r5, #0]
 80067cc:	0607      	lsls	r7, r0, #24
 80067ce:	f103 0104 	add.w	r1, r3, #4
 80067d2:	6029      	str	r1, [r5, #0]
 80067d4:	d501      	bpl.n	80067da <_printf_i+0xbe>
 80067d6:	681e      	ldr	r6, [r3, #0]
 80067d8:	e003      	b.n	80067e2 <_printf_i+0xc6>
 80067da:	0646      	lsls	r6, r0, #25
 80067dc:	d5fb      	bpl.n	80067d6 <_printf_i+0xba>
 80067de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80067e2:	2e00      	cmp	r6, #0
 80067e4:	da03      	bge.n	80067ee <_printf_i+0xd2>
 80067e6:	232d      	movs	r3, #45	; 0x2d
 80067e8:	4276      	negs	r6, r6
 80067ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067ee:	485a      	ldr	r0, [pc, #360]	; (8006958 <_printf_i+0x23c>)
 80067f0:	230a      	movs	r3, #10
 80067f2:	e012      	b.n	800681a <_printf_i+0xfe>
 80067f4:	682b      	ldr	r3, [r5, #0]
 80067f6:	6820      	ldr	r0, [r4, #0]
 80067f8:	1d19      	adds	r1, r3, #4
 80067fa:	6029      	str	r1, [r5, #0]
 80067fc:	0605      	lsls	r5, r0, #24
 80067fe:	d501      	bpl.n	8006804 <_printf_i+0xe8>
 8006800:	681e      	ldr	r6, [r3, #0]
 8006802:	e002      	b.n	800680a <_printf_i+0xee>
 8006804:	0641      	lsls	r1, r0, #25
 8006806:	d5fb      	bpl.n	8006800 <_printf_i+0xe4>
 8006808:	881e      	ldrh	r6, [r3, #0]
 800680a:	4853      	ldr	r0, [pc, #332]	; (8006958 <_printf_i+0x23c>)
 800680c:	2f6f      	cmp	r7, #111	; 0x6f
 800680e:	bf0c      	ite	eq
 8006810:	2308      	moveq	r3, #8
 8006812:	230a      	movne	r3, #10
 8006814:	2100      	movs	r1, #0
 8006816:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800681a:	6865      	ldr	r5, [r4, #4]
 800681c:	60a5      	str	r5, [r4, #8]
 800681e:	2d00      	cmp	r5, #0
 8006820:	bfa2      	ittt	ge
 8006822:	6821      	ldrge	r1, [r4, #0]
 8006824:	f021 0104 	bicge.w	r1, r1, #4
 8006828:	6021      	strge	r1, [r4, #0]
 800682a:	b90e      	cbnz	r6, 8006830 <_printf_i+0x114>
 800682c:	2d00      	cmp	r5, #0
 800682e:	d04b      	beq.n	80068c8 <_printf_i+0x1ac>
 8006830:	4615      	mov	r5, r2
 8006832:	fbb6 f1f3 	udiv	r1, r6, r3
 8006836:	fb03 6711 	mls	r7, r3, r1, r6
 800683a:	5dc7      	ldrb	r7, [r0, r7]
 800683c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006840:	4637      	mov	r7, r6
 8006842:	42bb      	cmp	r3, r7
 8006844:	460e      	mov	r6, r1
 8006846:	d9f4      	bls.n	8006832 <_printf_i+0x116>
 8006848:	2b08      	cmp	r3, #8
 800684a:	d10b      	bne.n	8006864 <_printf_i+0x148>
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	07de      	lsls	r6, r3, #31
 8006850:	d508      	bpl.n	8006864 <_printf_i+0x148>
 8006852:	6923      	ldr	r3, [r4, #16]
 8006854:	6861      	ldr	r1, [r4, #4]
 8006856:	4299      	cmp	r1, r3
 8006858:	bfde      	ittt	le
 800685a:	2330      	movle	r3, #48	; 0x30
 800685c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006860:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006864:	1b52      	subs	r2, r2, r5
 8006866:	6122      	str	r2, [r4, #16]
 8006868:	f8cd a000 	str.w	sl, [sp]
 800686c:	464b      	mov	r3, r9
 800686e:	aa03      	add	r2, sp, #12
 8006870:	4621      	mov	r1, r4
 8006872:	4640      	mov	r0, r8
 8006874:	f7ff fee4 	bl	8006640 <_printf_common>
 8006878:	3001      	adds	r0, #1
 800687a:	d14a      	bne.n	8006912 <_printf_i+0x1f6>
 800687c:	f04f 30ff 	mov.w	r0, #4294967295
 8006880:	b004      	add	sp, #16
 8006882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	f043 0320 	orr.w	r3, r3, #32
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	4833      	ldr	r0, [pc, #204]	; (800695c <_printf_i+0x240>)
 8006890:	2778      	movs	r7, #120	; 0x78
 8006892:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	6829      	ldr	r1, [r5, #0]
 800689a:	061f      	lsls	r7, r3, #24
 800689c:	f851 6b04 	ldr.w	r6, [r1], #4
 80068a0:	d402      	bmi.n	80068a8 <_printf_i+0x18c>
 80068a2:	065f      	lsls	r7, r3, #25
 80068a4:	bf48      	it	mi
 80068a6:	b2b6      	uxthmi	r6, r6
 80068a8:	07df      	lsls	r7, r3, #31
 80068aa:	bf48      	it	mi
 80068ac:	f043 0320 	orrmi.w	r3, r3, #32
 80068b0:	6029      	str	r1, [r5, #0]
 80068b2:	bf48      	it	mi
 80068b4:	6023      	strmi	r3, [r4, #0]
 80068b6:	b91e      	cbnz	r6, 80068c0 <_printf_i+0x1a4>
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	f023 0320 	bic.w	r3, r3, #32
 80068be:	6023      	str	r3, [r4, #0]
 80068c0:	2310      	movs	r3, #16
 80068c2:	e7a7      	b.n	8006814 <_printf_i+0xf8>
 80068c4:	4824      	ldr	r0, [pc, #144]	; (8006958 <_printf_i+0x23c>)
 80068c6:	e7e4      	b.n	8006892 <_printf_i+0x176>
 80068c8:	4615      	mov	r5, r2
 80068ca:	e7bd      	b.n	8006848 <_printf_i+0x12c>
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	6826      	ldr	r6, [r4, #0]
 80068d0:	6961      	ldr	r1, [r4, #20]
 80068d2:	1d18      	adds	r0, r3, #4
 80068d4:	6028      	str	r0, [r5, #0]
 80068d6:	0635      	lsls	r5, r6, #24
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	d501      	bpl.n	80068e0 <_printf_i+0x1c4>
 80068dc:	6019      	str	r1, [r3, #0]
 80068de:	e002      	b.n	80068e6 <_printf_i+0x1ca>
 80068e0:	0670      	lsls	r0, r6, #25
 80068e2:	d5fb      	bpl.n	80068dc <_printf_i+0x1c0>
 80068e4:	8019      	strh	r1, [r3, #0]
 80068e6:	2300      	movs	r3, #0
 80068e8:	6123      	str	r3, [r4, #16]
 80068ea:	4615      	mov	r5, r2
 80068ec:	e7bc      	b.n	8006868 <_printf_i+0x14c>
 80068ee:	682b      	ldr	r3, [r5, #0]
 80068f0:	1d1a      	adds	r2, r3, #4
 80068f2:	602a      	str	r2, [r5, #0]
 80068f4:	681d      	ldr	r5, [r3, #0]
 80068f6:	6862      	ldr	r2, [r4, #4]
 80068f8:	2100      	movs	r1, #0
 80068fa:	4628      	mov	r0, r5
 80068fc:	f7f9 fc68 	bl	80001d0 <memchr>
 8006900:	b108      	cbz	r0, 8006906 <_printf_i+0x1ea>
 8006902:	1b40      	subs	r0, r0, r5
 8006904:	6060      	str	r0, [r4, #4]
 8006906:	6863      	ldr	r3, [r4, #4]
 8006908:	6123      	str	r3, [r4, #16]
 800690a:	2300      	movs	r3, #0
 800690c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006910:	e7aa      	b.n	8006868 <_printf_i+0x14c>
 8006912:	6923      	ldr	r3, [r4, #16]
 8006914:	462a      	mov	r2, r5
 8006916:	4649      	mov	r1, r9
 8006918:	4640      	mov	r0, r8
 800691a:	47d0      	blx	sl
 800691c:	3001      	adds	r0, #1
 800691e:	d0ad      	beq.n	800687c <_printf_i+0x160>
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	079b      	lsls	r3, r3, #30
 8006924:	d413      	bmi.n	800694e <_printf_i+0x232>
 8006926:	68e0      	ldr	r0, [r4, #12]
 8006928:	9b03      	ldr	r3, [sp, #12]
 800692a:	4298      	cmp	r0, r3
 800692c:	bfb8      	it	lt
 800692e:	4618      	movlt	r0, r3
 8006930:	e7a6      	b.n	8006880 <_printf_i+0x164>
 8006932:	2301      	movs	r3, #1
 8006934:	4632      	mov	r2, r6
 8006936:	4649      	mov	r1, r9
 8006938:	4640      	mov	r0, r8
 800693a:	47d0      	blx	sl
 800693c:	3001      	adds	r0, #1
 800693e:	d09d      	beq.n	800687c <_printf_i+0x160>
 8006940:	3501      	adds	r5, #1
 8006942:	68e3      	ldr	r3, [r4, #12]
 8006944:	9903      	ldr	r1, [sp, #12]
 8006946:	1a5b      	subs	r3, r3, r1
 8006948:	42ab      	cmp	r3, r5
 800694a:	dcf2      	bgt.n	8006932 <_printf_i+0x216>
 800694c:	e7eb      	b.n	8006926 <_printf_i+0x20a>
 800694e:	2500      	movs	r5, #0
 8006950:	f104 0619 	add.w	r6, r4, #25
 8006954:	e7f5      	b.n	8006942 <_printf_i+0x226>
 8006956:	bf00      	nop
 8006958:	0800a89a 	.word	0x0800a89a
 800695c:	0800a8ab 	.word	0x0800a8ab

08006960 <_scanf_float>:
 8006960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006964:	b087      	sub	sp, #28
 8006966:	4617      	mov	r7, r2
 8006968:	9303      	str	r3, [sp, #12]
 800696a:	688b      	ldr	r3, [r1, #8]
 800696c:	1e5a      	subs	r2, r3, #1
 800696e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006972:	bf83      	ittte	hi
 8006974:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006978:	195b      	addhi	r3, r3, r5
 800697a:	9302      	strhi	r3, [sp, #8]
 800697c:	2300      	movls	r3, #0
 800697e:	bf86      	itte	hi
 8006980:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006984:	608b      	strhi	r3, [r1, #8]
 8006986:	9302      	strls	r3, [sp, #8]
 8006988:	680b      	ldr	r3, [r1, #0]
 800698a:	468b      	mov	fp, r1
 800698c:	2500      	movs	r5, #0
 800698e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006992:	f84b 3b1c 	str.w	r3, [fp], #28
 8006996:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800699a:	4680      	mov	r8, r0
 800699c:	460c      	mov	r4, r1
 800699e:	465e      	mov	r6, fp
 80069a0:	46aa      	mov	sl, r5
 80069a2:	46a9      	mov	r9, r5
 80069a4:	9501      	str	r5, [sp, #4]
 80069a6:	68a2      	ldr	r2, [r4, #8]
 80069a8:	b152      	cbz	r2, 80069c0 <_scanf_float+0x60>
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2b4e      	cmp	r3, #78	; 0x4e
 80069b0:	d864      	bhi.n	8006a7c <_scanf_float+0x11c>
 80069b2:	2b40      	cmp	r3, #64	; 0x40
 80069b4:	d83c      	bhi.n	8006a30 <_scanf_float+0xd0>
 80069b6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80069ba:	b2c8      	uxtb	r0, r1
 80069bc:	280e      	cmp	r0, #14
 80069be:	d93a      	bls.n	8006a36 <_scanf_float+0xd6>
 80069c0:	f1b9 0f00 	cmp.w	r9, #0
 80069c4:	d003      	beq.n	80069ce <_scanf_float+0x6e>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069d2:	f1ba 0f01 	cmp.w	sl, #1
 80069d6:	f200 8113 	bhi.w	8006c00 <_scanf_float+0x2a0>
 80069da:	455e      	cmp	r6, fp
 80069dc:	f200 8105 	bhi.w	8006bea <_scanf_float+0x28a>
 80069e0:	2501      	movs	r5, #1
 80069e2:	4628      	mov	r0, r5
 80069e4:	b007      	add	sp, #28
 80069e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80069ee:	2a0d      	cmp	r2, #13
 80069f0:	d8e6      	bhi.n	80069c0 <_scanf_float+0x60>
 80069f2:	a101      	add	r1, pc, #4	; (adr r1, 80069f8 <_scanf_float+0x98>)
 80069f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80069f8:	08006b37 	.word	0x08006b37
 80069fc:	080069c1 	.word	0x080069c1
 8006a00:	080069c1 	.word	0x080069c1
 8006a04:	080069c1 	.word	0x080069c1
 8006a08:	08006b97 	.word	0x08006b97
 8006a0c:	08006b6f 	.word	0x08006b6f
 8006a10:	080069c1 	.word	0x080069c1
 8006a14:	080069c1 	.word	0x080069c1
 8006a18:	08006b45 	.word	0x08006b45
 8006a1c:	080069c1 	.word	0x080069c1
 8006a20:	080069c1 	.word	0x080069c1
 8006a24:	080069c1 	.word	0x080069c1
 8006a28:	080069c1 	.word	0x080069c1
 8006a2c:	08006afd 	.word	0x08006afd
 8006a30:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006a34:	e7db      	b.n	80069ee <_scanf_float+0x8e>
 8006a36:	290e      	cmp	r1, #14
 8006a38:	d8c2      	bhi.n	80069c0 <_scanf_float+0x60>
 8006a3a:	a001      	add	r0, pc, #4	; (adr r0, 8006a40 <_scanf_float+0xe0>)
 8006a3c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006a40:	08006aef 	.word	0x08006aef
 8006a44:	080069c1 	.word	0x080069c1
 8006a48:	08006aef 	.word	0x08006aef
 8006a4c:	08006b83 	.word	0x08006b83
 8006a50:	080069c1 	.word	0x080069c1
 8006a54:	08006a9d 	.word	0x08006a9d
 8006a58:	08006ad9 	.word	0x08006ad9
 8006a5c:	08006ad9 	.word	0x08006ad9
 8006a60:	08006ad9 	.word	0x08006ad9
 8006a64:	08006ad9 	.word	0x08006ad9
 8006a68:	08006ad9 	.word	0x08006ad9
 8006a6c:	08006ad9 	.word	0x08006ad9
 8006a70:	08006ad9 	.word	0x08006ad9
 8006a74:	08006ad9 	.word	0x08006ad9
 8006a78:	08006ad9 	.word	0x08006ad9
 8006a7c:	2b6e      	cmp	r3, #110	; 0x6e
 8006a7e:	d809      	bhi.n	8006a94 <_scanf_float+0x134>
 8006a80:	2b60      	cmp	r3, #96	; 0x60
 8006a82:	d8b2      	bhi.n	80069ea <_scanf_float+0x8a>
 8006a84:	2b54      	cmp	r3, #84	; 0x54
 8006a86:	d077      	beq.n	8006b78 <_scanf_float+0x218>
 8006a88:	2b59      	cmp	r3, #89	; 0x59
 8006a8a:	d199      	bne.n	80069c0 <_scanf_float+0x60>
 8006a8c:	2d07      	cmp	r5, #7
 8006a8e:	d197      	bne.n	80069c0 <_scanf_float+0x60>
 8006a90:	2508      	movs	r5, #8
 8006a92:	e029      	b.n	8006ae8 <_scanf_float+0x188>
 8006a94:	2b74      	cmp	r3, #116	; 0x74
 8006a96:	d06f      	beq.n	8006b78 <_scanf_float+0x218>
 8006a98:	2b79      	cmp	r3, #121	; 0x79
 8006a9a:	e7f6      	b.n	8006a8a <_scanf_float+0x12a>
 8006a9c:	6821      	ldr	r1, [r4, #0]
 8006a9e:	05c8      	lsls	r0, r1, #23
 8006aa0:	d51a      	bpl.n	8006ad8 <_scanf_float+0x178>
 8006aa2:	9b02      	ldr	r3, [sp, #8]
 8006aa4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006aa8:	6021      	str	r1, [r4, #0]
 8006aaa:	f109 0901 	add.w	r9, r9, #1
 8006aae:	b11b      	cbz	r3, 8006ab8 <_scanf_float+0x158>
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	3201      	adds	r2, #1
 8006ab4:	9302      	str	r3, [sp, #8]
 8006ab6:	60a2      	str	r2, [r4, #8]
 8006ab8:	68a3      	ldr	r3, [r4, #8]
 8006aba:	3b01      	subs	r3, #1
 8006abc:	60a3      	str	r3, [r4, #8]
 8006abe:	6923      	ldr	r3, [r4, #16]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	6123      	str	r3, [r4, #16]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	607b      	str	r3, [r7, #4]
 8006acc:	f340 8084 	ble.w	8006bd8 <_scanf_float+0x278>
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	603b      	str	r3, [r7, #0]
 8006ad6:	e766      	b.n	80069a6 <_scanf_float+0x46>
 8006ad8:	eb1a 0f05 	cmn.w	sl, r5
 8006adc:	f47f af70 	bne.w	80069c0 <_scanf_float+0x60>
 8006ae0:	6822      	ldr	r2, [r4, #0]
 8006ae2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006ae6:	6022      	str	r2, [r4, #0]
 8006ae8:	f806 3b01 	strb.w	r3, [r6], #1
 8006aec:	e7e4      	b.n	8006ab8 <_scanf_float+0x158>
 8006aee:	6822      	ldr	r2, [r4, #0]
 8006af0:	0610      	lsls	r0, r2, #24
 8006af2:	f57f af65 	bpl.w	80069c0 <_scanf_float+0x60>
 8006af6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006afa:	e7f4      	b.n	8006ae6 <_scanf_float+0x186>
 8006afc:	f1ba 0f00 	cmp.w	sl, #0
 8006b00:	d10e      	bne.n	8006b20 <_scanf_float+0x1c0>
 8006b02:	f1b9 0f00 	cmp.w	r9, #0
 8006b06:	d10e      	bne.n	8006b26 <_scanf_float+0x1c6>
 8006b08:	6822      	ldr	r2, [r4, #0]
 8006b0a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006b0e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006b12:	d108      	bne.n	8006b26 <_scanf_float+0x1c6>
 8006b14:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b18:	6022      	str	r2, [r4, #0]
 8006b1a:	f04f 0a01 	mov.w	sl, #1
 8006b1e:	e7e3      	b.n	8006ae8 <_scanf_float+0x188>
 8006b20:	f1ba 0f02 	cmp.w	sl, #2
 8006b24:	d055      	beq.n	8006bd2 <_scanf_float+0x272>
 8006b26:	2d01      	cmp	r5, #1
 8006b28:	d002      	beq.n	8006b30 <_scanf_float+0x1d0>
 8006b2a:	2d04      	cmp	r5, #4
 8006b2c:	f47f af48 	bne.w	80069c0 <_scanf_float+0x60>
 8006b30:	3501      	adds	r5, #1
 8006b32:	b2ed      	uxtb	r5, r5
 8006b34:	e7d8      	b.n	8006ae8 <_scanf_float+0x188>
 8006b36:	f1ba 0f01 	cmp.w	sl, #1
 8006b3a:	f47f af41 	bne.w	80069c0 <_scanf_float+0x60>
 8006b3e:	f04f 0a02 	mov.w	sl, #2
 8006b42:	e7d1      	b.n	8006ae8 <_scanf_float+0x188>
 8006b44:	b97d      	cbnz	r5, 8006b66 <_scanf_float+0x206>
 8006b46:	f1b9 0f00 	cmp.w	r9, #0
 8006b4a:	f47f af3c 	bne.w	80069c6 <_scanf_float+0x66>
 8006b4e:	6822      	ldr	r2, [r4, #0]
 8006b50:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006b54:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006b58:	f47f af39 	bne.w	80069ce <_scanf_float+0x6e>
 8006b5c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b60:	6022      	str	r2, [r4, #0]
 8006b62:	2501      	movs	r5, #1
 8006b64:	e7c0      	b.n	8006ae8 <_scanf_float+0x188>
 8006b66:	2d03      	cmp	r5, #3
 8006b68:	d0e2      	beq.n	8006b30 <_scanf_float+0x1d0>
 8006b6a:	2d05      	cmp	r5, #5
 8006b6c:	e7de      	b.n	8006b2c <_scanf_float+0x1cc>
 8006b6e:	2d02      	cmp	r5, #2
 8006b70:	f47f af26 	bne.w	80069c0 <_scanf_float+0x60>
 8006b74:	2503      	movs	r5, #3
 8006b76:	e7b7      	b.n	8006ae8 <_scanf_float+0x188>
 8006b78:	2d06      	cmp	r5, #6
 8006b7a:	f47f af21 	bne.w	80069c0 <_scanf_float+0x60>
 8006b7e:	2507      	movs	r5, #7
 8006b80:	e7b2      	b.n	8006ae8 <_scanf_float+0x188>
 8006b82:	6822      	ldr	r2, [r4, #0]
 8006b84:	0591      	lsls	r1, r2, #22
 8006b86:	f57f af1b 	bpl.w	80069c0 <_scanf_float+0x60>
 8006b8a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006b8e:	6022      	str	r2, [r4, #0]
 8006b90:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b94:	e7a8      	b.n	8006ae8 <_scanf_float+0x188>
 8006b96:	6822      	ldr	r2, [r4, #0]
 8006b98:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006b9c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006ba0:	d006      	beq.n	8006bb0 <_scanf_float+0x250>
 8006ba2:	0550      	lsls	r0, r2, #21
 8006ba4:	f57f af0c 	bpl.w	80069c0 <_scanf_float+0x60>
 8006ba8:	f1b9 0f00 	cmp.w	r9, #0
 8006bac:	f43f af0f 	beq.w	80069ce <_scanf_float+0x6e>
 8006bb0:	0591      	lsls	r1, r2, #22
 8006bb2:	bf58      	it	pl
 8006bb4:	9901      	ldrpl	r1, [sp, #4]
 8006bb6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006bba:	bf58      	it	pl
 8006bbc:	eba9 0101 	subpl.w	r1, r9, r1
 8006bc0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006bc4:	bf58      	it	pl
 8006bc6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006bca:	6022      	str	r2, [r4, #0]
 8006bcc:	f04f 0900 	mov.w	r9, #0
 8006bd0:	e78a      	b.n	8006ae8 <_scanf_float+0x188>
 8006bd2:	f04f 0a03 	mov.w	sl, #3
 8006bd6:	e787      	b.n	8006ae8 <_scanf_float+0x188>
 8006bd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006bdc:	4639      	mov	r1, r7
 8006bde:	4640      	mov	r0, r8
 8006be0:	4798      	blx	r3
 8006be2:	2800      	cmp	r0, #0
 8006be4:	f43f aedf 	beq.w	80069a6 <_scanf_float+0x46>
 8006be8:	e6ea      	b.n	80069c0 <_scanf_float+0x60>
 8006bea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006bf2:	463a      	mov	r2, r7
 8006bf4:	4640      	mov	r0, r8
 8006bf6:	4798      	blx	r3
 8006bf8:	6923      	ldr	r3, [r4, #16]
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	6123      	str	r3, [r4, #16]
 8006bfe:	e6ec      	b.n	80069da <_scanf_float+0x7a>
 8006c00:	1e6b      	subs	r3, r5, #1
 8006c02:	2b06      	cmp	r3, #6
 8006c04:	d825      	bhi.n	8006c52 <_scanf_float+0x2f2>
 8006c06:	2d02      	cmp	r5, #2
 8006c08:	d836      	bhi.n	8006c78 <_scanf_float+0x318>
 8006c0a:	455e      	cmp	r6, fp
 8006c0c:	f67f aee8 	bls.w	80069e0 <_scanf_float+0x80>
 8006c10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c14:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c18:	463a      	mov	r2, r7
 8006c1a:	4640      	mov	r0, r8
 8006c1c:	4798      	blx	r3
 8006c1e:	6923      	ldr	r3, [r4, #16]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	6123      	str	r3, [r4, #16]
 8006c24:	e7f1      	b.n	8006c0a <_scanf_float+0x2aa>
 8006c26:	9802      	ldr	r0, [sp, #8]
 8006c28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c2c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006c30:	9002      	str	r0, [sp, #8]
 8006c32:	463a      	mov	r2, r7
 8006c34:	4640      	mov	r0, r8
 8006c36:	4798      	blx	r3
 8006c38:	6923      	ldr	r3, [r4, #16]
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	6123      	str	r3, [r4, #16]
 8006c3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c42:	fa5f fa8a 	uxtb.w	sl, sl
 8006c46:	f1ba 0f02 	cmp.w	sl, #2
 8006c4a:	d1ec      	bne.n	8006c26 <_scanf_float+0x2c6>
 8006c4c:	3d03      	subs	r5, #3
 8006c4e:	b2ed      	uxtb	r5, r5
 8006c50:	1b76      	subs	r6, r6, r5
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	05da      	lsls	r2, r3, #23
 8006c56:	d52f      	bpl.n	8006cb8 <_scanf_float+0x358>
 8006c58:	055b      	lsls	r3, r3, #21
 8006c5a:	d510      	bpl.n	8006c7e <_scanf_float+0x31e>
 8006c5c:	455e      	cmp	r6, fp
 8006c5e:	f67f aebf 	bls.w	80069e0 <_scanf_float+0x80>
 8006c62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c6a:	463a      	mov	r2, r7
 8006c6c:	4640      	mov	r0, r8
 8006c6e:	4798      	blx	r3
 8006c70:	6923      	ldr	r3, [r4, #16]
 8006c72:	3b01      	subs	r3, #1
 8006c74:	6123      	str	r3, [r4, #16]
 8006c76:	e7f1      	b.n	8006c5c <_scanf_float+0x2fc>
 8006c78:	46aa      	mov	sl, r5
 8006c7a:	9602      	str	r6, [sp, #8]
 8006c7c:	e7df      	b.n	8006c3e <_scanf_float+0x2de>
 8006c7e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006c82:	6923      	ldr	r3, [r4, #16]
 8006c84:	2965      	cmp	r1, #101	; 0x65
 8006c86:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c8a:	f106 35ff 	add.w	r5, r6, #4294967295
 8006c8e:	6123      	str	r3, [r4, #16]
 8006c90:	d00c      	beq.n	8006cac <_scanf_float+0x34c>
 8006c92:	2945      	cmp	r1, #69	; 0x45
 8006c94:	d00a      	beq.n	8006cac <_scanf_float+0x34c>
 8006c96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c9a:	463a      	mov	r2, r7
 8006c9c:	4640      	mov	r0, r8
 8006c9e:	4798      	blx	r3
 8006ca0:	6923      	ldr	r3, [r4, #16]
 8006ca2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	1eb5      	subs	r5, r6, #2
 8006caa:	6123      	str	r3, [r4, #16]
 8006cac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cb0:	463a      	mov	r2, r7
 8006cb2:	4640      	mov	r0, r8
 8006cb4:	4798      	blx	r3
 8006cb6:	462e      	mov	r6, r5
 8006cb8:	6825      	ldr	r5, [r4, #0]
 8006cba:	f015 0510 	ands.w	r5, r5, #16
 8006cbe:	d158      	bne.n	8006d72 <_scanf_float+0x412>
 8006cc0:	7035      	strb	r5, [r6, #0]
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ccc:	d11c      	bne.n	8006d08 <_scanf_float+0x3a8>
 8006cce:	9b01      	ldr	r3, [sp, #4]
 8006cd0:	454b      	cmp	r3, r9
 8006cd2:	eba3 0209 	sub.w	r2, r3, r9
 8006cd6:	d124      	bne.n	8006d22 <_scanf_float+0x3c2>
 8006cd8:	2200      	movs	r2, #0
 8006cda:	4659      	mov	r1, fp
 8006cdc:	4640      	mov	r0, r8
 8006cde:	f002 fc1b 	bl	8009518 <_strtod_r>
 8006ce2:	9b03      	ldr	r3, [sp, #12]
 8006ce4:	6821      	ldr	r1, [r4, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f011 0f02 	tst.w	r1, #2
 8006cec:	ec57 6b10 	vmov	r6, r7, d0
 8006cf0:	f103 0204 	add.w	r2, r3, #4
 8006cf4:	d020      	beq.n	8006d38 <_scanf_float+0x3d8>
 8006cf6:	9903      	ldr	r1, [sp, #12]
 8006cf8:	600a      	str	r2, [r1, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	e9c3 6700 	strd	r6, r7, [r3]
 8006d00:	68e3      	ldr	r3, [r4, #12]
 8006d02:	3301      	adds	r3, #1
 8006d04:	60e3      	str	r3, [r4, #12]
 8006d06:	e66c      	b.n	80069e2 <_scanf_float+0x82>
 8006d08:	9b04      	ldr	r3, [sp, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d0e4      	beq.n	8006cd8 <_scanf_float+0x378>
 8006d0e:	9905      	ldr	r1, [sp, #20]
 8006d10:	230a      	movs	r3, #10
 8006d12:	462a      	mov	r2, r5
 8006d14:	3101      	adds	r1, #1
 8006d16:	4640      	mov	r0, r8
 8006d18:	f002 fc86 	bl	8009628 <_strtol_r>
 8006d1c:	9b04      	ldr	r3, [sp, #16]
 8006d1e:	9e05      	ldr	r6, [sp, #20]
 8006d20:	1ac2      	subs	r2, r0, r3
 8006d22:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006d26:	429e      	cmp	r6, r3
 8006d28:	bf28      	it	cs
 8006d2a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006d2e:	4912      	ldr	r1, [pc, #72]	; (8006d78 <_scanf_float+0x418>)
 8006d30:	4630      	mov	r0, r6
 8006d32:	f000 f8d5 	bl	8006ee0 <siprintf>
 8006d36:	e7cf      	b.n	8006cd8 <_scanf_float+0x378>
 8006d38:	f011 0f04 	tst.w	r1, #4
 8006d3c:	9903      	ldr	r1, [sp, #12]
 8006d3e:	600a      	str	r2, [r1, #0]
 8006d40:	d1db      	bne.n	8006cfa <_scanf_float+0x39a>
 8006d42:	f8d3 8000 	ldr.w	r8, [r3]
 8006d46:	ee10 2a10 	vmov	r2, s0
 8006d4a:	ee10 0a10 	vmov	r0, s0
 8006d4e:	463b      	mov	r3, r7
 8006d50:	4639      	mov	r1, r7
 8006d52:	f7f9 feeb 	bl	8000b2c <__aeabi_dcmpun>
 8006d56:	b128      	cbz	r0, 8006d64 <_scanf_float+0x404>
 8006d58:	4808      	ldr	r0, [pc, #32]	; (8006d7c <_scanf_float+0x41c>)
 8006d5a:	f000 f9a3 	bl	80070a4 <nanf>
 8006d5e:	ed88 0a00 	vstr	s0, [r8]
 8006d62:	e7cd      	b.n	8006d00 <_scanf_float+0x3a0>
 8006d64:	4630      	mov	r0, r6
 8006d66:	4639      	mov	r1, r7
 8006d68:	f7f9 ff3e 	bl	8000be8 <__aeabi_d2f>
 8006d6c:	f8c8 0000 	str.w	r0, [r8]
 8006d70:	e7c6      	b.n	8006d00 <_scanf_float+0x3a0>
 8006d72:	2500      	movs	r5, #0
 8006d74:	e635      	b.n	80069e2 <_scanf_float+0x82>
 8006d76:	bf00      	nop
 8006d78:	0800a8bc 	.word	0x0800a8bc
 8006d7c:	0800ac4d 	.word	0x0800ac4d

08006d80 <std>:
 8006d80:	2300      	movs	r3, #0
 8006d82:	b510      	push	{r4, lr}
 8006d84:	4604      	mov	r4, r0
 8006d86:	e9c0 3300 	strd	r3, r3, [r0]
 8006d8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d8e:	6083      	str	r3, [r0, #8]
 8006d90:	8181      	strh	r1, [r0, #12]
 8006d92:	6643      	str	r3, [r0, #100]	; 0x64
 8006d94:	81c2      	strh	r2, [r0, #14]
 8006d96:	6183      	str	r3, [r0, #24]
 8006d98:	4619      	mov	r1, r3
 8006d9a:	2208      	movs	r2, #8
 8006d9c:	305c      	adds	r0, #92	; 0x5c
 8006d9e:	f000 f902 	bl	8006fa6 <memset>
 8006da2:	4b05      	ldr	r3, [pc, #20]	; (8006db8 <std+0x38>)
 8006da4:	6263      	str	r3, [r4, #36]	; 0x24
 8006da6:	4b05      	ldr	r3, [pc, #20]	; (8006dbc <std+0x3c>)
 8006da8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006daa:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <std+0x40>)
 8006dac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006dae:	4b05      	ldr	r3, [pc, #20]	; (8006dc4 <std+0x44>)
 8006db0:	6224      	str	r4, [r4, #32]
 8006db2:	6323      	str	r3, [r4, #48]	; 0x30
 8006db4:	bd10      	pop	{r4, pc}
 8006db6:	bf00      	nop
 8006db8:	08006f21 	.word	0x08006f21
 8006dbc:	08006f43 	.word	0x08006f43
 8006dc0:	08006f7b 	.word	0x08006f7b
 8006dc4:	08006f9f 	.word	0x08006f9f

08006dc8 <stdio_exit_handler>:
 8006dc8:	4a02      	ldr	r2, [pc, #8]	; (8006dd4 <stdio_exit_handler+0xc>)
 8006dca:	4903      	ldr	r1, [pc, #12]	; (8006dd8 <stdio_exit_handler+0x10>)
 8006dcc:	4803      	ldr	r0, [pc, #12]	; (8006ddc <stdio_exit_handler+0x14>)
 8006dce:	f000 b869 	b.w	8006ea4 <_fwalk_sglue>
 8006dd2:	bf00      	nop
 8006dd4:	2000000c 	.word	0x2000000c
 8006dd8:	080099e9 	.word	0x080099e9
 8006ddc:	20000018 	.word	0x20000018

08006de0 <cleanup_stdio>:
 8006de0:	6841      	ldr	r1, [r0, #4]
 8006de2:	4b0c      	ldr	r3, [pc, #48]	; (8006e14 <cleanup_stdio+0x34>)
 8006de4:	4299      	cmp	r1, r3
 8006de6:	b510      	push	{r4, lr}
 8006de8:	4604      	mov	r4, r0
 8006dea:	d001      	beq.n	8006df0 <cleanup_stdio+0x10>
 8006dec:	f002 fdfc 	bl	80099e8 <_fflush_r>
 8006df0:	68a1      	ldr	r1, [r4, #8]
 8006df2:	4b09      	ldr	r3, [pc, #36]	; (8006e18 <cleanup_stdio+0x38>)
 8006df4:	4299      	cmp	r1, r3
 8006df6:	d002      	beq.n	8006dfe <cleanup_stdio+0x1e>
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f002 fdf5 	bl	80099e8 <_fflush_r>
 8006dfe:	68e1      	ldr	r1, [r4, #12]
 8006e00:	4b06      	ldr	r3, [pc, #24]	; (8006e1c <cleanup_stdio+0x3c>)
 8006e02:	4299      	cmp	r1, r3
 8006e04:	d004      	beq.n	8006e10 <cleanup_stdio+0x30>
 8006e06:	4620      	mov	r0, r4
 8006e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e0c:	f002 bdec 	b.w	80099e8 <_fflush_r>
 8006e10:	bd10      	pop	{r4, pc}
 8006e12:	bf00      	nop
 8006e14:	200002ec 	.word	0x200002ec
 8006e18:	20000354 	.word	0x20000354
 8006e1c:	200003bc 	.word	0x200003bc

08006e20 <global_stdio_init.part.0>:
 8006e20:	b510      	push	{r4, lr}
 8006e22:	4b0b      	ldr	r3, [pc, #44]	; (8006e50 <global_stdio_init.part.0+0x30>)
 8006e24:	4c0b      	ldr	r4, [pc, #44]	; (8006e54 <global_stdio_init.part.0+0x34>)
 8006e26:	4a0c      	ldr	r2, [pc, #48]	; (8006e58 <global_stdio_init.part.0+0x38>)
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	2104      	movs	r1, #4
 8006e30:	f7ff ffa6 	bl	8006d80 <std>
 8006e34:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006e38:	2201      	movs	r2, #1
 8006e3a:	2109      	movs	r1, #9
 8006e3c:	f7ff ffa0 	bl	8006d80 <std>
 8006e40:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006e44:	2202      	movs	r2, #2
 8006e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e4a:	2112      	movs	r1, #18
 8006e4c:	f7ff bf98 	b.w	8006d80 <std>
 8006e50:	20000424 	.word	0x20000424
 8006e54:	200002ec 	.word	0x200002ec
 8006e58:	08006dc9 	.word	0x08006dc9

08006e5c <__sfp_lock_acquire>:
 8006e5c:	4801      	ldr	r0, [pc, #4]	; (8006e64 <__sfp_lock_acquire+0x8>)
 8006e5e:	f000 b91f 	b.w	80070a0 <__retarget_lock_acquire_recursive>
 8006e62:	bf00      	nop
 8006e64:	2000042d 	.word	0x2000042d

08006e68 <__sfp_lock_release>:
 8006e68:	4801      	ldr	r0, [pc, #4]	; (8006e70 <__sfp_lock_release+0x8>)
 8006e6a:	f000 b91a 	b.w	80070a2 <__retarget_lock_release_recursive>
 8006e6e:	bf00      	nop
 8006e70:	2000042d 	.word	0x2000042d

08006e74 <__sinit>:
 8006e74:	b510      	push	{r4, lr}
 8006e76:	4604      	mov	r4, r0
 8006e78:	f7ff fff0 	bl	8006e5c <__sfp_lock_acquire>
 8006e7c:	6a23      	ldr	r3, [r4, #32]
 8006e7e:	b11b      	cbz	r3, 8006e88 <__sinit+0x14>
 8006e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e84:	f7ff bff0 	b.w	8006e68 <__sfp_lock_release>
 8006e88:	4b04      	ldr	r3, [pc, #16]	; (8006e9c <__sinit+0x28>)
 8006e8a:	6223      	str	r3, [r4, #32]
 8006e8c:	4b04      	ldr	r3, [pc, #16]	; (8006ea0 <__sinit+0x2c>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1f5      	bne.n	8006e80 <__sinit+0xc>
 8006e94:	f7ff ffc4 	bl	8006e20 <global_stdio_init.part.0>
 8006e98:	e7f2      	b.n	8006e80 <__sinit+0xc>
 8006e9a:	bf00      	nop
 8006e9c:	08006de1 	.word	0x08006de1
 8006ea0:	20000424 	.word	0x20000424

08006ea4 <_fwalk_sglue>:
 8006ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ea8:	4607      	mov	r7, r0
 8006eaa:	4688      	mov	r8, r1
 8006eac:	4614      	mov	r4, r2
 8006eae:	2600      	movs	r6, #0
 8006eb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006eb4:	f1b9 0901 	subs.w	r9, r9, #1
 8006eb8:	d505      	bpl.n	8006ec6 <_fwalk_sglue+0x22>
 8006eba:	6824      	ldr	r4, [r4, #0]
 8006ebc:	2c00      	cmp	r4, #0
 8006ebe:	d1f7      	bne.n	8006eb0 <_fwalk_sglue+0xc>
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ec6:	89ab      	ldrh	r3, [r5, #12]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d907      	bls.n	8006edc <_fwalk_sglue+0x38>
 8006ecc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	d003      	beq.n	8006edc <_fwalk_sglue+0x38>
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	4638      	mov	r0, r7
 8006ed8:	47c0      	blx	r8
 8006eda:	4306      	orrs	r6, r0
 8006edc:	3568      	adds	r5, #104	; 0x68
 8006ede:	e7e9      	b.n	8006eb4 <_fwalk_sglue+0x10>

08006ee0 <siprintf>:
 8006ee0:	b40e      	push	{r1, r2, r3}
 8006ee2:	b500      	push	{lr}
 8006ee4:	b09c      	sub	sp, #112	; 0x70
 8006ee6:	ab1d      	add	r3, sp, #116	; 0x74
 8006ee8:	9002      	str	r0, [sp, #8]
 8006eea:	9006      	str	r0, [sp, #24]
 8006eec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ef0:	4809      	ldr	r0, [pc, #36]	; (8006f18 <siprintf+0x38>)
 8006ef2:	9107      	str	r1, [sp, #28]
 8006ef4:	9104      	str	r1, [sp, #16]
 8006ef6:	4909      	ldr	r1, [pc, #36]	; (8006f1c <siprintf+0x3c>)
 8006ef8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006efc:	9105      	str	r1, [sp, #20]
 8006efe:	6800      	ldr	r0, [r0, #0]
 8006f00:	9301      	str	r3, [sp, #4]
 8006f02:	a902      	add	r1, sp, #8
 8006f04:	f002 fbec 	bl	80096e0 <_svfiprintf_r>
 8006f08:	9b02      	ldr	r3, [sp, #8]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	b01c      	add	sp, #112	; 0x70
 8006f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f14:	b003      	add	sp, #12
 8006f16:	4770      	bx	lr
 8006f18:	20000064 	.word	0x20000064
 8006f1c:	ffff0208 	.word	0xffff0208

08006f20 <__sread>:
 8006f20:	b510      	push	{r4, lr}
 8006f22:	460c      	mov	r4, r1
 8006f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f28:	f000 f86c 	bl	8007004 <_read_r>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	bfab      	itete	ge
 8006f30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f32:	89a3      	ldrhlt	r3, [r4, #12]
 8006f34:	181b      	addge	r3, r3, r0
 8006f36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f3a:	bfac      	ite	ge
 8006f3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f3e:	81a3      	strhlt	r3, [r4, #12]
 8006f40:	bd10      	pop	{r4, pc}

08006f42 <__swrite>:
 8006f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f46:	461f      	mov	r7, r3
 8006f48:	898b      	ldrh	r3, [r1, #12]
 8006f4a:	05db      	lsls	r3, r3, #23
 8006f4c:	4605      	mov	r5, r0
 8006f4e:	460c      	mov	r4, r1
 8006f50:	4616      	mov	r6, r2
 8006f52:	d505      	bpl.n	8006f60 <__swrite+0x1e>
 8006f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f58:	2302      	movs	r3, #2
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f000 f840 	bl	8006fe0 <_lseek_r>
 8006f60:	89a3      	ldrh	r3, [r4, #12]
 8006f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f6a:	81a3      	strh	r3, [r4, #12]
 8006f6c:	4632      	mov	r2, r6
 8006f6e:	463b      	mov	r3, r7
 8006f70:	4628      	mov	r0, r5
 8006f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f76:	f000 b857 	b.w	8007028 <_write_r>

08006f7a <__sseek>:
 8006f7a:	b510      	push	{r4, lr}
 8006f7c:	460c      	mov	r4, r1
 8006f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f82:	f000 f82d 	bl	8006fe0 <_lseek_r>
 8006f86:	1c43      	adds	r3, r0, #1
 8006f88:	89a3      	ldrh	r3, [r4, #12]
 8006f8a:	bf15      	itete	ne
 8006f8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f96:	81a3      	strheq	r3, [r4, #12]
 8006f98:	bf18      	it	ne
 8006f9a:	81a3      	strhne	r3, [r4, #12]
 8006f9c:	bd10      	pop	{r4, pc}

08006f9e <__sclose>:
 8006f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa2:	f000 b80d 	b.w	8006fc0 <_close_r>

08006fa6 <memset>:
 8006fa6:	4402      	add	r2, r0
 8006fa8:	4603      	mov	r3, r0
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d100      	bne.n	8006fb0 <memset+0xa>
 8006fae:	4770      	bx	lr
 8006fb0:	f803 1b01 	strb.w	r1, [r3], #1
 8006fb4:	e7f9      	b.n	8006faa <memset+0x4>
	...

08006fb8 <_localeconv_r>:
 8006fb8:	4800      	ldr	r0, [pc, #0]	; (8006fbc <_localeconv_r+0x4>)
 8006fba:	4770      	bx	lr
 8006fbc:	20000158 	.word	0x20000158

08006fc0 <_close_r>:
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	4d06      	ldr	r5, [pc, #24]	; (8006fdc <_close_r+0x1c>)
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	4608      	mov	r0, r1
 8006fca:	602b      	str	r3, [r5, #0]
 8006fcc:	f7fa fb51 	bl	8001672 <_close>
 8006fd0:	1c43      	adds	r3, r0, #1
 8006fd2:	d102      	bne.n	8006fda <_close_r+0x1a>
 8006fd4:	682b      	ldr	r3, [r5, #0]
 8006fd6:	b103      	cbz	r3, 8006fda <_close_r+0x1a>
 8006fd8:	6023      	str	r3, [r4, #0]
 8006fda:	bd38      	pop	{r3, r4, r5, pc}
 8006fdc:	20000428 	.word	0x20000428

08006fe0 <_lseek_r>:
 8006fe0:	b538      	push	{r3, r4, r5, lr}
 8006fe2:	4d07      	ldr	r5, [pc, #28]	; (8007000 <_lseek_r+0x20>)
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	4608      	mov	r0, r1
 8006fe8:	4611      	mov	r1, r2
 8006fea:	2200      	movs	r2, #0
 8006fec:	602a      	str	r2, [r5, #0]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	f7fa fb66 	bl	80016c0 <_lseek>
 8006ff4:	1c43      	adds	r3, r0, #1
 8006ff6:	d102      	bne.n	8006ffe <_lseek_r+0x1e>
 8006ff8:	682b      	ldr	r3, [r5, #0]
 8006ffa:	b103      	cbz	r3, 8006ffe <_lseek_r+0x1e>
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	bd38      	pop	{r3, r4, r5, pc}
 8007000:	20000428 	.word	0x20000428

08007004 <_read_r>:
 8007004:	b538      	push	{r3, r4, r5, lr}
 8007006:	4d07      	ldr	r5, [pc, #28]	; (8007024 <_read_r+0x20>)
 8007008:	4604      	mov	r4, r0
 800700a:	4608      	mov	r0, r1
 800700c:	4611      	mov	r1, r2
 800700e:	2200      	movs	r2, #0
 8007010:	602a      	str	r2, [r5, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	f7fa faf4 	bl	8001600 <_read>
 8007018:	1c43      	adds	r3, r0, #1
 800701a:	d102      	bne.n	8007022 <_read_r+0x1e>
 800701c:	682b      	ldr	r3, [r5, #0]
 800701e:	b103      	cbz	r3, 8007022 <_read_r+0x1e>
 8007020:	6023      	str	r3, [r4, #0]
 8007022:	bd38      	pop	{r3, r4, r5, pc}
 8007024:	20000428 	.word	0x20000428

08007028 <_write_r>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	4d07      	ldr	r5, [pc, #28]	; (8007048 <_write_r+0x20>)
 800702c:	4604      	mov	r4, r0
 800702e:	4608      	mov	r0, r1
 8007030:	4611      	mov	r1, r2
 8007032:	2200      	movs	r2, #0
 8007034:	602a      	str	r2, [r5, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	f7fa faff 	bl	800163a <_write>
 800703c:	1c43      	adds	r3, r0, #1
 800703e:	d102      	bne.n	8007046 <_write_r+0x1e>
 8007040:	682b      	ldr	r3, [r5, #0]
 8007042:	b103      	cbz	r3, 8007046 <_write_r+0x1e>
 8007044:	6023      	str	r3, [r4, #0]
 8007046:	bd38      	pop	{r3, r4, r5, pc}
 8007048:	20000428 	.word	0x20000428

0800704c <__errno>:
 800704c:	4b01      	ldr	r3, [pc, #4]	; (8007054 <__errno+0x8>)
 800704e:	6818      	ldr	r0, [r3, #0]
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	20000064 	.word	0x20000064

08007058 <__libc_init_array>:
 8007058:	b570      	push	{r4, r5, r6, lr}
 800705a:	4d0d      	ldr	r5, [pc, #52]	; (8007090 <__libc_init_array+0x38>)
 800705c:	4c0d      	ldr	r4, [pc, #52]	; (8007094 <__libc_init_array+0x3c>)
 800705e:	1b64      	subs	r4, r4, r5
 8007060:	10a4      	asrs	r4, r4, #2
 8007062:	2600      	movs	r6, #0
 8007064:	42a6      	cmp	r6, r4
 8007066:	d109      	bne.n	800707c <__libc_init_array+0x24>
 8007068:	4d0b      	ldr	r5, [pc, #44]	; (8007098 <__libc_init_array+0x40>)
 800706a:	4c0c      	ldr	r4, [pc, #48]	; (800709c <__libc_init_array+0x44>)
 800706c:	f003 fbd4 	bl	800a818 <_init>
 8007070:	1b64      	subs	r4, r4, r5
 8007072:	10a4      	asrs	r4, r4, #2
 8007074:	2600      	movs	r6, #0
 8007076:	42a6      	cmp	r6, r4
 8007078:	d105      	bne.n	8007086 <__libc_init_array+0x2e>
 800707a:	bd70      	pop	{r4, r5, r6, pc}
 800707c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007080:	4798      	blx	r3
 8007082:	3601      	adds	r6, #1
 8007084:	e7ee      	b.n	8007064 <__libc_init_array+0xc>
 8007086:	f855 3b04 	ldr.w	r3, [r5], #4
 800708a:	4798      	blx	r3
 800708c:	3601      	adds	r6, #1
 800708e:	e7f2      	b.n	8007076 <__libc_init_array+0x1e>
 8007090:	0800acb8 	.word	0x0800acb8
 8007094:	0800acb8 	.word	0x0800acb8
 8007098:	0800acb8 	.word	0x0800acb8
 800709c:	0800acbc 	.word	0x0800acbc

080070a0 <__retarget_lock_acquire_recursive>:
 80070a0:	4770      	bx	lr

080070a2 <__retarget_lock_release_recursive>:
 80070a2:	4770      	bx	lr

080070a4 <nanf>:
 80070a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80070ac <nanf+0x8>
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	7fc00000 	.word	0x7fc00000

080070b0 <quorem>:
 80070b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b4:	6903      	ldr	r3, [r0, #16]
 80070b6:	690c      	ldr	r4, [r1, #16]
 80070b8:	42a3      	cmp	r3, r4
 80070ba:	4607      	mov	r7, r0
 80070bc:	db7e      	blt.n	80071bc <quorem+0x10c>
 80070be:	3c01      	subs	r4, #1
 80070c0:	f101 0814 	add.w	r8, r1, #20
 80070c4:	f100 0514 	add.w	r5, r0, #20
 80070c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070cc:	9301      	str	r3, [sp, #4]
 80070ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070d6:	3301      	adds	r3, #1
 80070d8:	429a      	cmp	r2, r3
 80070da:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80070de:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070e2:	fbb2 f6f3 	udiv	r6, r2, r3
 80070e6:	d331      	bcc.n	800714c <quorem+0x9c>
 80070e8:	f04f 0e00 	mov.w	lr, #0
 80070ec:	4640      	mov	r0, r8
 80070ee:	46ac      	mov	ip, r5
 80070f0:	46f2      	mov	sl, lr
 80070f2:	f850 2b04 	ldr.w	r2, [r0], #4
 80070f6:	b293      	uxth	r3, r2
 80070f8:	fb06 e303 	mla	r3, r6, r3, lr
 80070fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007100:	0c1a      	lsrs	r2, r3, #16
 8007102:	b29b      	uxth	r3, r3
 8007104:	ebaa 0303 	sub.w	r3, sl, r3
 8007108:	f8dc a000 	ldr.w	sl, [ip]
 800710c:	fa13 f38a 	uxtah	r3, r3, sl
 8007110:	fb06 220e 	mla	r2, r6, lr, r2
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	9b00      	ldr	r3, [sp, #0]
 8007118:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800711c:	b292      	uxth	r2, r2
 800711e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007122:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007126:	f8bd 3000 	ldrh.w	r3, [sp]
 800712a:	4581      	cmp	r9, r0
 800712c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007130:	f84c 3b04 	str.w	r3, [ip], #4
 8007134:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007138:	d2db      	bcs.n	80070f2 <quorem+0x42>
 800713a:	f855 300b 	ldr.w	r3, [r5, fp]
 800713e:	b92b      	cbnz	r3, 800714c <quorem+0x9c>
 8007140:	9b01      	ldr	r3, [sp, #4]
 8007142:	3b04      	subs	r3, #4
 8007144:	429d      	cmp	r5, r3
 8007146:	461a      	mov	r2, r3
 8007148:	d32c      	bcc.n	80071a4 <quorem+0xf4>
 800714a:	613c      	str	r4, [r7, #16]
 800714c:	4638      	mov	r0, r7
 800714e:	f001 f9ef 	bl	8008530 <__mcmp>
 8007152:	2800      	cmp	r0, #0
 8007154:	db22      	blt.n	800719c <quorem+0xec>
 8007156:	3601      	adds	r6, #1
 8007158:	4629      	mov	r1, r5
 800715a:	2000      	movs	r0, #0
 800715c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007160:	f8d1 c000 	ldr.w	ip, [r1]
 8007164:	b293      	uxth	r3, r2
 8007166:	1ac3      	subs	r3, r0, r3
 8007168:	0c12      	lsrs	r2, r2, #16
 800716a:	fa13 f38c 	uxtah	r3, r3, ip
 800716e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007172:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007176:	b29b      	uxth	r3, r3
 8007178:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800717c:	45c1      	cmp	r9, r8
 800717e:	f841 3b04 	str.w	r3, [r1], #4
 8007182:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007186:	d2e9      	bcs.n	800715c <quorem+0xac>
 8007188:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800718c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007190:	b922      	cbnz	r2, 800719c <quorem+0xec>
 8007192:	3b04      	subs	r3, #4
 8007194:	429d      	cmp	r5, r3
 8007196:	461a      	mov	r2, r3
 8007198:	d30a      	bcc.n	80071b0 <quorem+0x100>
 800719a:	613c      	str	r4, [r7, #16]
 800719c:	4630      	mov	r0, r6
 800719e:	b003      	add	sp, #12
 80071a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a4:	6812      	ldr	r2, [r2, #0]
 80071a6:	3b04      	subs	r3, #4
 80071a8:	2a00      	cmp	r2, #0
 80071aa:	d1ce      	bne.n	800714a <quorem+0x9a>
 80071ac:	3c01      	subs	r4, #1
 80071ae:	e7c9      	b.n	8007144 <quorem+0x94>
 80071b0:	6812      	ldr	r2, [r2, #0]
 80071b2:	3b04      	subs	r3, #4
 80071b4:	2a00      	cmp	r2, #0
 80071b6:	d1f0      	bne.n	800719a <quorem+0xea>
 80071b8:	3c01      	subs	r4, #1
 80071ba:	e7eb      	b.n	8007194 <quorem+0xe4>
 80071bc:	2000      	movs	r0, #0
 80071be:	e7ee      	b.n	800719e <quorem+0xee>

080071c0 <_dtoa_r>:
 80071c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	ed2d 8b04 	vpush	{d8-d9}
 80071c8:	69c5      	ldr	r5, [r0, #28]
 80071ca:	b093      	sub	sp, #76	; 0x4c
 80071cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80071d0:	ec57 6b10 	vmov	r6, r7, d0
 80071d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80071d8:	9107      	str	r1, [sp, #28]
 80071da:	4604      	mov	r4, r0
 80071dc:	920a      	str	r2, [sp, #40]	; 0x28
 80071de:	930d      	str	r3, [sp, #52]	; 0x34
 80071e0:	b975      	cbnz	r5, 8007200 <_dtoa_r+0x40>
 80071e2:	2010      	movs	r0, #16
 80071e4:	f000 fe2a 	bl	8007e3c <malloc>
 80071e8:	4602      	mov	r2, r0
 80071ea:	61e0      	str	r0, [r4, #28]
 80071ec:	b920      	cbnz	r0, 80071f8 <_dtoa_r+0x38>
 80071ee:	4bae      	ldr	r3, [pc, #696]	; (80074a8 <_dtoa_r+0x2e8>)
 80071f0:	21ef      	movs	r1, #239	; 0xef
 80071f2:	48ae      	ldr	r0, [pc, #696]	; (80074ac <_dtoa_r+0x2ec>)
 80071f4:	f002 fc74 	bl	8009ae0 <__assert_func>
 80071f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80071fc:	6005      	str	r5, [r0, #0]
 80071fe:	60c5      	str	r5, [r0, #12]
 8007200:	69e3      	ldr	r3, [r4, #28]
 8007202:	6819      	ldr	r1, [r3, #0]
 8007204:	b151      	cbz	r1, 800721c <_dtoa_r+0x5c>
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	604a      	str	r2, [r1, #4]
 800720a:	2301      	movs	r3, #1
 800720c:	4093      	lsls	r3, r2
 800720e:	608b      	str	r3, [r1, #8]
 8007210:	4620      	mov	r0, r4
 8007212:	f000 ff07 	bl	8008024 <_Bfree>
 8007216:	69e3      	ldr	r3, [r4, #28]
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	1e3b      	subs	r3, r7, #0
 800721e:	bfbb      	ittet	lt
 8007220:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007224:	9303      	strlt	r3, [sp, #12]
 8007226:	2300      	movge	r3, #0
 8007228:	2201      	movlt	r2, #1
 800722a:	bfac      	ite	ge
 800722c:	f8c8 3000 	strge.w	r3, [r8]
 8007230:	f8c8 2000 	strlt.w	r2, [r8]
 8007234:	4b9e      	ldr	r3, [pc, #632]	; (80074b0 <_dtoa_r+0x2f0>)
 8007236:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800723a:	ea33 0308 	bics.w	r3, r3, r8
 800723e:	d11b      	bne.n	8007278 <_dtoa_r+0xb8>
 8007240:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007242:	f242 730f 	movw	r3, #9999	; 0x270f
 8007246:	6013      	str	r3, [r2, #0]
 8007248:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800724c:	4333      	orrs	r3, r6
 800724e:	f000 8593 	beq.w	8007d78 <_dtoa_r+0xbb8>
 8007252:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007254:	b963      	cbnz	r3, 8007270 <_dtoa_r+0xb0>
 8007256:	4b97      	ldr	r3, [pc, #604]	; (80074b4 <_dtoa_r+0x2f4>)
 8007258:	e027      	b.n	80072aa <_dtoa_r+0xea>
 800725a:	4b97      	ldr	r3, [pc, #604]	; (80074b8 <_dtoa_r+0x2f8>)
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	3308      	adds	r3, #8
 8007260:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007262:	6013      	str	r3, [r2, #0]
 8007264:	9800      	ldr	r0, [sp, #0]
 8007266:	b013      	add	sp, #76	; 0x4c
 8007268:	ecbd 8b04 	vpop	{d8-d9}
 800726c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007270:	4b90      	ldr	r3, [pc, #576]	; (80074b4 <_dtoa_r+0x2f4>)
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	3303      	adds	r3, #3
 8007276:	e7f3      	b.n	8007260 <_dtoa_r+0xa0>
 8007278:	ed9d 7b02 	vldr	d7, [sp, #8]
 800727c:	2200      	movs	r2, #0
 800727e:	ec51 0b17 	vmov	r0, r1, d7
 8007282:	eeb0 8a47 	vmov.f32	s16, s14
 8007286:	eef0 8a67 	vmov.f32	s17, s15
 800728a:	2300      	movs	r3, #0
 800728c:	f7f9 fc1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007290:	4681      	mov	r9, r0
 8007292:	b160      	cbz	r0, 80072ae <_dtoa_r+0xee>
 8007294:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007296:	2301      	movs	r3, #1
 8007298:	6013      	str	r3, [r2, #0]
 800729a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 8568 	beq.w	8007d72 <_dtoa_r+0xbb2>
 80072a2:	4b86      	ldr	r3, [pc, #536]	; (80074bc <_dtoa_r+0x2fc>)
 80072a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80072a6:	6013      	str	r3, [r2, #0]
 80072a8:	3b01      	subs	r3, #1
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	e7da      	b.n	8007264 <_dtoa_r+0xa4>
 80072ae:	aa10      	add	r2, sp, #64	; 0x40
 80072b0:	a911      	add	r1, sp, #68	; 0x44
 80072b2:	4620      	mov	r0, r4
 80072b4:	eeb0 0a48 	vmov.f32	s0, s16
 80072b8:	eef0 0a68 	vmov.f32	s1, s17
 80072bc:	f001 fa4e 	bl	800875c <__d2b>
 80072c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80072c4:	4682      	mov	sl, r0
 80072c6:	2d00      	cmp	r5, #0
 80072c8:	d07f      	beq.n	80073ca <_dtoa_r+0x20a>
 80072ca:	ee18 3a90 	vmov	r3, s17
 80072ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072d2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80072d6:	ec51 0b18 	vmov	r0, r1, d8
 80072da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80072de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80072e2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80072e6:	4619      	mov	r1, r3
 80072e8:	2200      	movs	r2, #0
 80072ea:	4b75      	ldr	r3, [pc, #468]	; (80074c0 <_dtoa_r+0x300>)
 80072ec:	f7f8 ffcc 	bl	8000288 <__aeabi_dsub>
 80072f0:	a367      	add	r3, pc, #412	; (adr r3, 8007490 <_dtoa_r+0x2d0>)
 80072f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f6:	f7f9 f97f 	bl	80005f8 <__aeabi_dmul>
 80072fa:	a367      	add	r3, pc, #412	; (adr r3, 8007498 <_dtoa_r+0x2d8>)
 80072fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007300:	f7f8 ffc4 	bl	800028c <__adddf3>
 8007304:	4606      	mov	r6, r0
 8007306:	4628      	mov	r0, r5
 8007308:	460f      	mov	r7, r1
 800730a:	f7f9 f90b 	bl	8000524 <__aeabi_i2d>
 800730e:	a364      	add	r3, pc, #400	; (adr r3, 80074a0 <_dtoa_r+0x2e0>)
 8007310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007314:	f7f9 f970 	bl	80005f8 <__aeabi_dmul>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	4630      	mov	r0, r6
 800731e:	4639      	mov	r1, r7
 8007320:	f7f8 ffb4 	bl	800028c <__adddf3>
 8007324:	4606      	mov	r6, r0
 8007326:	460f      	mov	r7, r1
 8007328:	f7f9 fc16 	bl	8000b58 <__aeabi_d2iz>
 800732c:	2200      	movs	r2, #0
 800732e:	4683      	mov	fp, r0
 8007330:	2300      	movs	r3, #0
 8007332:	4630      	mov	r0, r6
 8007334:	4639      	mov	r1, r7
 8007336:	f7f9 fbd1 	bl	8000adc <__aeabi_dcmplt>
 800733a:	b148      	cbz	r0, 8007350 <_dtoa_r+0x190>
 800733c:	4658      	mov	r0, fp
 800733e:	f7f9 f8f1 	bl	8000524 <__aeabi_i2d>
 8007342:	4632      	mov	r2, r6
 8007344:	463b      	mov	r3, r7
 8007346:	f7f9 fbbf 	bl	8000ac8 <__aeabi_dcmpeq>
 800734a:	b908      	cbnz	r0, 8007350 <_dtoa_r+0x190>
 800734c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007350:	f1bb 0f16 	cmp.w	fp, #22
 8007354:	d857      	bhi.n	8007406 <_dtoa_r+0x246>
 8007356:	4b5b      	ldr	r3, [pc, #364]	; (80074c4 <_dtoa_r+0x304>)
 8007358:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800735c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007360:	ec51 0b18 	vmov	r0, r1, d8
 8007364:	f7f9 fbba 	bl	8000adc <__aeabi_dcmplt>
 8007368:	2800      	cmp	r0, #0
 800736a:	d04e      	beq.n	800740a <_dtoa_r+0x24a>
 800736c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007370:	2300      	movs	r3, #0
 8007372:	930c      	str	r3, [sp, #48]	; 0x30
 8007374:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007376:	1b5b      	subs	r3, r3, r5
 8007378:	1e5a      	subs	r2, r3, #1
 800737a:	bf45      	ittet	mi
 800737c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007380:	9305      	strmi	r3, [sp, #20]
 8007382:	2300      	movpl	r3, #0
 8007384:	2300      	movmi	r3, #0
 8007386:	9206      	str	r2, [sp, #24]
 8007388:	bf54      	ite	pl
 800738a:	9305      	strpl	r3, [sp, #20]
 800738c:	9306      	strmi	r3, [sp, #24]
 800738e:	f1bb 0f00 	cmp.w	fp, #0
 8007392:	db3c      	blt.n	800740e <_dtoa_r+0x24e>
 8007394:	9b06      	ldr	r3, [sp, #24]
 8007396:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800739a:	445b      	add	r3, fp
 800739c:	9306      	str	r3, [sp, #24]
 800739e:	2300      	movs	r3, #0
 80073a0:	9308      	str	r3, [sp, #32]
 80073a2:	9b07      	ldr	r3, [sp, #28]
 80073a4:	2b09      	cmp	r3, #9
 80073a6:	d868      	bhi.n	800747a <_dtoa_r+0x2ba>
 80073a8:	2b05      	cmp	r3, #5
 80073aa:	bfc4      	itt	gt
 80073ac:	3b04      	subgt	r3, #4
 80073ae:	9307      	strgt	r3, [sp, #28]
 80073b0:	9b07      	ldr	r3, [sp, #28]
 80073b2:	f1a3 0302 	sub.w	r3, r3, #2
 80073b6:	bfcc      	ite	gt
 80073b8:	2500      	movgt	r5, #0
 80073ba:	2501      	movle	r5, #1
 80073bc:	2b03      	cmp	r3, #3
 80073be:	f200 8085 	bhi.w	80074cc <_dtoa_r+0x30c>
 80073c2:	e8df f003 	tbb	[pc, r3]
 80073c6:	3b2e      	.short	0x3b2e
 80073c8:	5839      	.short	0x5839
 80073ca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80073ce:	441d      	add	r5, r3
 80073d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80073d4:	2b20      	cmp	r3, #32
 80073d6:	bfc1      	itttt	gt
 80073d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80073dc:	fa08 f803 	lslgt.w	r8, r8, r3
 80073e0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80073e4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80073e8:	bfd6      	itet	le
 80073ea:	f1c3 0320 	rsble	r3, r3, #32
 80073ee:	ea48 0003 	orrgt.w	r0, r8, r3
 80073f2:	fa06 f003 	lslle.w	r0, r6, r3
 80073f6:	f7f9 f885 	bl	8000504 <__aeabi_ui2d>
 80073fa:	2201      	movs	r2, #1
 80073fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007400:	3d01      	subs	r5, #1
 8007402:	920e      	str	r2, [sp, #56]	; 0x38
 8007404:	e76f      	b.n	80072e6 <_dtoa_r+0x126>
 8007406:	2301      	movs	r3, #1
 8007408:	e7b3      	b.n	8007372 <_dtoa_r+0x1b2>
 800740a:	900c      	str	r0, [sp, #48]	; 0x30
 800740c:	e7b2      	b.n	8007374 <_dtoa_r+0x1b4>
 800740e:	9b05      	ldr	r3, [sp, #20]
 8007410:	eba3 030b 	sub.w	r3, r3, fp
 8007414:	9305      	str	r3, [sp, #20]
 8007416:	f1cb 0300 	rsb	r3, fp, #0
 800741a:	9308      	str	r3, [sp, #32]
 800741c:	2300      	movs	r3, #0
 800741e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007420:	e7bf      	b.n	80073a2 <_dtoa_r+0x1e2>
 8007422:	2300      	movs	r3, #0
 8007424:	9309      	str	r3, [sp, #36]	; 0x24
 8007426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007428:	2b00      	cmp	r3, #0
 800742a:	dc52      	bgt.n	80074d2 <_dtoa_r+0x312>
 800742c:	2301      	movs	r3, #1
 800742e:	9301      	str	r3, [sp, #4]
 8007430:	9304      	str	r3, [sp, #16]
 8007432:	461a      	mov	r2, r3
 8007434:	920a      	str	r2, [sp, #40]	; 0x28
 8007436:	e00b      	b.n	8007450 <_dtoa_r+0x290>
 8007438:	2301      	movs	r3, #1
 800743a:	e7f3      	b.n	8007424 <_dtoa_r+0x264>
 800743c:	2300      	movs	r3, #0
 800743e:	9309      	str	r3, [sp, #36]	; 0x24
 8007440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007442:	445b      	add	r3, fp
 8007444:	9301      	str	r3, [sp, #4]
 8007446:	3301      	adds	r3, #1
 8007448:	2b01      	cmp	r3, #1
 800744a:	9304      	str	r3, [sp, #16]
 800744c:	bfb8      	it	lt
 800744e:	2301      	movlt	r3, #1
 8007450:	69e0      	ldr	r0, [r4, #28]
 8007452:	2100      	movs	r1, #0
 8007454:	2204      	movs	r2, #4
 8007456:	f102 0614 	add.w	r6, r2, #20
 800745a:	429e      	cmp	r6, r3
 800745c:	d93d      	bls.n	80074da <_dtoa_r+0x31a>
 800745e:	6041      	str	r1, [r0, #4]
 8007460:	4620      	mov	r0, r4
 8007462:	f000 fd9f 	bl	8007fa4 <_Balloc>
 8007466:	9000      	str	r0, [sp, #0]
 8007468:	2800      	cmp	r0, #0
 800746a:	d139      	bne.n	80074e0 <_dtoa_r+0x320>
 800746c:	4b16      	ldr	r3, [pc, #88]	; (80074c8 <_dtoa_r+0x308>)
 800746e:	4602      	mov	r2, r0
 8007470:	f240 11af 	movw	r1, #431	; 0x1af
 8007474:	e6bd      	b.n	80071f2 <_dtoa_r+0x32>
 8007476:	2301      	movs	r3, #1
 8007478:	e7e1      	b.n	800743e <_dtoa_r+0x27e>
 800747a:	2501      	movs	r5, #1
 800747c:	2300      	movs	r3, #0
 800747e:	9307      	str	r3, [sp, #28]
 8007480:	9509      	str	r5, [sp, #36]	; 0x24
 8007482:	f04f 33ff 	mov.w	r3, #4294967295
 8007486:	9301      	str	r3, [sp, #4]
 8007488:	9304      	str	r3, [sp, #16]
 800748a:	2200      	movs	r2, #0
 800748c:	2312      	movs	r3, #18
 800748e:	e7d1      	b.n	8007434 <_dtoa_r+0x274>
 8007490:	636f4361 	.word	0x636f4361
 8007494:	3fd287a7 	.word	0x3fd287a7
 8007498:	8b60c8b3 	.word	0x8b60c8b3
 800749c:	3fc68a28 	.word	0x3fc68a28
 80074a0:	509f79fb 	.word	0x509f79fb
 80074a4:	3fd34413 	.word	0x3fd34413
 80074a8:	0800a8ce 	.word	0x0800a8ce
 80074ac:	0800a8e5 	.word	0x0800a8e5
 80074b0:	7ff00000 	.word	0x7ff00000
 80074b4:	0800a8ca 	.word	0x0800a8ca
 80074b8:	0800a8c1 	.word	0x0800a8c1
 80074bc:	0800a899 	.word	0x0800a899
 80074c0:	3ff80000 	.word	0x3ff80000
 80074c4:	0800a9d0 	.word	0x0800a9d0
 80074c8:	0800a93d 	.word	0x0800a93d
 80074cc:	2301      	movs	r3, #1
 80074ce:	9309      	str	r3, [sp, #36]	; 0x24
 80074d0:	e7d7      	b.n	8007482 <_dtoa_r+0x2c2>
 80074d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074d4:	9301      	str	r3, [sp, #4]
 80074d6:	9304      	str	r3, [sp, #16]
 80074d8:	e7ba      	b.n	8007450 <_dtoa_r+0x290>
 80074da:	3101      	adds	r1, #1
 80074dc:	0052      	lsls	r2, r2, #1
 80074de:	e7ba      	b.n	8007456 <_dtoa_r+0x296>
 80074e0:	69e3      	ldr	r3, [r4, #28]
 80074e2:	9a00      	ldr	r2, [sp, #0]
 80074e4:	601a      	str	r2, [r3, #0]
 80074e6:	9b04      	ldr	r3, [sp, #16]
 80074e8:	2b0e      	cmp	r3, #14
 80074ea:	f200 80a8 	bhi.w	800763e <_dtoa_r+0x47e>
 80074ee:	2d00      	cmp	r5, #0
 80074f0:	f000 80a5 	beq.w	800763e <_dtoa_r+0x47e>
 80074f4:	f1bb 0f00 	cmp.w	fp, #0
 80074f8:	dd38      	ble.n	800756c <_dtoa_r+0x3ac>
 80074fa:	4bc0      	ldr	r3, [pc, #768]	; (80077fc <_dtoa_r+0x63c>)
 80074fc:	f00b 020f 	and.w	r2, fp, #15
 8007500:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007504:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007508:	e9d3 6700 	ldrd	r6, r7, [r3]
 800750c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007510:	d019      	beq.n	8007546 <_dtoa_r+0x386>
 8007512:	4bbb      	ldr	r3, [pc, #748]	; (8007800 <_dtoa_r+0x640>)
 8007514:	ec51 0b18 	vmov	r0, r1, d8
 8007518:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800751c:	f7f9 f996 	bl	800084c <__aeabi_ddiv>
 8007520:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007524:	f008 080f 	and.w	r8, r8, #15
 8007528:	2503      	movs	r5, #3
 800752a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007800 <_dtoa_r+0x640>
 800752e:	f1b8 0f00 	cmp.w	r8, #0
 8007532:	d10a      	bne.n	800754a <_dtoa_r+0x38a>
 8007534:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007538:	4632      	mov	r2, r6
 800753a:	463b      	mov	r3, r7
 800753c:	f7f9 f986 	bl	800084c <__aeabi_ddiv>
 8007540:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007544:	e02b      	b.n	800759e <_dtoa_r+0x3de>
 8007546:	2502      	movs	r5, #2
 8007548:	e7ef      	b.n	800752a <_dtoa_r+0x36a>
 800754a:	f018 0f01 	tst.w	r8, #1
 800754e:	d008      	beq.n	8007562 <_dtoa_r+0x3a2>
 8007550:	4630      	mov	r0, r6
 8007552:	4639      	mov	r1, r7
 8007554:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007558:	f7f9 f84e 	bl	80005f8 <__aeabi_dmul>
 800755c:	3501      	adds	r5, #1
 800755e:	4606      	mov	r6, r0
 8007560:	460f      	mov	r7, r1
 8007562:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007566:	f109 0908 	add.w	r9, r9, #8
 800756a:	e7e0      	b.n	800752e <_dtoa_r+0x36e>
 800756c:	f000 809f 	beq.w	80076ae <_dtoa_r+0x4ee>
 8007570:	f1cb 0600 	rsb	r6, fp, #0
 8007574:	4ba1      	ldr	r3, [pc, #644]	; (80077fc <_dtoa_r+0x63c>)
 8007576:	4fa2      	ldr	r7, [pc, #648]	; (8007800 <_dtoa_r+0x640>)
 8007578:	f006 020f 	and.w	r2, r6, #15
 800757c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007584:	ec51 0b18 	vmov	r0, r1, d8
 8007588:	f7f9 f836 	bl	80005f8 <__aeabi_dmul>
 800758c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007590:	1136      	asrs	r6, r6, #4
 8007592:	2300      	movs	r3, #0
 8007594:	2502      	movs	r5, #2
 8007596:	2e00      	cmp	r6, #0
 8007598:	d17e      	bne.n	8007698 <_dtoa_r+0x4d8>
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1d0      	bne.n	8007540 <_dtoa_r+0x380>
 800759e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f000 8084 	beq.w	80076b2 <_dtoa_r+0x4f2>
 80075aa:	4b96      	ldr	r3, [pc, #600]	; (8007804 <_dtoa_r+0x644>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	4640      	mov	r0, r8
 80075b0:	4649      	mov	r1, r9
 80075b2:	f7f9 fa93 	bl	8000adc <__aeabi_dcmplt>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	d07b      	beq.n	80076b2 <_dtoa_r+0x4f2>
 80075ba:	9b04      	ldr	r3, [sp, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d078      	beq.n	80076b2 <_dtoa_r+0x4f2>
 80075c0:	9b01      	ldr	r3, [sp, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	dd39      	ble.n	800763a <_dtoa_r+0x47a>
 80075c6:	4b90      	ldr	r3, [pc, #576]	; (8007808 <_dtoa_r+0x648>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	4640      	mov	r0, r8
 80075cc:	4649      	mov	r1, r9
 80075ce:	f7f9 f813 	bl	80005f8 <__aeabi_dmul>
 80075d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075d6:	9e01      	ldr	r6, [sp, #4]
 80075d8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80075dc:	3501      	adds	r5, #1
 80075de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80075e2:	4628      	mov	r0, r5
 80075e4:	f7f8 ff9e 	bl	8000524 <__aeabi_i2d>
 80075e8:	4642      	mov	r2, r8
 80075ea:	464b      	mov	r3, r9
 80075ec:	f7f9 f804 	bl	80005f8 <__aeabi_dmul>
 80075f0:	4b86      	ldr	r3, [pc, #536]	; (800780c <_dtoa_r+0x64c>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	f7f8 fe4a 	bl	800028c <__adddf3>
 80075f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80075fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007600:	9303      	str	r3, [sp, #12]
 8007602:	2e00      	cmp	r6, #0
 8007604:	d158      	bne.n	80076b8 <_dtoa_r+0x4f8>
 8007606:	4b82      	ldr	r3, [pc, #520]	; (8007810 <_dtoa_r+0x650>)
 8007608:	2200      	movs	r2, #0
 800760a:	4640      	mov	r0, r8
 800760c:	4649      	mov	r1, r9
 800760e:	f7f8 fe3b 	bl	8000288 <__aeabi_dsub>
 8007612:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007616:	4680      	mov	r8, r0
 8007618:	4689      	mov	r9, r1
 800761a:	f7f9 fa7d 	bl	8000b18 <__aeabi_dcmpgt>
 800761e:	2800      	cmp	r0, #0
 8007620:	f040 8296 	bne.w	8007b50 <_dtoa_r+0x990>
 8007624:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007628:	4640      	mov	r0, r8
 800762a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800762e:	4649      	mov	r1, r9
 8007630:	f7f9 fa54 	bl	8000adc <__aeabi_dcmplt>
 8007634:	2800      	cmp	r0, #0
 8007636:	f040 8289 	bne.w	8007b4c <_dtoa_r+0x98c>
 800763a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800763e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007640:	2b00      	cmp	r3, #0
 8007642:	f2c0 814e 	blt.w	80078e2 <_dtoa_r+0x722>
 8007646:	f1bb 0f0e 	cmp.w	fp, #14
 800764a:	f300 814a 	bgt.w	80078e2 <_dtoa_r+0x722>
 800764e:	4b6b      	ldr	r3, [pc, #428]	; (80077fc <_dtoa_r+0x63c>)
 8007650:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007654:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800765a:	2b00      	cmp	r3, #0
 800765c:	f280 80dc 	bge.w	8007818 <_dtoa_r+0x658>
 8007660:	9b04      	ldr	r3, [sp, #16]
 8007662:	2b00      	cmp	r3, #0
 8007664:	f300 80d8 	bgt.w	8007818 <_dtoa_r+0x658>
 8007668:	f040 826f 	bne.w	8007b4a <_dtoa_r+0x98a>
 800766c:	4b68      	ldr	r3, [pc, #416]	; (8007810 <_dtoa_r+0x650>)
 800766e:	2200      	movs	r2, #0
 8007670:	4640      	mov	r0, r8
 8007672:	4649      	mov	r1, r9
 8007674:	f7f8 ffc0 	bl	80005f8 <__aeabi_dmul>
 8007678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800767c:	f7f9 fa42 	bl	8000b04 <__aeabi_dcmpge>
 8007680:	9e04      	ldr	r6, [sp, #16]
 8007682:	4637      	mov	r7, r6
 8007684:	2800      	cmp	r0, #0
 8007686:	f040 8245 	bne.w	8007b14 <_dtoa_r+0x954>
 800768a:	9d00      	ldr	r5, [sp, #0]
 800768c:	2331      	movs	r3, #49	; 0x31
 800768e:	f805 3b01 	strb.w	r3, [r5], #1
 8007692:	f10b 0b01 	add.w	fp, fp, #1
 8007696:	e241      	b.n	8007b1c <_dtoa_r+0x95c>
 8007698:	07f2      	lsls	r2, r6, #31
 800769a:	d505      	bpl.n	80076a8 <_dtoa_r+0x4e8>
 800769c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076a0:	f7f8 ffaa 	bl	80005f8 <__aeabi_dmul>
 80076a4:	3501      	adds	r5, #1
 80076a6:	2301      	movs	r3, #1
 80076a8:	1076      	asrs	r6, r6, #1
 80076aa:	3708      	adds	r7, #8
 80076ac:	e773      	b.n	8007596 <_dtoa_r+0x3d6>
 80076ae:	2502      	movs	r5, #2
 80076b0:	e775      	b.n	800759e <_dtoa_r+0x3de>
 80076b2:	9e04      	ldr	r6, [sp, #16]
 80076b4:	465f      	mov	r7, fp
 80076b6:	e792      	b.n	80075de <_dtoa_r+0x41e>
 80076b8:	9900      	ldr	r1, [sp, #0]
 80076ba:	4b50      	ldr	r3, [pc, #320]	; (80077fc <_dtoa_r+0x63c>)
 80076bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80076c0:	4431      	add	r1, r6
 80076c2:	9102      	str	r1, [sp, #8]
 80076c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076c6:	eeb0 9a47 	vmov.f32	s18, s14
 80076ca:	eef0 9a67 	vmov.f32	s19, s15
 80076ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80076d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076d6:	2900      	cmp	r1, #0
 80076d8:	d044      	beq.n	8007764 <_dtoa_r+0x5a4>
 80076da:	494e      	ldr	r1, [pc, #312]	; (8007814 <_dtoa_r+0x654>)
 80076dc:	2000      	movs	r0, #0
 80076de:	f7f9 f8b5 	bl	800084c <__aeabi_ddiv>
 80076e2:	ec53 2b19 	vmov	r2, r3, d9
 80076e6:	f7f8 fdcf 	bl	8000288 <__aeabi_dsub>
 80076ea:	9d00      	ldr	r5, [sp, #0]
 80076ec:	ec41 0b19 	vmov	d9, r0, r1
 80076f0:	4649      	mov	r1, r9
 80076f2:	4640      	mov	r0, r8
 80076f4:	f7f9 fa30 	bl	8000b58 <__aeabi_d2iz>
 80076f8:	4606      	mov	r6, r0
 80076fa:	f7f8 ff13 	bl	8000524 <__aeabi_i2d>
 80076fe:	4602      	mov	r2, r0
 8007700:	460b      	mov	r3, r1
 8007702:	4640      	mov	r0, r8
 8007704:	4649      	mov	r1, r9
 8007706:	f7f8 fdbf 	bl	8000288 <__aeabi_dsub>
 800770a:	3630      	adds	r6, #48	; 0x30
 800770c:	f805 6b01 	strb.w	r6, [r5], #1
 8007710:	ec53 2b19 	vmov	r2, r3, d9
 8007714:	4680      	mov	r8, r0
 8007716:	4689      	mov	r9, r1
 8007718:	f7f9 f9e0 	bl	8000adc <__aeabi_dcmplt>
 800771c:	2800      	cmp	r0, #0
 800771e:	d164      	bne.n	80077ea <_dtoa_r+0x62a>
 8007720:	4642      	mov	r2, r8
 8007722:	464b      	mov	r3, r9
 8007724:	4937      	ldr	r1, [pc, #220]	; (8007804 <_dtoa_r+0x644>)
 8007726:	2000      	movs	r0, #0
 8007728:	f7f8 fdae 	bl	8000288 <__aeabi_dsub>
 800772c:	ec53 2b19 	vmov	r2, r3, d9
 8007730:	f7f9 f9d4 	bl	8000adc <__aeabi_dcmplt>
 8007734:	2800      	cmp	r0, #0
 8007736:	f040 80b6 	bne.w	80078a6 <_dtoa_r+0x6e6>
 800773a:	9b02      	ldr	r3, [sp, #8]
 800773c:	429d      	cmp	r5, r3
 800773e:	f43f af7c 	beq.w	800763a <_dtoa_r+0x47a>
 8007742:	4b31      	ldr	r3, [pc, #196]	; (8007808 <_dtoa_r+0x648>)
 8007744:	ec51 0b19 	vmov	r0, r1, d9
 8007748:	2200      	movs	r2, #0
 800774a:	f7f8 ff55 	bl	80005f8 <__aeabi_dmul>
 800774e:	4b2e      	ldr	r3, [pc, #184]	; (8007808 <_dtoa_r+0x648>)
 8007750:	ec41 0b19 	vmov	d9, r0, r1
 8007754:	2200      	movs	r2, #0
 8007756:	4640      	mov	r0, r8
 8007758:	4649      	mov	r1, r9
 800775a:	f7f8 ff4d 	bl	80005f8 <__aeabi_dmul>
 800775e:	4680      	mov	r8, r0
 8007760:	4689      	mov	r9, r1
 8007762:	e7c5      	b.n	80076f0 <_dtoa_r+0x530>
 8007764:	ec51 0b17 	vmov	r0, r1, d7
 8007768:	f7f8 ff46 	bl	80005f8 <__aeabi_dmul>
 800776c:	9b02      	ldr	r3, [sp, #8]
 800776e:	9d00      	ldr	r5, [sp, #0]
 8007770:	930f      	str	r3, [sp, #60]	; 0x3c
 8007772:	ec41 0b19 	vmov	d9, r0, r1
 8007776:	4649      	mov	r1, r9
 8007778:	4640      	mov	r0, r8
 800777a:	f7f9 f9ed 	bl	8000b58 <__aeabi_d2iz>
 800777e:	4606      	mov	r6, r0
 8007780:	f7f8 fed0 	bl	8000524 <__aeabi_i2d>
 8007784:	3630      	adds	r6, #48	; 0x30
 8007786:	4602      	mov	r2, r0
 8007788:	460b      	mov	r3, r1
 800778a:	4640      	mov	r0, r8
 800778c:	4649      	mov	r1, r9
 800778e:	f7f8 fd7b 	bl	8000288 <__aeabi_dsub>
 8007792:	f805 6b01 	strb.w	r6, [r5], #1
 8007796:	9b02      	ldr	r3, [sp, #8]
 8007798:	429d      	cmp	r5, r3
 800779a:	4680      	mov	r8, r0
 800779c:	4689      	mov	r9, r1
 800779e:	f04f 0200 	mov.w	r2, #0
 80077a2:	d124      	bne.n	80077ee <_dtoa_r+0x62e>
 80077a4:	4b1b      	ldr	r3, [pc, #108]	; (8007814 <_dtoa_r+0x654>)
 80077a6:	ec51 0b19 	vmov	r0, r1, d9
 80077aa:	f7f8 fd6f 	bl	800028c <__adddf3>
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	4640      	mov	r0, r8
 80077b4:	4649      	mov	r1, r9
 80077b6:	f7f9 f9af 	bl	8000b18 <__aeabi_dcmpgt>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	d173      	bne.n	80078a6 <_dtoa_r+0x6e6>
 80077be:	ec53 2b19 	vmov	r2, r3, d9
 80077c2:	4914      	ldr	r1, [pc, #80]	; (8007814 <_dtoa_r+0x654>)
 80077c4:	2000      	movs	r0, #0
 80077c6:	f7f8 fd5f 	bl	8000288 <__aeabi_dsub>
 80077ca:	4602      	mov	r2, r0
 80077cc:	460b      	mov	r3, r1
 80077ce:	4640      	mov	r0, r8
 80077d0:	4649      	mov	r1, r9
 80077d2:	f7f9 f983 	bl	8000adc <__aeabi_dcmplt>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	f43f af2f 	beq.w	800763a <_dtoa_r+0x47a>
 80077dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80077de:	1e6b      	subs	r3, r5, #1
 80077e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80077e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80077e6:	2b30      	cmp	r3, #48	; 0x30
 80077e8:	d0f8      	beq.n	80077dc <_dtoa_r+0x61c>
 80077ea:	46bb      	mov	fp, r7
 80077ec:	e04a      	b.n	8007884 <_dtoa_r+0x6c4>
 80077ee:	4b06      	ldr	r3, [pc, #24]	; (8007808 <_dtoa_r+0x648>)
 80077f0:	f7f8 ff02 	bl	80005f8 <__aeabi_dmul>
 80077f4:	4680      	mov	r8, r0
 80077f6:	4689      	mov	r9, r1
 80077f8:	e7bd      	b.n	8007776 <_dtoa_r+0x5b6>
 80077fa:	bf00      	nop
 80077fc:	0800a9d0 	.word	0x0800a9d0
 8007800:	0800a9a8 	.word	0x0800a9a8
 8007804:	3ff00000 	.word	0x3ff00000
 8007808:	40240000 	.word	0x40240000
 800780c:	401c0000 	.word	0x401c0000
 8007810:	40140000 	.word	0x40140000
 8007814:	3fe00000 	.word	0x3fe00000
 8007818:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800781c:	9d00      	ldr	r5, [sp, #0]
 800781e:	4642      	mov	r2, r8
 8007820:	464b      	mov	r3, r9
 8007822:	4630      	mov	r0, r6
 8007824:	4639      	mov	r1, r7
 8007826:	f7f9 f811 	bl	800084c <__aeabi_ddiv>
 800782a:	f7f9 f995 	bl	8000b58 <__aeabi_d2iz>
 800782e:	9001      	str	r0, [sp, #4]
 8007830:	f7f8 fe78 	bl	8000524 <__aeabi_i2d>
 8007834:	4642      	mov	r2, r8
 8007836:	464b      	mov	r3, r9
 8007838:	f7f8 fede 	bl	80005f8 <__aeabi_dmul>
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	4630      	mov	r0, r6
 8007842:	4639      	mov	r1, r7
 8007844:	f7f8 fd20 	bl	8000288 <__aeabi_dsub>
 8007848:	9e01      	ldr	r6, [sp, #4]
 800784a:	9f04      	ldr	r7, [sp, #16]
 800784c:	3630      	adds	r6, #48	; 0x30
 800784e:	f805 6b01 	strb.w	r6, [r5], #1
 8007852:	9e00      	ldr	r6, [sp, #0]
 8007854:	1bae      	subs	r6, r5, r6
 8007856:	42b7      	cmp	r7, r6
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	d134      	bne.n	80078c8 <_dtoa_r+0x708>
 800785e:	f7f8 fd15 	bl	800028c <__adddf3>
 8007862:	4642      	mov	r2, r8
 8007864:	464b      	mov	r3, r9
 8007866:	4606      	mov	r6, r0
 8007868:	460f      	mov	r7, r1
 800786a:	f7f9 f955 	bl	8000b18 <__aeabi_dcmpgt>
 800786e:	b9c8      	cbnz	r0, 80078a4 <_dtoa_r+0x6e4>
 8007870:	4642      	mov	r2, r8
 8007872:	464b      	mov	r3, r9
 8007874:	4630      	mov	r0, r6
 8007876:	4639      	mov	r1, r7
 8007878:	f7f9 f926 	bl	8000ac8 <__aeabi_dcmpeq>
 800787c:	b110      	cbz	r0, 8007884 <_dtoa_r+0x6c4>
 800787e:	9b01      	ldr	r3, [sp, #4]
 8007880:	07db      	lsls	r3, r3, #31
 8007882:	d40f      	bmi.n	80078a4 <_dtoa_r+0x6e4>
 8007884:	4651      	mov	r1, sl
 8007886:	4620      	mov	r0, r4
 8007888:	f000 fbcc 	bl	8008024 <_Bfree>
 800788c:	2300      	movs	r3, #0
 800788e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007890:	702b      	strb	r3, [r5, #0]
 8007892:	f10b 0301 	add.w	r3, fp, #1
 8007896:	6013      	str	r3, [r2, #0]
 8007898:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800789a:	2b00      	cmp	r3, #0
 800789c:	f43f ace2 	beq.w	8007264 <_dtoa_r+0xa4>
 80078a0:	601d      	str	r5, [r3, #0]
 80078a2:	e4df      	b.n	8007264 <_dtoa_r+0xa4>
 80078a4:	465f      	mov	r7, fp
 80078a6:	462b      	mov	r3, r5
 80078a8:	461d      	mov	r5, r3
 80078aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078ae:	2a39      	cmp	r2, #57	; 0x39
 80078b0:	d106      	bne.n	80078c0 <_dtoa_r+0x700>
 80078b2:	9a00      	ldr	r2, [sp, #0]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d1f7      	bne.n	80078a8 <_dtoa_r+0x6e8>
 80078b8:	9900      	ldr	r1, [sp, #0]
 80078ba:	2230      	movs	r2, #48	; 0x30
 80078bc:	3701      	adds	r7, #1
 80078be:	700a      	strb	r2, [r1, #0]
 80078c0:	781a      	ldrb	r2, [r3, #0]
 80078c2:	3201      	adds	r2, #1
 80078c4:	701a      	strb	r2, [r3, #0]
 80078c6:	e790      	b.n	80077ea <_dtoa_r+0x62a>
 80078c8:	4ba3      	ldr	r3, [pc, #652]	; (8007b58 <_dtoa_r+0x998>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	f7f8 fe94 	bl	80005f8 <__aeabi_dmul>
 80078d0:	2200      	movs	r2, #0
 80078d2:	2300      	movs	r3, #0
 80078d4:	4606      	mov	r6, r0
 80078d6:	460f      	mov	r7, r1
 80078d8:	f7f9 f8f6 	bl	8000ac8 <__aeabi_dcmpeq>
 80078dc:	2800      	cmp	r0, #0
 80078de:	d09e      	beq.n	800781e <_dtoa_r+0x65e>
 80078e0:	e7d0      	b.n	8007884 <_dtoa_r+0x6c4>
 80078e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078e4:	2a00      	cmp	r2, #0
 80078e6:	f000 80ca 	beq.w	8007a7e <_dtoa_r+0x8be>
 80078ea:	9a07      	ldr	r2, [sp, #28]
 80078ec:	2a01      	cmp	r2, #1
 80078ee:	f300 80ad 	bgt.w	8007a4c <_dtoa_r+0x88c>
 80078f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078f4:	2a00      	cmp	r2, #0
 80078f6:	f000 80a5 	beq.w	8007a44 <_dtoa_r+0x884>
 80078fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80078fe:	9e08      	ldr	r6, [sp, #32]
 8007900:	9d05      	ldr	r5, [sp, #20]
 8007902:	9a05      	ldr	r2, [sp, #20]
 8007904:	441a      	add	r2, r3
 8007906:	9205      	str	r2, [sp, #20]
 8007908:	9a06      	ldr	r2, [sp, #24]
 800790a:	2101      	movs	r1, #1
 800790c:	441a      	add	r2, r3
 800790e:	4620      	mov	r0, r4
 8007910:	9206      	str	r2, [sp, #24]
 8007912:	f000 fc87 	bl	8008224 <__i2b>
 8007916:	4607      	mov	r7, r0
 8007918:	b165      	cbz	r5, 8007934 <_dtoa_r+0x774>
 800791a:	9b06      	ldr	r3, [sp, #24]
 800791c:	2b00      	cmp	r3, #0
 800791e:	dd09      	ble.n	8007934 <_dtoa_r+0x774>
 8007920:	42ab      	cmp	r3, r5
 8007922:	9a05      	ldr	r2, [sp, #20]
 8007924:	bfa8      	it	ge
 8007926:	462b      	movge	r3, r5
 8007928:	1ad2      	subs	r2, r2, r3
 800792a:	9205      	str	r2, [sp, #20]
 800792c:	9a06      	ldr	r2, [sp, #24]
 800792e:	1aed      	subs	r5, r5, r3
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	9306      	str	r3, [sp, #24]
 8007934:	9b08      	ldr	r3, [sp, #32]
 8007936:	b1f3      	cbz	r3, 8007976 <_dtoa_r+0x7b6>
 8007938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800793a:	2b00      	cmp	r3, #0
 800793c:	f000 80a3 	beq.w	8007a86 <_dtoa_r+0x8c6>
 8007940:	2e00      	cmp	r6, #0
 8007942:	dd10      	ble.n	8007966 <_dtoa_r+0x7a6>
 8007944:	4639      	mov	r1, r7
 8007946:	4632      	mov	r2, r6
 8007948:	4620      	mov	r0, r4
 800794a:	f000 fd2b 	bl	80083a4 <__pow5mult>
 800794e:	4652      	mov	r2, sl
 8007950:	4601      	mov	r1, r0
 8007952:	4607      	mov	r7, r0
 8007954:	4620      	mov	r0, r4
 8007956:	f000 fc7b 	bl	8008250 <__multiply>
 800795a:	4651      	mov	r1, sl
 800795c:	4680      	mov	r8, r0
 800795e:	4620      	mov	r0, r4
 8007960:	f000 fb60 	bl	8008024 <_Bfree>
 8007964:	46c2      	mov	sl, r8
 8007966:	9b08      	ldr	r3, [sp, #32]
 8007968:	1b9a      	subs	r2, r3, r6
 800796a:	d004      	beq.n	8007976 <_dtoa_r+0x7b6>
 800796c:	4651      	mov	r1, sl
 800796e:	4620      	mov	r0, r4
 8007970:	f000 fd18 	bl	80083a4 <__pow5mult>
 8007974:	4682      	mov	sl, r0
 8007976:	2101      	movs	r1, #1
 8007978:	4620      	mov	r0, r4
 800797a:	f000 fc53 	bl	8008224 <__i2b>
 800797e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007980:	2b00      	cmp	r3, #0
 8007982:	4606      	mov	r6, r0
 8007984:	f340 8081 	ble.w	8007a8a <_dtoa_r+0x8ca>
 8007988:	461a      	mov	r2, r3
 800798a:	4601      	mov	r1, r0
 800798c:	4620      	mov	r0, r4
 800798e:	f000 fd09 	bl	80083a4 <__pow5mult>
 8007992:	9b07      	ldr	r3, [sp, #28]
 8007994:	2b01      	cmp	r3, #1
 8007996:	4606      	mov	r6, r0
 8007998:	dd7a      	ble.n	8007a90 <_dtoa_r+0x8d0>
 800799a:	f04f 0800 	mov.w	r8, #0
 800799e:	6933      	ldr	r3, [r6, #16]
 80079a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80079a4:	6918      	ldr	r0, [r3, #16]
 80079a6:	f000 fbef 	bl	8008188 <__hi0bits>
 80079aa:	f1c0 0020 	rsb	r0, r0, #32
 80079ae:	9b06      	ldr	r3, [sp, #24]
 80079b0:	4418      	add	r0, r3
 80079b2:	f010 001f 	ands.w	r0, r0, #31
 80079b6:	f000 8094 	beq.w	8007ae2 <_dtoa_r+0x922>
 80079ba:	f1c0 0320 	rsb	r3, r0, #32
 80079be:	2b04      	cmp	r3, #4
 80079c0:	f340 8085 	ble.w	8007ace <_dtoa_r+0x90e>
 80079c4:	9b05      	ldr	r3, [sp, #20]
 80079c6:	f1c0 001c 	rsb	r0, r0, #28
 80079ca:	4403      	add	r3, r0
 80079cc:	9305      	str	r3, [sp, #20]
 80079ce:	9b06      	ldr	r3, [sp, #24]
 80079d0:	4403      	add	r3, r0
 80079d2:	4405      	add	r5, r0
 80079d4:	9306      	str	r3, [sp, #24]
 80079d6:	9b05      	ldr	r3, [sp, #20]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	dd05      	ble.n	80079e8 <_dtoa_r+0x828>
 80079dc:	4651      	mov	r1, sl
 80079de:	461a      	mov	r2, r3
 80079e0:	4620      	mov	r0, r4
 80079e2:	f000 fd39 	bl	8008458 <__lshift>
 80079e6:	4682      	mov	sl, r0
 80079e8:	9b06      	ldr	r3, [sp, #24]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	dd05      	ble.n	80079fa <_dtoa_r+0x83a>
 80079ee:	4631      	mov	r1, r6
 80079f0:	461a      	mov	r2, r3
 80079f2:	4620      	mov	r0, r4
 80079f4:	f000 fd30 	bl	8008458 <__lshift>
 80079f8:	4606      	mov	r6, r0
 80079fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d072      	beq.n	8007ae6 <_dtoa_r+0x926>
 8007a00:	4631      	mov	r1, r6
 8007a02:	4650      	mov	r0, sl
 8007a04:	f000 fd94 	bl	8008530 <__mcmp>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	da6c      	bge.n	8007ae6 <_dtoa_r+0x926>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	4651      	mov	r1, sl
 8007a10:	220a      	movs	r2, #10
 8007a12:	4620      	mov	r0, r4
 8007a14:	f000 fb28 	bl	8008068 <__multadd>
 8007a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a1e:	4682      	mov	sl, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 81b0 	beq.w	8007d86 <_dtoa_r+0xbc6>
 8007a26:	2300      	movs	r3, #0
 8007a28:	4639      	mov	r1, r7
 8007a2a:	220a      	movs	r2, #10
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f000 fb1b 	bl	8008068 <__multadd>
 8007a32:	9b01      	ldr	r3, [sp, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	4607      	mov	r7, r0
 8007a38:	f300 8096 	bgt.w	8007b68 <_dtoa_r+0x9a8>
 8007a3c:	9b07      	ldr	r3, [sp, #28]
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	dc59      	bgt.n	8007af6 <_dtoa_r+0x936>
 8007a42:	e091      	b.n	8007b68 <_dtoa_r+0x9a8>
 8007a44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a4a:	e758      	b.n	80078fe <_dtoa_r+0x73e>
 8007a4c:	9b04      	ldr	r3, [sp, #16]
 8007a4e:	1e5e      	subs	r6, r3, #1
 8007a50:	9b08      	ldr	r3, [sp, #32]
 8007a52:	42b3      	cmp	r3, r6
 8007a54:	bfbf      	itttt	lt
 8007a56:	9b08      	ldrlt	r3, [sp, #32]
 8007a58:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007a5a:	9608      	strlt	r6, [sp, #32]
 8007a5c:	1af3      	sublt	r3, r6, r3
 8007a5e:	bfb4      	ite	lt
 8007a60:	18d2      	addlt	r2, r2, r3
 8007a62:	1b9e      	subge	r6, r3, r6
 8007a64:	9b04      	ldr	r3, [sp, #16]
 8007a66:	bfbc      	itt	lt
 8007a68:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007a6a:	2600      	movlt	r6, #0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	bfb7      	itett	lt
 8007a70:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007a74:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007a78:	1a9d      	sublt	r5, r3, r2
 8007a7a:	2300      	movlt	r3, #0
 8007a7c:	e741      	b.n	8007902 <_dtoa_r+0x742>
 8007a7e:	9e08      	ldr	r6, [sp, #32]
 8007a80:	9d05      	ldr	r5, [sp, #20]
 8007a82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007a84:	e748      	b.n	8007918 <_dtoa_r+0x758>
 8007a86:	9a08      	ldr	r2, [sp, #32]
 8007a88:	e770      	b.n	800796c <_dtoa_r+0x7ac>
 8007a8a:	9b07      	ldr	r3, [sp, #28]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	dc19      	bgt.n	8007ac4 <_dtoa_r+0x904>
 8007a90:	9b02      	ldr	r3, [sp, #8]
 8007a92:	b9bb      	cbnz	r3, 8007ac4 <_dtoa_r+0x904>
 8007a94:	9b03      	ldr	r3, [sp, #12]
 8007a96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a9a:	b99b      	cbnz	r3, 8007ac4 <_dtoa_r+0x904>
 8007a9c:	9b03      	ldr	r3, [sp, #12]
 8007a9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007aa2:	0d1b      	lsrs	r3, r3, #20
 8007aa4:	051b      	lsls	r3, r3, #20
 8007aa6:	b183      	cbz	r3, 8007aca <_dtoa_r+0x90a>
 8007aa8:	9b05      	ldr	r3, [sp, #20]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	9305      	str	r3, [sp, #20]
 8007aae:	9b06      	ldr	r3, [sp, #24]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	9306      	str	r3, [sp, #24]
 8007ab4:	f04f 0801 	mov.w	r8, #1
 8007ab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f47f af6f 	bne.w	800799e <_dtoa_r+0x7de>
 8007ac0:	2001      	movs	r0, #1
 8007ac2:	e774      	b.n	80079ae <_dtoa_r+0x7ee>
 8007ac4:	f04f 0800 	mov.w	r8, #0
 8007ac8:	e7f6      	b.n	8007ab8 <_dtoa_r+0x8f8>
 8007aca:	4698      	mov	r8, r3
 8007acc:	e7f4      	b.n	8007ab8 <_dtoa_r+0x8f8>
 8007ace:	d082      	beq.n	80079d6 <_dtoa_r+0x816>
 8007ad0:	9a05      	ldr	r2, [sp, #20]
 8007ad2:	331c      	adds	r3, #28
 8007ad4:	441a      	add	r2, r3
 8007ad6:	9205      	str	r2, [sp, #20]
 8007ad8:	9a06      	ldr	r2, [sp, #24]
 8007ada:	441a      	add	r2, r3
 8007adc:	441d      	add	r5, r3
 8007ade:	9206      	str	r2, [sp, #24]
 8007ae0:	e779      	b.n	80079d6 <_dtoa_r+0x816>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	e7f4      	b.n	8007ad0 <_dtoa_r+0x910>
 8007ae6:	9b04      	ldr	r3, [sp, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	dc37      	bgt.n	8007b5c <_dtoa_r+0x99c>
 8007aec:	9b07      	ldr	r3, [sp, #28]
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	dd34      	ble.n	8007b5c <_dtoa_r+0x99c>
 8007af2:	9b04      	ldr	r3, [sp, #16]
 8007af4:	9301      	str	r3, [sp, #4]
 8007af6:	9b01      	ldr	r3, [sp, #4]
 8007af8:	b963      	cbnz	r3, 8007b14 <_dtoa_r+0x954>
 8007afa:	4631      	mov	r1, r6
 8007afc:	2205      	movs	r2, #5
 8007afe:	4620      	mov	r0, r4
 8007b00:	f000 fab2 	bl	8008068 <__multadd>
 8007b04:	4601      	mov	r1, r0
 8007b06:	4606      	mov	r6, r0
 8007b08:	4650      	mov	r0, sl
 8007b0a:	f000 fd11 	bl	8008530 <__mcmp>
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	f73f adbb 	bgt.w	800768a <_dtoa_r+0x4ca>
 8007b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b16:	9d00      	ldr	r5, [sp, #0]
 8007b18:	ea6f 0b03 	mvn.w	fp, r3
 8007b1c:	f04f 0800 	mov.w	r8, #0
 8007b20:	4631      	mov	r1, r6
 8007b22:	4620      	mov	r0, r4
 8007b24:	f000 fa7e 	bl	8008024 <_Bfree>
 8007b28:	2f00      	cmp	r7, #0
 8007b2a:	f43f aeab 	beq.w	8007884 <_dtoa_r+0x6c4>
 8007b2e:	f1b8 0f00 	cmp.w	r8, #0
 8007b32:	d005      	beq.n	8007b40 <_dtoa_r+0x980>
 8007b34:	45b8      	cmp	r8, r7
 8007b36:	d003      	beq.n	8007b40 <_dtoa_r+0x980>
 8007b38:	4641      	mov	r1, r8
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	f000 fa72 	bl	8008024 <_Bfree>
 8007b40:	4639      	mov	r1, r7
 8007b42:	4620      	mov	r0, r4
 8007b44:	f000 fa6e 	bl	8008024 <_Bfree>
 8007b48:	e69c      	b.n	8007884 <_dtoa_r+0x6c4>
 8007b4a:	2600      	movs	r6, #0
 8007b4c:	4637      	mov	r7, r6
 8007b4e:	e7e1      	b.n	8007b14 <_dtoa_r+0x954>
 8007b50:	46bb      	mov	fp, r7
 8007b52:	4637      	mov	r7, r6
 8007b54:	e599      	b.n	800768a <_dtoa_r+0x4ca>
 8007b56:	bf00      	nop
 8007b58:	40240000 	.word	0x40240000
 8007b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 80c8 	beq.w	8007cf4 <_dtoa_r+0xb34>
 8007b64:	9b04      	ldr	r3, [sp, #16]
 8007b66:	9301      	str	r3, [sp, #4]
 8007b68:	2d00      	cmp	r5, #0
 8007b6a:	dd05      	ble.n	8007b78 <_dtoa_r+0x9b8>
 8007b6c:	4639      	mov	r1, r7
 8007b6e:	462a      	mov	r2, r5
 8007b70:	4620      	mov	r0, r4
 8007b72:	f000 fc71 	bl	8008458 <__lshift>
 8007b76:	4607      	mov	r7, r0
 8007b78:	f1b8 0f00 	cmp.w	r8, #0
 8007b7c:	d05b      	beq.n	8007c36 <_dtoa_r+0xa76>
 8007b7e:	6879      	ldr	r1, [r7, #4]
 8007b80:	4620      	mov	r0, r4
 8007b82:	f000 fa0f 	bl	8007fa4 <_Balloc>
 8007b86:	4605      	mov	r5, r0
 8007b88:	b928      	cbnz	r0, 8007b96 <_dtoa_r+0x9d6>
 8007b8a:	4b83      	ldr	r3, [pc, #524]	; (8007d98 <_dtoa_r+0xbd8>)
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007b92:	f7ff bb2e 	b.w	80071f2 <_dtoa_r+0x32>
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	3202      	adds	r2, #2
 8007b9a:	0092      	lsls	r2, r2, #2
 8007b9c:	f107 010c 	add.w	r1, r7, #12
 8007ba0:	300c      	adds	r0, #12
 8007ba2:	f001 ff85 	bl	8009ab0 <memcpy>
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	4629      	mov	r1, r5
 8007baa:	4620      	mov	r0, r4
 8007bac:	f000 fc54 	bl	8008458 <__lshift>
 8007bb0:	9b00      	ldr	r3, [sp, #0]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	9304      	str	r3, [sp, #16]
 8007bb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bba:	4413      	add	r3, r2
 8007bbc:	9308      	str	r3, [sp, #32]
 8007bbe:	9b02      	ldr	r3, [sp, #8]
 8007bc0:	f003 0301 	and.w	r3, r3, #1
 8007bc4:	46b8      	mov	r8, r7
 8007bc6:	9306      	str	r3, [sp, #24]
 8007bc8:	4607      	mov	r7, r0
 8007bca:	9b04      	ldr	r3, [sp, #16]
 8007bcc:	4631      	mov	r1, r6
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	4650      	mov	r0, sl
 8007bd2:	9301      	str	r3, [sp, #4]
 8007bd4:	f7ff fa6c 	bl	80070b0 <quorem>
 8007bd8:	4641      	mov	r1, r8
 8007bda:	9002      	str	r0, [sp, #8]
 8007bdc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007be0:	4650      	mov	r0, sl
 8007be2:	f000 fca5 	bl	8008530 <__mcmp>
 8007be6:	463a      	mov	r2, r7
 8007be8:	9005      	str	r0, [sp, #20]
 8007bea:	4631      	mov	r1, r6
 8007bec:	4620      	mov	r0, r4
 8007bee:	f000 fcbb 	bl	8008568 <__mdiff>
 8007bf2:	68c2      	ldr	r2, [r0, #12]
 8007bf4:	4605      	mov	r5, r0
 8007bf6:	bb02      	cbnz	r2, 8007c3a <_dtoa_r+0xa7a>
 8007bf8:	4601      	mov	r1, r0
 8007bfa:	4650      	mov	r0, sl
 8007bfc:	f000 fc98 	bl	8008530 <__mcmp>
 8007c00:	4602      	mov	r2, r0
 8007c02:	4629      	mov	r1, r5
 8007c04:	4620      	mov	r0, r4
 8007c06:	9209      	str	r2, [sp, #36]	; 0x24
 8007c08:	f000 fa0c 	bl	8008024 <_Bfree>
 8007c0c:	9b07      	ldr	r3, [sp, #28]
 8007c0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c10:	9d04      	ldr	r5, [sp, #16]
 8007c12:	ea43 0102 	orr.w	r1, r3, r2
 8007c16:	9b06      	ldr	r3, [sp, #24]
 8007c18:	4319      	orrs	r1, r3
 8007c1a:	d110      	bne.n	8007c3e <_dtoa_r+0xa7e>
 8007c1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c20:	d029      	beq.n	8007c76 <_dtoa_r+0xab6>
 8007c22:	9b05      	ldr	r3, [sp, #20]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	dd02      	ble.n	8007c2e <_dtoa_r+0xa6e>
 8007c28:	9b02      	ldr	r3, [sp, #8]
 8007c2a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007c2e:	9b01      	ldr	r3, [sp, #4]
 8007c30:	f883 9000 	strb.w	r9, [r3]
 8007c34:	e774      	b.n	8007b20 <_dtoa_r+0x960>
 8007c36:	4638      	mov	r0, r7
 8007c38:	e7ba      	b.n	8007bb0 <_dtoa_r+0x9f0>
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	e7e1      	b.n	8007c02 <_dtoa_r+0xa42>
 8007c3e:	9b05      	ldr	r3, [sp, #20]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	db04      	blt.n	8007c4e <_dtoa_r+0xa8e>
 8007c44:	9907      	ldr	r1, [sp, #28]
 8007c46:	430b      	orrs	r3, r1
 8007c48:	9906      	ldr	r1, [sp, #24]
 8007c4a:	430b      	orrs	r3, r1
 8007c4c:	d120      	bne.n	8007c90 <_dtoa_r+0xad0>
 8007c4e:	2a00      	cmp	r2, #0
 8007c50:	dded      	ble.n	8007c2e <_dtoa_r+0xa6e>
 8007c52:	4651      	mov	r1, sl
 8007c54:	2201      	movs	r2, #1
 8007c56:	4620      	mov	r0, r4
 8007c58:	f000 fbfe 	bl	8008458 <__lshift>
 8007c5c:	4631      	mov	r1, r6
 8007c5e:	4682      	mov	sl, r0
 8007c60:	f000 fc66 	bl	8008530 <__mcmp>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	dc03      	bgt.n	8007c70 <_dtoa_r+0xab0>
 8007c68:	d1e1      	bne.n	8007c2e <_dtoa_r+0xa6e>
 8007c6a:	f019 0f01 	tst.w	r9, #1
 8007c6e:	d0de      	beq.n	8007c2e <_dtoa_r+0xa6e>
 8007c70:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c74:	d1d8      	bne.n	8007c28 <_dtoa_r+0xa68>
 8007c76:	9a01      	ldr	r2, [sp, #4]
 8007c78:	2339      	movs	r3, #57	; 0x39
 8007c7a:	7013      	strb	r3, [r2, #0]
 8007c7c:	462b      	mov	r3, r5
 8007c7e:	461d      	mov	r5, r3
 8007c80:	3b01      	subs	r3, #1
 8007c82:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c86:	2a39      	cmp	r2, #57	; 0x39
 8007c88:	d06c      	beq.n	8007d64 <_dtoa_r+0xba4>
 8007c8a:	3201      	adds	r2, #1
 8007c8c:	701a      	strb	r2, [r3, #0]
 8007c8e:	e747      	b.n	8007b20 <_dtoa_r+0x960>
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	dd07      	ble.n	8007ca4 <_dtoa_r+0xae4>
 8007c94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007c98:	d0ed      	beq.n	8007c76 <_dtoa_r+0xab6>
 8007c9a:	9a01      	ldr	r2, [sp, #4]
 8007c9c:	f109 0301 	add.w	r3, r9, #1
 8007ca0:	7013      	strb	r3, [r2, #0]
 8007ca2:	e73d      	b.n	8007b20 <_dtoa_r+0x960>
 8007ca4:	9b04      	ldr	r3, [sp, #16]
 8007ca6:	9a08      	ldr	r2, [sp, #32]
 8007ca8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d043      	beq.n	8007d38 <_dtoa_r+0xb78>
 8007cb0:	4651      	mov	r1, sl
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	220a      	movs	r2, #10
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f000 f9d6 	bl	8008068 <__multadd>
 8007cbc:	45b8      	cmp	r8, r7
 8007cbe:	4682      	mov	sl, r0
 8007cc0:	f04f 0300 	mov.w	r3, #0
 8007cc4:	f04f 020a 	mov.w	r2, #10
 8007cc8:	4641      	mov	r1, r8
 8007cca:	4620      	mov	r0, r4
 8007ccc:	d107      	bne.n	8007cde <_dtoa_r+0xb1e>
 8007cce:	f000 f9cb 	bl	8008068 <__multadd>
 8007cd2:	4680      	mov	r8, r0
 8007cd4:	4607      	mov	r7, r0
 8007cd6:	9b04      	ldr	r3, [sp, #16]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	9304      	str	r3, [sp, #16]
 8007cdc:	e775      	b.n	8007bca <_dtoa_r+0xa0a>
 8007cde:	f000 f9c3 	bl	8008068 <__multadd>
 8007ce2:	4639      	mov	r1, r7
 8007ce4:	4680      	mov	r8, r0
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	220a      	movs	r2, #10
 8007cea:	4620      	mov	r0, r4
 8007cec:	f000 f9bc 	bl	8008068 <__multadd>
 8007cf0:	4607      	mov	r7, r0
 8007cf2:	e7f0      	b.n	8007cd6 <_dtoa_r+0xb16>
 8007cf4:	9b04      	ldr	r3, [sp, #16]
 8007cf6:	9301      	str	r3, [sp, #4]
 8007cf8:	9d00      	ldr	r5, [sp, #0]
 8007cfa:	4631      	mov	r1, r6
 8007cfc:	4650      	mov	r0, sl
 8007cfe:	f7ff f9d7 	bl	80070b0 <quorem>
 8007d02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007d06:	9b00      	ldr	r3, [sp, #0]
 8007d08:	f805 9b01 	strb.w	r9, [r5], #1
 8007d0c:	1aea      	subs	r2, r5, r3
 8007d0e:	9b01      	ldr	r3, [sp, #4]
 8007d10:	4293      	cmp	r3, r2
 8007d12:	dd07      	ble.n	8007d24 <_dtoa_r+0xb64>
 8007d14:	4651      	mov	r1, sl
 8007d16:	2300      	movs	r3, #0
 8007d18:	220a      	movs	r2, #10
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f000 f9a4 	bl	8008068 <__multadd>
 8007d20:	4682      	mov	sl, r0
 8007d22:	e7ea      	b.n	8007cfa <_dtoa_r+0xb3a>
 8007d24:	9b01      	ldr	r3, [sp, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	bfc8      	it	gt
 8007d2a:	461d      	movgt	r5, r3
 8007d2c:	9b00      	ldr	r3, [sp, #0]
 8007d2e:	bfd8      	it	le
 8007d30:	2501      	movle	r5, #1
 8007d32:	441d      	add	r5, r3
 8007d34:	f04f 0800 	mov.w	r8, #0
 8007d38:	4651      	mov	r1, sl
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	f000 fb8b 	bl	8008458 <__lshift>
 8007d42:	4631      	mov	r1, r6
 8007d44:	4682      	mov	sl, r0
 8007d46:	f000 fbf3 	bl	8008530 <__mcmp>
 8007d4a:	2800      	cmp	r0, #0
 8007d4c:	dc96      	bgt.n	8007c7c <_dtoa_r+0xabc>
 8007d4e:	d102      	bne.n	8007d56 <_dtoa_r+0xb96>
 8007d50:	f019 0f01 	tst.w	r9, #1
 8007d54:	d192      	bne.n	8007c7c <_dtoa_r+0xabc>
 8007d56:	462b      	mov	r3, r5
 8007d58:	461d      	mov	r5, r3
 8007d5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d5e:	2a30      	cmp	r2, #48	; 0x30
 8007d60:	d0fa      	beq.n	8007d58 <_dtoa_r+0xb98>
 8007d62:	e6dd      	b.n	8007b20 <_dtoa_r+0x960>
 8007d64:	9a00      	ldr	r2, [sp, #0]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d189      	bne.n	8007c7e <_dtoa_r+0xabe>
 8007d6a:	f10b 0b01 	add.w	fp, fp, #1
 8007d6e:	2331      	movs	r3, #49	; 0x31
 8007d70:	e796      	b.n	8007ca0 <_dtoa_r+0xae0>
 8007d72:	4b0a      	ldr	r3, [pc, #40]	; (8007d9c <_dtoa_r+0xbdc>)
 8007d74:	f7ff ba99 	b.w	80072aa <_dtoa_r+0xea>
 8007d78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f47f aa6d 	bne.w	800725a <_dtoa_r+0x9a>
 8007d80:	4b07      	ldr	r3, [pc, #28]	; (8007da0 <_dtoa_r+0xbe0>)
 8007d82:	f7ff ba92 	b.w	80072aa <_dtoa_r+0xea>
 8007d86:	9b01      	ldr	r3, [sp, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	dcb5      	bgt.n	8007cf8 <_dtoa_r+0xb38>
 8007d8c:	9b07      	ldr	r3, [sp, #28]
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	f73f aeb1 	bgt.w	8007af6 <_dtoa_r+0x936>
 8007d94:	e7b0      	b.n	8007cf8 <_dtoa_r+0xb38>
 8007d96:	bf00      	nop
 8007d98:	0800a93d 	.word	0x0800a93d
 8007d9c:	0800a898 	.word	0x0800a898
 8007da0:	0800a8c1 	.word	0x0800a8c1

08007da4 <_free_r>:
 8007da4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007da6:	2900      	cmp	r1, #0
 8007da8:	d044      	beq.n	8007e34 <_free_r+0x90>
 8007daa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dae:	9001      	str	r0, [sp, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f1a1 0404 	sub.w	r4, r1, #4
 8007db6:	bfb8      	it	lt
 8007db8:	18e4      	addlt	r4, r4, r3
 8007dba:	f000 f8e7 	bl	8007f8c <__malloc_lock>
 8007dbe:	4a1e      	ldr	r2, [pc, #120]	; (8007e38 <_free_r+0x94>)
 8007dc0:	9801      	ldr	r0, [sp, #4]
 8007dc2:	6813      	ldr	r3, [r2, #0]
 8007dc4:	b933      	cbnz	r3, 8007dd4 <_free_r+0x30>
 8007dc6:	6063      	str	r3, [r4, #4]
 8007dc8:	6014      	str	r4, [r2, #0]
 8007dca:	b003      	add	sp, #12
 8007dcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007dd0:	f000 b8e2 	b.w	8007f98 <__malloc_unlock>
 8007dd4:	42a3      	cmp	r3, r4
 8007dd6:	d908      	bls.n	8007dea <_free_r+0x46>
 8007dd8:	6825      	ldr	r5, [r4, #0]
 8007dda:	1961      	adds	r1, r4, r5
 8007ddc:	428b      	cmp	r3, r1
 8007dde:	bf01      	itttt	eq
 8007de0:	6819      	ldreq	r1, [r3, #0]
 8007de2:	685b      	ldreq	r3, [r3, #4]
 8007de4:	1949      	addeq	r1, r1, r5
 8007de6:	6021      	streq	r1, [r4, #0]
 8007de8:	e7ed      	b.n	8007dc6 <_free_r+0x22>
 8007dea:	461a      	mov	r2, r3
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	b10b      	cbz	r3, 8007df4 <_free_r+0x50>
 8007df0:	42a3      	cmp	r3, r4
 8007df2:	d9fa      	bls.n	8007dea <_free_r+0x46>
 8007df4:	6811      	ldr	r1, [r2, #0]
 8007df6:	1855      	adds	r5, r2, r1
 8007df8:	42a5      	cmp	r5, r4
 8007dfa:	d10b      	bne.n	8007e14 <_free_r+0x70>
 8007dfc:	6824      	ldr	r4, [r4, #0]
 8007dfe:	4421      	add	r1, r4
 8007e00:	1854      	adds	r4, r2, r1
 8007e02:	42a3      	cmp	r3, r4
 8007e04:	6011      	str	r1, [r2, #0]
 8007e06:	d1e0      	bne.n	8007dca <_free_r+0x26>
 8007e08:	681c      	ldr	r4, [r3, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	6053      	str	r3, [r2, #4]
 8007e0e:	440c      	add	r4, r1
 8007e10:	6014      	str	r4, [r2, #0]
 8007e12:	e7da      	b.n	8007dca <_free_r+0x26>
 8007e14:	d902      	bls.n	8007e1c <_free_r+0x78>
 8007e16:	230c      	movs	r3, #12
 8007e18:	6003      	str	r3, [r0, #0]
 8007e1a:	e7d6      	b.n	8007dca <_free_r+0x26>
 8007e1c:	6825      	ldr	r5, [r4, #0]
 8007e1e:	1961      	adds	r1, r4, r5
 8007e20:	428b      	cmp	r3, r1
 8007e22:	bf04      	itt	eq
 8007e24:	6819      	ldreq	r1, [r3, #0]
 8007e26:	685b      	ldreq	r3, [r3, #4]
 8007e28:	6063      	str	r3, [r4, #4]
 8007e2a:	bf04      	itt	eq
 8007e2c:	1949      	addeq	r1, r1, r5
 8007e2e:	6021      	streq	r1, [r4, #0]
 8007e30:	6054      	str	r4, [r2, #4]
 8007e32:	e7ca      	b.n	8007dca <_free_r+0x26>
 8007e34:	b003      	add	sp, #12
 8007e36:	bd30      	pop	{r4, r5, pc}
 8007e38:	20000430 	.word	0x20000430

08007e3c <malloc>:
 8007e3c:	4b02      	ldr	r3, [pc, #8]	; (8007e48 <malloc+0xc>)
 8007e3e:	4601      	mov	r1, r0
 8007e40:	6818      	ldr	r0, [r3, #0]
 8007e42:	f000 b823 	b.w	8007e8c <_malloc_r>
 8007e46:	bf00      	nop
 8007e48:	20000064 	.word	0x20000064

08007e4c <sbrk_aligned>:
 8007e4c:	b570      	push	{r4, r5, r6, lr}
 8007e4e:	4e0e      	ldr	r6, [pc, #56]	; (8007e88 <sbrk_aligned+0x3c>)
 8007e50:	460c      	mov	r4, r1
 8007e52:	6831      	ldr	r1, [r6, #0]
 8007e54:	4605      	mov	r5, r0
 8007e56:	b911      	cbnz	r1, 8007e5e <sbrk_aligned+0x12>
 8007e58:	f001 fe1a 	bl	8009a90 <_sbrk_r>
 8007e5c:	6030      	str	r0, [r6, #0]
 8007e5e:	4621      	mov	r1, r4
 8007e60:	4628      	mov	r0, r5
 8007e62:	f001 fe15 	bl	8009a90 <_sbrk_r>
 8007e66:	1c43      	adds	r3, r0, #1
 8007e68:	d00a      	beq.n	8007e80 <sbrk_aligned+0x34>
 8007e6a:	1cc4      	adds	r4, r0, #3
 8007e6c:	f024 0403 	bic.w	r4, r4, #3
 8007e70:	42a0      	cmp	r0, r4
 8007e72:	d007      	beq.n	8007e84 <sbrk_aligned+0x38>
 8007e74:	1a21      	subs	r1, r4, r0
 8007e76:	4628      	mov	r0, r5
 8007e78:	f001 fe0a 	bl	8009a90 <_sbrk_r>
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	d101      	bne.n	8007e84 <sbrk_aligned+0x38>
 8007e80:	f04f 34ff 	mov.w	r4, #4294967295
 8007e84:	4620      	mov	r0, r4
 8007e86:	bd70      	pop	{r4, r5, r6, pc}
 8007e88:	20000434 	.word	0x20000434

08007e8c <_malloc_r>:
 8007e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e90:	1ccd      	adds	r5, r1, #3
 8007e92:	f025 0503 	bic.w	r5, r5, #3
 8007e96:	3508      	adds	r5, #8
 8007e98:	2d0c      	cmp	r5, #12
 8007e9a:	bf38      	it	cc
 8007e9c:	250c      	movcc	r5, #12
 8007e9e:	2d00      	cmp	r5, #0
 8007ea0:	4607      	mov	r7, r0
 8007ea2:	db01      	blt.n	8007ea8 <_malloc_r+0x1c>
 8007ea4:	42a9      	cmp	r1, r5
 8007ea6:	d905      	bls.n	8007eb4 <_malloc_r+0x28>
 8007ea8:	230c      	movs	r3, #12
 8007eaa:	603b      	str	r3, [r7, #0]
 8007eac:	2600      	movs	r6, #0
 8007eae:	4630      	mov	r0, r6
 8007eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eb4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007f88 <_malloc_r+0xfc>
 8007eb8:	f000 f868 	bl	8007f8c <__malloc_lock>
 8007ebc:	f8d8 3000 	ldr.w	r3, [r8]
 8007ec0:	461c      	mov	r4, r3
 8007ec2:	bb5c      	cbnz	r4, 8007f1c <_malloc_r+0x90>
 8007ec4:	4629      	mov	r1, r5
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	f7ff ffc0 	bl	8007e4c <sbrk_aligned>
 8007ecc:	1c43      	adds	r3, r0, #1
 8007ece:	4604      	mov	r4, r0
 8007ed0:	d155      	bne.n	8007f7e <_malloc_r+0xf2>
 8007ed2:	f8d8 4000 	ldr.w	r4, [r8]
 8007ed6:	4626      	mov	r6, r4
 8007ed8:	2e00      	cmp	r6, #0
 8007eda:	d145      	bne.n	8007f68 <_malloc_r+0xdc>
 8007edc:	2c00      	cmp	r4, #0
 8007ede:	d048      	beq.n	8007f72 <_malloc_r+0xe6>
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	4631      	mov	r1, r6
 8007ee4:	4638      	mov	r0, r7
 8007ee6:	eb04 0903 	add.w	r9, r4, r3
 8007eea:	f001 fdd1 	bl	8009a90 <_sbrk_r>
 8007eee:	4581      	cmp	r9, r0
 8007ef0:	d13f      	bne.n	8007f72 <_malloc_r+0xe6>
 8007ef2:	6821      	ldr	r1, [r4, #0]
 8007ef4:	1a6d      	subs	r5, r5, r1
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	4638      	mov	r0, r7
 8007efa:	f7ff ffa7 	bl	8007e4c <sbrk_aligned>
 8007efe:	3001      	adds	r0, #1
 8007f00:	d037      	beq.n	8007f72 <_malloc_r+0xe6>
 8007f02:	6823      	ldr	r3, [r4, #0]
 8007f04:	442b      	add	r3, r5
 8007f06:	6023      	str	r3, [r4, #0]
 8007f08:	f8d8 3000 	ldr.w	r3, [r8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d038      	beq.n	8007f82 <_malloc_r+0xf6>
 8007f10:	685a      	ldr	r2, [r3, #4]
 8007f12:	42a2      	cmp	r2, r4
 8007f14:	d12b      	bne.n	8007f6e <_malloc_r+0xe2>
 8007f16:	2200      	movs	r2, #0
 8007f18:	605a      	str	r2, [r3, #4]
 8007f1a:	e00f      	b.n	8007f3c <_malloc_r+0xb0>
 8007f1c:	6822      	ldr	r2, [r4, #0]
 8007f1e:	1b52      	subs	r2, r2, r5
 8007f20:	d41f      	bmi.n	8007f62 <_malloc_r+0xd6>
 8007f22:	2a0b      	cmp	r2, #11
 8007f24:	d917      	bls.n	8007f56 <_malloc_r+0xca>
 8007f26:	1961      	adds	r1, r4, r5
 8007f28:	42a3      	cmp	r3, r4
 8007f2a:	6025      	str	r5, [r4, #0]
 8007f2c:	bf18      	it	ne
 8007f2e:	6059      	strne	r1, [r3, #4]
 8007f30:	6863      	ldr	r3, [r4, #4]
 8007f32:	bf08      	it	eq
 8007f34:	f8c8 1000 	streq.w	r1, [r8]
 8007f38:	5162      	str	r2, [r4, r5]
 8007f3a:	604b      	str	r3, [r1, #4]
 8007f3c:	4638      	mov	r0, r7
 8007f3e:	f104 060b 	add.w	r6, r4, #11
 8007f42:	f000 f829 	bl	8007f98 <__malloc_unlock>
 8007f46:	f026 0607 	bic.w	r6, r6, #7
 8007f4a:	1d23      	adds	r3, r4, #4
 8007f4c:	1af2      	subs	r2, r6, r3
 8007f4e:	d0ae      	beq.n	8007eae <_malloc_r+0x22>
 8007f50:	1b9b      	subs	r3, r3, r6
 8007f52:	50a3      	str	r3, [r4, r2]
 8007f54:	e7ab      	b.n	8007eae <_malloc_r+0x22>
 8007f56:	42a3      	cmp	r3, r4
 8007f58:	6862      	ldr	r2, [r4, #4]
 8007f5a:	d1dd      	bne.n	8007f18 <_malloc_r+0x8c>
 8007f5c:	f8c8 2000 	str.w	r2, [r8]
 8007f60:	e7ec      	b.n	8007f3c <_malloc_r+0xb0>
 8007f62:	4623      	mov	r3, r4
 8007f64:	6864      	ldr	r4, [r4, #4]
 8007f66:	e7ac      	b.n	8007ec2 <_malloc_r+0x36>
 8007f68:	4634      	mov	r4, r6
 8007f6a:	6876      	ldr	r6, [r6, #4]
 8007f6c:	e7b4      	b.n	8007ed8 <_malloc_r+0x4c>
 8007f6e:	4613      	mov	r3, r2
 8007f70:	e7cc      	b.n	8007f0c <_malloc_r+0x80>
 8007f72:	230c      	movs	r3, #12
 8007f74:	603b      	str	r3, [r7, #0]
 8007f76:	4638      	mov	r0, r7
 8007f78:	f000 f80e 	bl	8007f98 <__malloc_unlock>
 8007f7c:	e797      	b.n	8007eae <_malloc_r+0x22>
 8007f7e:	6025      	str	r5, [r4, #0]
 8007f80:	e7dc      	b.n	8007f3c <_malloc_r+0xb0>
 8007f82:	605b      	str	r3, [r3, #4]
 8007f84:	deff      	udf	#255	; 0xff
 8007f86:	bf00      	nop
 8007f88:	20000430 	.word	0x20000430

08007f8c <__malloc_lock>:
 8007f8c:	4801      	ldr	r0, [pc, #4]	; (8007f94 <__malloc_lock+0x8>)
 8007f8e:	f7ff b887 	b.w	80070a0 <__retarget_lock_acquire_recursive>
 8007f92:	bf00      	nop
 8007f94:	2000042c 	.word	0x2000042c

08007f98 <__malloc_unlock>:
 8007f98:	4801      	ldr	r0, [pc, #4]	; (8007fa0 <__malloc_unlock+0x8>)
 8007f9a:	f7ff b882 	b.w	80070a2 <__retarget_lock_release_recursive>
 8007f9e:	bf00      	nop
 8007fa0:	2000042c 	.word	0x2000042c

08007fa4 <_Balloc>:
 8007fa4:	b570      	push	{r4, r5, r6, lr}
 8007fa6:	69c6      	ldr	r6, [r0, #28]
 8007fa8:	4604      	mov	r4, r0
 8007faa:	460d      	mov	r5, r1
 8007fac:	b976      	cbnz	r6, 8007fcc <_Balloc+0x28>
 8007fae:	2010      	movs	r0, #16
 8007fb0:	f7ff ff44 	bl	8007e3c <malloc>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	61e0      	str	r0, [r4, #28]
 8007fb8:	b920      	cbnz	r0, 8007fc4 <_Balloc+0x20>
 8007fba:	4b18      	ldr	r3, [pc, #96]	; (800801c <_Balloc+0x78>)
 8007fbc:	4818      	ldr	r0, [pc, #96]	; (8008020 <_Balloc+0x7c>)
 8007fbe:	216b      	movs	r1, #107	; 0x6b
 8007fc0:	f001 fd8e 	bl	8009ae0 <__assert_func>
 8007fc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fc8:	6006      	str	r6, [r0, #0]
 8007fca:	60c6      	str	r6, [r0, #12]
 8007fcc:	69e6      	ldr	r6, [r4, #28]
 8007fce:	68f3      	ldr	r3, [r6, #12]
 8007fd0:	b183      	cbz	r3, 8007ff4 <_Balloc+0x50>
 8007fd2:	69e3      	ldr	r3, [r4, #28]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fda:	b9b8      	cbnz	r0, 800800c <_Balloc+0x68>
 8007fdc:	2101      	movs	r1, #1
 8007fde:	fa01 f605 	lsl.w	r6, r1, r5
 8007fe2:	1d72      	adds	r2, r6, #5
 8007fe4:	0092      	lsls	r2, r2, #2
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f001 fd98 	bl	8009b1c <_calloc_r>
 8007fec:	b160      	cbz	r0, 8008008 <_Balloc+0x64>
 8007fee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ff2:	e00e      	b.n	8008012 <_Balloc+0x6e>
 8007ff4:	2221      	movs	r2, #33	; 0x21
 8007ff6:	2104      	movs	r1, #4
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f001 fd8f 	bl	8009b1c <_calloc_r>
 8007ffe:	69e3      	ldr	r3, [r4, #28]
 8008000:	60f0      	str	r0, [r6, #12]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1e4      	bne.n	8007fd2 <_Balloc+0x2e>
 8008008:	2000      	movs	r0, #0
 800800a:	bd70      	pop	{r4, r5, r6, pc}
 800800c:	6802      	ldr	r2, [r0, #0]
 800800e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008012:	2300      	movs	r3, #0
 8008014:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008018:	e7f7      	b.n	800800a <_Balloc+0x66>
 800801a:	bf00      	nop
 800801c:	0800a8ce 	.word	0x0800a8ce
 8008020:	0800a94e 	.word	0x0800a94e

08008024 <_Bfree>:
 8008024:	b570      	push	{r4, r5, r6, lr}
 8008026:	69c6      	ldr	r6, [r0, #28]
 8008028:	4605      	mov	r5, r0
 800802a:	460c      	mov	r4, r1
 800802c:	b976      	cbnz	r6, 800804c <_Bfree+0x28>
 800802e:	2010      	movs	r0, #16
 8008030:	f7ff ff04 	bl	8007e3c <malloc>
 8008034:	4602      	mov	r2, r0
 8008036:	61e8      	str	r0, [r5, #28]
 8008038:	b920      	cbnz	r0, 8008044 <_Bfree+0x20>
 800803a:	4b09      	ldr	r3, [pc, #36]	; (8008060 <_Bfree+0x3c>)
 800803c:	4809      	ldr	r0, [pc, #36]	; (8008064 <_Bfree+0x40>)
 800803e:	218f      	movs	r1, #143	; 0x8f
 8008040:	f001 fd4e 	bl	8009ae0 <__assert_func>
 8008044:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008048:	6006      	str	r6, [r0, #0]
 800804a:	60c6      	str	r6, [r0, #12]
 800804c:	b13c      	cbz	r4, 800805e <_Bfree+0x3a>
 800804e:	69eb      	ldr	r3, [r5, #28]
 8008050:	6862      	ldr	r2, [r4, #4]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008058:	6021      	str	r1, [r4, #0]
 800805a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800805e:	bd70      	pop	{r4, r5, r6, pc}
 8008060:	0800a8ce 	.word	0x0800a8ce
 8008064:	0800a94e 	.word	0x0800a94e

08008068 <__multadd>:
 8008068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800806c:	690d      	ldr	r5, [r1, #16]
 800806e:	4607      	mov	r7, r0
 8008070:	460c      	mov	r4, r1
 8008072:	461e      	mov	r6, r3
 8008074:	f101 0c14 	add.w	ip, r1, #20
 8008078:	2000      	movs	r0, #0
 800807a:	f8dc 3000 	ldr.w	r3, [ip]
 800807e:	b299      	uxth	r1, r3
 8008080:	fb02 6101 	mla	r1, r2, r1, r6
 8008084:	0c1e      	lsrs	r6, r3, #16
 8008086:	0c0b      	lsrs	r3, r1, #16
 8008088:	fb02 3306 	mla	r3, r2, r6, r3
 800808c:	b289      	uxth	r1, r1
 800808e:	3001      	adds	r0, #1
 8008090:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008094:	4285      	cmp	r5, r0
 8008096:	f84c 1b04 	str.w	r1, [ip], #4
 800809a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800809e:	dcec      	bgt.n	800807a <__multadd+0x12>
 80080a0:	b30e      	cbz	r6, 80080e6 <__multadd+0x7e>
 80080a2:	68a3      	ldr	r3, [r4, #8]
 80080a4:	42ab      	cmp	r3, r5
 80080a6:	dc19      	bgt.n	80080dc <__multadd+0x74>
 80080a8:	6861      	ldr	r1, [r4, #4]
 80080aa:	4638      	mov	r0, r7
 80080ac:	3101      	adds	r1, #1
 80080ae:	f7ff ff79 	bl	8007fa4 <_Balloc>
 80080b2:	4680      	mov	r8, r0
 80080b4:	b928      	cbnz	r0, 80080c2 <__multadd+0x5a>
 80080b6:	4602      	mov	r2, r0
 80080b8:	4b0c      	ldr	r3, [pc, #48]	; (80080ec <__multadd+0x84>)
 80080ba:	480d      	ldr	r0, [pc, #52]	; (80080f0 <__multadd+0x88>)
 80080bc:	21ba      	movs	r1, #186	; 0xba
 80080be:	f001 fd0f 	bl	8009ae0 <__assert_func>
 80080c2:	6922      	ldr	r2, [r4, #16]
 80080c4:	3202      	adds	r2, #2
 80080c6:	f104 010c 	add.w	r1, r4, #12
 80080ca:	0092      	lsls	r2, r2, #2
 80080cc:	300c      	adds	r0, #12
 80080ce:	f001 fcef 	bl	8009ab0 <memcpy>
 80080d2:	4621      	mov	r1, r4
 80080d4:	4638      	mov	r0, r7
 80080d6:	f7ff ffa5 	bl	8008024 <_Bfree>
 80080da:	4644      	mov	r4, r8
 80080dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080e0:	3501      	adds	r5, #1
 80080e2:	615e      	str	r6, [r3, #20]
 80080e4:	6125      	str	r5, [r4, #16]
 80080e6:	4620      	mov	r0, r4
 80080e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080ec:	0800a93d 	.word	0x0800a93d
 80080f0:	0800a94e 	.word	0x0800a94e

080080f4 <__s2b>:
 80080f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080f8:	460c      	mov	r4, r1
 80080fa:	4615      	mov	r5, r2
 80080fc:	461f      	mov	r7, r3
 80080fe:	2209      	movs	r2, #9
 8008100:	3308      	adds	r3, #8
 8008102:	4606      	mov	r6, r0
 8008104:	fb93 f3f2 	sdiv	r3, r3, r2
 8008108:	2100      	movs	r1, #0
 800810a:	2201      	movs	r2, #1
 800810c:	429a      	cmp	r2, r3
 800810e:	db09      	blt.n	8008124 <__s2b+0x30>
 8008110:	4630      	mov	r0, r6
 8008112:	f7ff ff47 	bl	8007fa4 <_Balloc>
 8008116:	b940      	cbnz	r0, 800812a <__s2b+0x36>
 8008118:	4602      	mov	r2, r0
 800811a:	4b19      	ldr	r3, [pc, #100]	; (8008180 <__s2b+0x8c>)
 800811c:	4819      	ldr	r0, [pc, #100]	; (8008184 <__s2b+0x90>)
 800811e:	21d3      	movs	r1, #211	; 0xd3
 8008120:	f001 fcde 	bl	8009ae0 <__assert_func>
 8008124:	0052      	lsls	r2, r2, #1
 8008126:	3101      	adds	r1, #1
 8008128:	e7f0      	b.n	800810c <__s2b+0x18>
 800812a:	9b08      	ldr	r3, [sp, #32]
 800812c:	6143      	str	r3, [r0, #20]
 800812e:	2d09      	cmp	r5, #9
 8008130:	f04f 0301 	mov.w	r3, #1
 8008134:	6103      	str	r3, [r0, #16]
 8008136:	dd16      	ble.n	8008166 <__s2b+0x72>
 8008138:	f104 0909 	add.w	r9, r4, #9
 800813c:	46c8      	mov	r8, r9
 800813e:	442c      	add	r4, r5
 8008140:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008144:	4601      	mov	r1, r0
 8008146:	3b30      	subs	r3, #48	; 0x30
 8008148:	220a      	movs	r2, #10
 800814a:	4630      	mov	r0, r6
 800814c:	f7ff ff8c 	bl	8008068 <__multadd>
 8008150:	45a0      	cmp	r8, r4
 8008152:	d1f5      	bne.n	8008140 <__s2b+0x4c>
 8008154:	f1a5 0408 	sub.w	r4, r5, #8
 8008158:	444c      	add	r4, r9
 800815a:	1b2d      	subs	r5, r5, r4
 800815c:	1963      	adds	r3, r4, r5
 800815e:	42bb      	cmp	r3, r7
 8008160:	db04      	blt.n	800816c <__s2b+0x78>
 8008162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008166:	340a      	adds	r4, #10
 8008168:	2509      	movs	r5, #9
 800816a:	e7f6      	b.n	800815a <__s2b+0x66>
 800816c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008170:	4601      	mov	r1, r0
 8008172:	3b30      	subs	r3, #48	; 0x30
 8008174:	220a      	movs	r2, #10
 8008176:	4630      	mov	r0, r6
 8008178:	f7ff ff76 	bl	8008068 <__multadd>
 800817c:	e7ee      	b.n	800815c <__s2b+0x68>
 800817e:	bf00      	nop
 8008180:	0800a93d 	.word	0x0800a93d
 8008184:	0800a94e 	.word	0x0800a94e

08008188 <__hi0bits>:
 8008188:	0c03      	lsrs	r3, r0, #16
 800818a:	041b      	lsls	r3, r3, #16
 800818c:	b9d3      	cbnz	r3, 80081c4 <__hi0bits+0x3c>
 800818e:	0400      	lsls	r0, r0, #16
 8008190:	2310      	movs	r3, #16
 8008192:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008196:	bf04      	itt	eq
 8008198:	0200      	lsleq	r0, r0, #8
 800819a:	3308      	addeq	r3, #8
 800819c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80081a0:	bf04      	itt	eq
 80081a2:	0100      	lsleq	r0, r0, #4
 80081a4:	3304      	addeq	r3, #4
 80081a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80081aa:	bf04      	itt	eq
 80081ac:	0080      	lsleq	r0, r0, #2
 80081ae:	3302      	addeq	r3, #2
 80081b0:	2800      	cmp	r0, #0
 80081b2:	db05      	blt.n	80081c0 <__hi0bits+0x38>
 80081b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80081b8:	f103 0301 	add.w	r3, r3, #1
 80081bc:	bf08      	it	eq
 80081be:	2320      	moveq	r3, #32
 80081c0:	4618      	mov	r0, r3
 80081c2:	4770      	bx	lr
 80081c4:	2300      	movs	r3, #0
 80081c6:	e7e4      	b.n	8008192 <__hi0bits+0xa>

080081c8 <__lo0bits>:
 80081c8:	6803      	ldr	r3, [r0, #0]
 80081ca:	f013 0207 	ands.w	r2, r3, #7
 80081ce:	d00c      	beq.n	80081ea <__lo0bits+0x22>
 80081d0:	07d9      	lsls	r1, r3, #31
 80081d2:	d422      	bmi.n	800821a <__lo0bits+0x52>
 80081d4:	079a      	lsls	r2, r3, #30
 80081d6:	bf49      	itett	mi
 80081d8:	085b      	lsrmi	r3, r3, #1
 80081da:	089b      	lsrpl	r3, r3, #2
 80081dc:	6003      	strmi	r3, [r0, #0]
 80081de:	2201      	movmi	r2, #1
 80081e0:	bf5c      	itt	pl
 80081e2:	6003      	strpl	r3, [r0, #0]
 80081e4:	2202      	movpl	r2, #2
 80081e6:	4610      	mov	r0, r2
 80081e8:	4770      	bx	lr
 80081ea:	b299      	uxth	r1, r3
 80081ec:	b909      	cbnz	r1, 80081f2 <__lo0bits+0x2a>
 80081ee:	0c1b      	lsrs	r3, r3, #16
 80081f0:	2210      	movs	r2, #16
 80081f2:	b2d9      	uxtb	r1, r3
 80081f4:	b909      	cbnz	r1, 80081fa <__lo0bits+0x32>
 80081f6:	3208      	adds	r2, #8
 80081f8:	0a1b      	lsrs	r3, r3, #8
 80081fa:	0719      	lsls	r1, r3, #28
 80081fc:	bf04      	itt	eq
 80081fe:	091b      	lsreq	r3, r3, #4
 8008200:	3204      	addeq	r2, #4
 8008202:	0799      	lsls	r1, r3, #30
 8008204:	bf04      	itt	eq
 8008206:	089b      	lsreq	r3, r3, #2
 8008208:	3202      	addeq	r2, #2
 800820a:	07d9      	lsls	r1, r3, #31
 800820c:	d403      	bmi.n	8008216 <__lo0bits+0x4e>
 800820e:	085b      	lsrs	r3, r3, #1
 8008210:	f102 0201 	add.w	r2, r2, #1
 8008214:	d003      	beq.n	800821e <__lo0bits+0x56>
 8008216:	6003      	str	r3, [r0, #0]
 8008218:	e7e5      	b.n	80081e6 <__lo0bits+0x1e>
 800821a:	2200      	movs	r2, #0
 800821c:	e7e3      	b.n	80081e6 <__lo0bits+0x1e>
 800821e:	2220      	movs	r2, #32
 8008220:	e7e1      	b.n	80081e6 <__lo0bits+0x1e>
	...

08008224 <__i2b>:
 8008224:	b510      	push	{r4, lr}
 8008226:	460c      	mov	r4, r1
 8008228:	2101      	movs	r1, #1
 800822a:	f7ff febb 	bl	8007fa4 <_Balloc>
 800822e:	4602      	mov	r2, r0
 8008230:	b928      	cbnz	r0, 800823e <__i2b+0x1a>
 8008232:	4b05      	ldr	r3, [pc, #20]	; (8008248 <__i2b+0x24>)
 8008234:	4805      	ldr	r0, [pc, #20]	; (800824c <__i2b+0x28>)
 8008236:	f240 1145 	movw	r1, #325	; 0x145
 800823a:	f001 fc51 	bl	8009ae0 <__assert_func>
 800823e:	2301      	movs	r3, #1
 8008240:	6144      	str	r4, [r0, #20]
 8008242:	6103      	str	r3, [r0, #16]
 8008244:	bd10      	pop	{r4, pc}
 8008246:	bf00      	nop
 8008248:	0800a93d 	.word	0x0800a93d
 800824c:	0800a94e 	.word	0x0800a94e

08008250 <__multiply>:
 8008250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008254:	4691      	mov	r9, r2
 8008256:	690a      	ldr	r2, [r1, #16]
 8008258:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800825c:	429a      	cmp	r2, r3
 800825e:	bfb8      	it	lt
 8008260:	460b      	movlt	r3, r1
 8008262:	460c      	mov	r4, r1
 8008264:	bfbc      	itt	lt
 8008266:	464c      	movlt	r4, r9
 8008268:	4699      	movlt	r9, r3
 800826a:	6927      	ldr	r7, [r4, #16]
 800826c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008270:	68a3      	ldr	r3, [r4, #8]
 8008272:	6861      	ldr	r1, [r4, #4]
 8008274:	eb07 060a 	add.w	r6, r7, sl
 8008278:	42b3      	cmp	r3, r6
 800827a:	b085      	sub	sp, #20
 800827c:	bfb8      	it	lt
 800827e:	3101      	addlt	r1, #1
 8008280:	f7ff fe90 	bl	8007fa4 <_Balloc>
 8008284:	b930      	cbnz	r0, 8008294 <__multiply+0x44>
 8008286:	4602      	mov	r2, r0
 8008288:	4b44      	ldr	r3, [pc, #272]	; (800839c <__multiply+0x14c>)
 800828a:	4845      	ldr	r0, [pc, #276]	; (80083a0 <__multiply+0x150>)
 800828c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008290:	f001 fc26 	bl	8009ae0 <__assert_func>
 8008294:	f100 0514 	add.w	r5, r0, #20
 8008298:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800829c:	462b      	mov	r3, r5
 800829e:	2200      	movs	r2, #0
 80082a0:	4543      	cmp	r3, r8
 80082a2:	d321      	bcc.n	80082e8 <__multiply+0x98>
 80082a4:	f104 0314 	add.w	r3, r4, #20
 80082a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80082ac:	f109 0314 	add.w	r3, r9, #20
 80082b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80082b4:	9202      	str	r2, [sp, #8]
 80082b6:	1b3a      	subs	r2, r7, r4
 80082b8:	3a15      	subs	r2, #21
 80082ba:	f022 0203 	bic.w	r2, r2, #3
 80082be:	3204      	adds	r2, #4
 80082c0:	f104 0115 	add.w	r1, r4, #21
 80082c4:	428f      	cmp	r7, r1
 80082c6:	bf38      	it	cc
 80082c8:	2204      	movcc	r2, #4
 80082ca:	9201      	str	r2, [sp, #4]
 80082cc:	9a02      	ldr	r2, [sp, #8]
 80082ce:	9303      	str	r3, [sp, #12]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d80c      	bhi.n	80082ee <__multiply+0x9e>
 80082d4:	2e00      	cmp	r6, #0
 80082d6:	dd03      	ble.n	80082e0 <__multiply+0x90>
 80082d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d05b      	beq.n	8008398 <__multiply+0x148>
 80082e0:	6106      	str	r6, [r0, #16]
 80082e2:	b005      	add	sp, #20
 80082e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e8:	f843 2b04 	str.w	r2, [r3], #4
 80082ec:	e7d8      	b.n	80082a0 <__multiply+0x50>
 80082ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80082f2:	f1ba 0f00 	cmp.w	sl, #0
 80082f6:	d024      	beq.n	8008342 <__multiply+0xf2>
 80082f8:	f104 0e14 	add.w	lr, r4, #20
 80082fc:	46a9      	mov	r9, r5
 80082fe:	f04f 0c00 	mov.w	ip, #0
 8008302:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008306:	f8d9 1000 	ldr.w	r1, [r9]
 800830a:	fa1f fb82 	uxth.w	fp, r2
 800830e:	b289      	uxth	r1, r1
 8008310:	fb0a 110b 	mla	r1, sl, fp, r1
 8008314:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008318:	f8d9 2000 	ldr.w	r2, [r9]
 800831c:	4461      	add	r1, ip
 800831e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008322:	fb0a c20b 	mla	r2, sl, fp, ip
 8008326:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800832a:	b289      	uxth	r1, r1
 800832c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008330:	4577      	cmp	r7, lr
 8008332:	f849 1b04 	str.w	r1, [r9], #4
 8008336:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800833a:	d8e2      	bhi.n	8008302 <__multiply+0xb2>
 800833c:	9a01      	ldr	r2, [sp, #4]
 800833e:	f845 c002 	str.w	ip, [r5, r2]
 8008342:	9a03      	ldr	r2, [sp, #12]
 8008344:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008348:	3304      	adds	r3, #4
 800834a:	f1b9 0f00 	cmp.w	r9, #0
 800834e:	d021      	beq.n	8008394 <__multiply+0x144>
 8008350:	6829      	ldr	r1, [r5, #0]
 8008352:	f104 0c14 	add.w	ip, r4, #20
 8008356:	46ae      	mov	lr, r5
 8008358:	f04f 0a00 	mov.w	sl, #0
 800835c:	f8bc b000 	ldrh.w	fp, [ip]
 8008360:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008364:	fb09 220b 	mla	r2, r9, fp, r2
 8008368:	4452      	add	r2, sl
 800836a:	b289      	uxth	r1, r1
 800836c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008370:	f84e 1b04 	str.w	r1, [lr], #4
 8008374:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008378:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800837c:	f8be 1000 	ldrh.w	r1, [lr]
 8008380:	fb09 110a 	mla	r1, r9, sl, r1
 8008384:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008388:	4567      	cmp	r7, ip
 800838a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800838e:	d8e5      	bhi.n	800835c <__multiply+0x10c>
 8008390:	9a01      	ldr	r2, [sp, #4]
 8008392:	50a9      	str	r1, [r5, r2]
 8008394:	3504      	adds	r5, #4
 8008396:	e799      	b.n	80082cc <__multiply+0x7c>
 8008398:	3e01      	subs	r6, #1
 800839a:	e79b      	b.n	80082d4 <__multiply+0x84>
 800839c:	0800a93d 	.word	0x0800a93d
 80083a0:	0800a94e 	.word	0x0800a94e

080083a4 <__pow5mult>:
 80083a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083a8:	4615      	mov	r5, r2
 80083aa:	f012 0203 	ands.w	r2, r2, #3
 80083ae:	4606      	mov	r6, r0
 80083b0:	460f      	mov	r7, r1
 80083b2:	d007      	beq.n	80083c4 <__pow5mult+0x20>
 80083b4:	4c25      	ldr	r4, [pc, #148]	; (800844c <__pow5mult+0xa8>)
 80083b6:	3a01      	subs	r2, #1
 80083b8:	2300      	movs	r3, #0
 80083ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083be:	f7ff fe53 	bl	8008068 <__multadd>
 80083c2:	4607      	mov	r7, r0
 80083c4:	10ad      	asrs	r5, r5, #2
 80083c6:	d03d      	beq.n	8008444 <__pow5mult+0xa0>
 80083c8:	69f4      	ldr	r4, [r6, #28]
 80083ca:	b97c      	cbnz	r4, 80083ec <__pow5mult+0x48>
 80083cc:	2010      	movs	r0, #16
 80083ce:	f7ff fd35 	bl	8007e3c <malloc>
 80083d2:	4602      	mov	r2, r0
 80083d4:	61f0      	str	r0, [r6, #28]
 80083d6:	b928      	cbnz	r0, 80083e4 <__pow5mult+0x40>
 80083d8:	4b1d      	ldr	r3, [pc, #116]	; (8008450 <__pow5mult+0xac>)
 80083da:	481e      	ldr	r0, [pc, #120]	; (8008454 <__pow5mult+0xb0>)
 80083dc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80083e0:	f001 fb7e 	bl	8009ae0 <__assert_func>
 80083e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083e8:	6004      	str	r4, [r0, #0]
 80083ea:	60c4      	str	r4, [r0, #12]
 80083ec:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80083f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083f4:	b94c      	cbnz	r4, 800840a <__pow5mult+0x66>
 80083f6:	f240 2171 	movw	r1, #625	; 0x271
 80083fa:	4630      	mov	r0, r6
 80083fc:	f7ff ff12 	bl	8008224 <__i2b>
 8008400:	2300      	movs	r3, #0
 8008402:	f8c8 0008 	str.w	r0, [r8, #8]
 8008406:	4604      	mov	r4, r0
 8008408:	6003      	str	r3, [r0, #0]
 800840a:	f04f 0900 	mov.w	r9, #0
 800840e:	07eb      	lsls	r3, r5, #31
 8008410:	d50a      	bpl.n	8008428 <__pow5mult+0x84>
 8008412:	4639      	mov	r1, r7
 8008414:	4622      	mov	r2, r4
 8008416:	4630      	mov	r0, r6
 8008418:	f7ff ff1a 	bl	8008250 <__multiply>
 800841c:	4639      	mov	r1, r7
 800841e:	4680      	mov	r8, r0
 8008420:	4630      	mov	r0, r6
 8008422:	f7ff fdff 	bl	8008024 <_Bfree>
 8008426:	4647      	mov	r7, r8
 8008428:	106d      	asrs	r5, r5, #1
 800842a:	d00b      	beq.n	8008444 <__pow5mult+0xa0>
 800842c:	6820      	ldr	r0, [r4, #0]
 800842e:	b938      	cbnz	r0, 8008440 <__pow5mult+0x9c>
 8008430:	4622      	mov	r2, r4
 8008432:	4621      	mov	r1, r4
 8008434:	4630      	mov	r0, r6
 8008436:	f7ff ff0b 	bl	8008250 <__multiply>
 800843a:	6020      	str	r0, [r4, #0]
 800843c:	f8c0 9000 	str.w	r9, [r0]
 8008440:	4604      	mov	r4, r0
 8008442:	e7e4      	b.n	800840e <__pow5mult+0x6a>
 8008444:	4638      	mov	r0, r7
 8008446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800844a:	bf00      	nop
 800844c:	0800aa98 	.word	0x0800aa98
 8008450:	0800a8ce 	.word	0x0800a8ce
 8008454:	0800a94e 	.word	0x0800a94e

08008458 <__lshift>:
 8008458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800845c:	460c      	mov	r4, r1
 800845e:	6849      	ldr	r1, [r1, #4]
 8008460:	6923      	ldr	r3, [r4, #16]
 8008462:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008466:	68a3      	ldr	r3, [r4, #8]
 8008468:	4607      	mov	r7, r0
 800846a:	4691      	mov	r9, r2
 800846c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008470:	f108 0601 	add.w	r6, r8, #1
 8008474:	42b3      	cmp	r3, r6
 8008476:	db0b      	blt.n	8008490 <__lshift+0x38>
 8008478:	4638      	mov	r0, r7
 800847a:	f7ff fd93 	bl	8007fa4 <_Balloc>
 800847e:	4605      	mov	r5, r0
 8008480:	b948      	cbnz	r0, 8008496 <__lshift+0x3e>
 8008482:	4602      	mov	r2, r0
 8008484:	4b28      	ldr	r3, [pc, #160]	; (8008528 <__lshift+0xd0>)
 8008486:	4829      	ldr	r0, [pc, #164]	; (800852c <__lshift+0xd4>)
 8008488:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800848c:	f001 fb28 	bl	8009ae0 <__assert_func>
 8008490:	3101      	adds	r1, #1
 8008492:	005b      	lsls	r3, r3, #1
 8008494:	e7ee      	b.n	8008474 <__lshift+0x1c>
 8008496:	2300      	movs	r3, #0
 8008498:	f100 0114 	add.w	r1, r0, #20
 800849c:	f100 0210 	add.w	r2, r0, #16
 80084a0:	4618      	mov	r0, r3
 80084a2:	4553      	cmp	r3, sl
 80084a4:	db33      	blt.n	800850e <__lshift+0xb6>
 80084a6:	6920      	ldr	r0, [r4, #16]
 80084a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084ac:	f104 0314 	add.w	r3, r4, #20
 80084b0:	f019 091f 	ands.w	r9, r9, #31
 80084b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084bc:	d02b      	beq.n	8008516 <__lshift+0xbe>
 80084be:	f1c9 0e20 	rsb	lr, r9, #32
 80084c2:	468a      	mov	sl, r1
 80084c4:	2200      	movs	r2, #0
 80084c6:	6818      	ldr	r0, [r3, #0]
 80084c8:	fa00 f009 	lsl.w	r0, r0, r9
 80084cc:	4310      	orrs	r0, r2
 80084ce:	f84a 0b04 	str.w	r0, [sl], #4
 80084d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80084d6:	459c      	cmp	ip, r3
 80084d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80084dc:	d8f3      	bhi.n	80084c6 <__lshift+0x6e>
 80084de:	ebac 0304 	sub.w	r3, ip, r4
 80084e2:	3b15      	subs	r3, #21
 80084e4:	f023 0303 	bic.w	r3, r3, #3
 80084e8:	3304      	adds	r3, #4
 80084ea:	f104 0015 	add.w	r0, r4, #21
 80084ee:	4584      	cmp	ip, r0
 80084f0:	bf38      	it	cc
 80084f2:	2304      	movcc	r3, #4
 80084f4:	50ca      	str	r2, [r1, r3]
 80084f6:	b10a      	cbz	r2, 80084fc <__lshift+0xa4>
 80084f8:	f108 0602 	add.w	r6, r8, #2
 80084fc:	3e01      	subs	r6, #1
 80084fe:	4638      	mov	r0, r7
 8008500:	612e      	str	r6, [r5, #16]
 8008502:	4621      	mov	r1, r4
 8008504:	f7ff fd8e 	bl	8008024 <_Bfree>
 8008508:	4628      	mov	r0, r5
 800850a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800850e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008512:	3301      	adds	r3, #1
 8008514:	e7c5      	b.n	80084a2 <__lshift+0x4a>
 8008516:	3904      	subs	r1, #4
 8008518:	f853 2b04 	ldr.w	r2, [r3], #4
 800851c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008520:	459c      	cmp	ip, r3
 8008522:	d8f9      	bhi.n	8008518 <__lshift+0xc0>
 8008524:	e7ea      	b.n	80084fc <__lshift+0xa4>
 8008526:	bf00      	nop
 8008528:	0800a93d 	.word	0x0800a93d
 800852c:	0800a94e 	.word	0x0800a94e

08008530 <__mcmp>:
 8008530:	b530      	push	{r4, r5, lr}
 8008532:	6902      	ldr	r2, [r0, #16]
 8008534:	690c      	ldr	r4, [r1, #16]
 8008536:	1b12      	subs	r2, r2, r4
 8008538:	d10e      	bne.n	8008558 <__mcmp+0x28>
 800853a:	f100 0314 	add.w	r3, r0, #20
 800853e:	3114      	adds	r1, #20
 8008540:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008544:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008548:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800854c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008550:	42a5      	cmp	r5, r4
 8008552:	d003      	beq.n	800855c <__mcmp+0x2c>
 8008554:	d305      	bcc.n	8008562 <__mcmp+0x32>
 8008556:	2201      	movs	r2, #1
 8008558:	4610      	mov	r0, r2
 800855a:	bd30      	pop	{r4, r5, pc}
 800855c:	4283      	cmp	r3, r0
 800855e:	d3f3      	bcc.n	8008548 <__mcmp+0x18>
 8008560:	e7fa      	b.n	8008558 <__mcmp+0x28>
 8008562:	f04f 32ff 	mov.w	r2, #4294967295
 8008566:	e7f7      	b.n	8008558 <__mcmp+0x28>

08008568 <__mdiff>:
 8008568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856c:	460c      	mov	r4, r1
 800856e:	4606      	mov	r6, r0
 8008570:	4611      	mov	r1, r2
 8008572:	4620      	mov	r0, r4
 8008574:	4690      	mov	r8, r2
 8008576:	f7ff ffdb 	bl	8008530 <__mcmp>
 800857a:	1e05      	subs	r5, r0, #0
 800857c:	d110      	bne.n	80085a0 <__mdiff+0x38>
 800857e:	4629      	mov	r1, r5
 8008580:	4630      	mov	r0, r6
 8008582:	f7ff fd0f 	bl	8007fa4 <_Balloc>
 8008586:	b930      	cbnz	r0, 8008596 <__mdiff+0x2e>
 8008588:	4b3a      	ldr	r3, [pc, #232]	; (8008674 <__mdiff+0x10c>)
 800858a:	4602      	mov	r2, r0
 800858c:	f240 2137 	movw	r1, #567	; 0x237
 8008590:	4839      	ldr	r0, [pc, #228]	; (8008678 <__mdiff+0x110>)
 8008592:	f001 faa5 	bl	8009ae0 <__assert_func>
 8008596:	2301      	movs	r3, #1
 8008598:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800859c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a0:	bfa4      	itt	ge
 80085a2:	4643      	movge	r3, r8
 80085a4:	46a0      	movge	r8, r4
 80085a6:	4630      	mov	r0, r6
 80085a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80085ac:	bfa6      	itte	ge
 80085ae:	461c      	movge	r4, r3
 80085b0:	2500      	movge	r5, #0
 80085b2:	2501      	movlt	r5, #1
 80085b4:	f7ff fcf6 	bl	8007fa4 <_Balloc>
 80085b8:	b920      	cbnz	r0, 80085c4 <__mdiff+0x5c>
 80085ba:	4b2e      	ldr	r3, [pc, #184]	; (8008674 <__mdiff+0x10c>)
 80085bc:	4602      	mov	r2, r0
 80085be:	f240 2145 	movw	r1, #581	; 0x245
 80085c2:	e7e5      	b.n	8008590 <__mdiff+0x28>
 80085c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80085c8:	6926      	ldr	r6, [r4, #16]
 80085ca:	60c5      	str	r5, [r0, #12]
 80085cc:	f104 0914 	add.w	r9, r4, #20
 80085d0:	f108 0514 	add.w	r5, r8, #20
 80085d4:	f100 0e14 	add.w	lr, r0, #20
 80085d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80085dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80085e0:	f108 0210 	add.w	r2, r8, #16
 80085e4:	46f2      	mov	sl, lr
 80085e6:	2100      	movs	r1, #0
 80085e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80085ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80085f0:	fa11 f88b 	uxtah	r8, r1, fp
 80085f4:	b299      	uxth	r1, r3
 80085f6:	0c1b      	lsrs	r3, r3, #16
 80085f8:	eba8 0801 	sub.w	r8, r8, r1
 80085fc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008600:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008604:	fa1f f888 	uxth.w	r8, r8
 8008608:	1419      	asrs	r1, r3, #16
 800860a:	454e      	cmp	r6, r9
 800860c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008610:	f84a 3b04 	str.w	r3, [sl], #4
 8008614:	d8e8      	bhi.n	80085e8 <__mdiff+0x80>
 8008616:	1b33      	subs	r3, r6, r4
 8008618:	3b15      	subs	r3, #21
 800861a:	f023 0303 	bic.w	r3, r3, #3
 800861e:	3304      	adds	r3, #4
 8008620:	3415      	adds	r4, #21
 8008622:	42a6      	cmp	r6, r4
 8008624:	bf38      	it	cc
 8008626:	2304      	movcc	r3, #4
 8008628:	441d      	add	r5, r3
 800862a:	4473      	add	r3, lr
 800862c:	469e      	mov	lr, r3
 800862e:	462e      	mov	r6, r5
 8008630:	4566      	cmp	r6, ip
 8008632:	d30e      	bcc.n	8008652 <__mdiff+0xea>
 8008634:	f10c 0203 	add.w	r2, ip, #3
 8008638:	1b52      	subs	r2, r2, r5
 800863a:	f022 0203 	bic.w	r2, r2, #3
 800863e:	3d03      	subs	r5, #3
 8008640:	45ac      	cmp	ip, r5
 8008642:	bf38      	it	cc
 8008644:	2200      	movcc	r2, #0
 8008646:	4413      	add	r3, r2
 8008648:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800864c:	b17a      	cbz	r2, 800866e <__mdiff+0x106>
 800864e:	6107      	str	r7, [r0, #16]
 8008650:	e7a4      	b.n	800859c <__mdiff+0x34>
 8008652:	f856 8b04 	ldr.w	r8, [r6], #4
 8008656:	fa11 f288 	uxtah	r2, r1, r8
 800865a:	1414      	asrs	r4, r2, #16
 800865c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008660:	b292      	uxth	r2, r2
 8008662:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008666:	f84e 2b04 	str.w	r2, [lr], #4
 800866a:	1421      	asrs	r1, r4, #16
 800866c:	e7e0      	b.n	8008630 <__mdiff+0xc8>
 800866e:	3f01      	subs	r7, #1
 8008670:	e7ea      	b.n	8008648 <__mdiff+0xe0>
 8008672:	bf00      	nop
 8008674:	0800a93d 	.word	0x0800a93d
 8008678:	0800a94e 	.word	0x0800a94e

0800867c <__ulp>:
 800867c:	b082      	sub	sp, #8
 800867e:	ed8d 0b00 	vstr	d0, [sp]
 8008682:	9a01      	ldr	r2, [sp, #4]
 8008684:	4b0f      	ldr	r3, [pc, #60]	; (80086c4 <__ulp+0x48>)
 8008686:	4013      	ands	r3, r2
 8008688:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800868c:	2b00      	cmp	r3, #0
 800868e:	dc08      	bgt.n	80086a2 <__ulp+0x26>
 8008690:	425b      	negs	r3, r3
 8008692:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008696:	ea4f 5223 	mov.w	r2, r3, asr #20
 800869a:	da04      	bge.n	80086a6 <__ulp+0x2a>
 800869c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80086a0:	4113      	asrs	r3, r2
 80086a2:	2200      	movs	r2, #0
 80086a4:	e008      	b.n	80086b8 <__ulp+0x3c>
 80086a6:	f1a2 0314 	sub.w	r3, r2, #20
 80086aa:	2b1e      	cmp	r3, #30
 80086ac:	bfda      	itte	le
 80086ae:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80086b2:	40da      	lsrle	r2, r3
 80086b4:	2201      	movgt	r2, #1
 80086b6:	2300      	movs	r3, #0
 80086b8:	4619      	mov	r1, r3
 80086ba:	4610      	mov	r0, r2
 80086bc:	ec41 0b10 	vmov	d0, r0, r1
 80086c0:	b002      	add	sp, #8
 80086c2:	4770      	bx	lr
 80086c4:	7ff00000 	.word	0x7ff00000

080086c8 <__b2d>:
 80086c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086cc:	6906      	ldr	r6, [r0, #16]
 80086ce:	f100 0814 	add.w	r8, r0, #20
 80086d2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80086d6:	1f37      	subs	r7, r6, #4
 80086d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80086dc:	4610      	mov	r0, r2
 80086de:	f7ff fd53 	bl	8008188 <__hi0bits>
 80086e2:	f1c0 0320 	rsb	r3, r0, #32
 80086e6:	280a      	cmp	r0, #10
 80086e8:	600b      	str	r3, [r1, #0]
 80086ea:	491b      	ldr	r1, [pc, #108]	; (8008758 <__b2d+0x90>)
 80086ec:	dc15      	bgt.n	800871a <__b2d+0x52>
 80086ee:	f1c0 0c0b 	rsb	ip, r0, #11
 80086f2:	fa22 f30c 	lsr.w	r3, r2, ip
 80086f6:	45b8      	cmp	r8, r7
 80086f8:	ea43 0501 	orr.w	r5, r3, r1
 80086fc:	bf34      	ite	cc
 80086fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008702:	2300      	movcs	r3, #0
 8008704:	3015      	adds	r0, #21
 8008706:	fa02 f000 	lsl.w	r0, r2, r0
 800870a:	fa23 f30c 	lsr.w	r3, r3, ip
 800870e:	4303      	orrs	r3, r0
 8008710:	461c      	mov	r4, r3
 8008712:	ec45 4b10 	vmov	d0, r4, r5
 8008716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800871a:	45b8      	cmp	r8, r7
 800871c:	bf3a      	itte	cc
 800871e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008722:	f1a6 0708 	subcc.w	r7, r6, #8
 8008726:	2300      	movcs	r3, #0
 8008728:	380b      	subs	r0, #11
 800872a:	d012      	beq.n	8008752 <__b2d+0x8a>
 800872c:	f1c0 0120 	rsb	r1, r0, #32
 8008730:	fa23 f401 	lsr.w	r4, r3, r1
 8008734:	4082      	lsls	r2, r0
 8008736:	4322      	orrs	r2, r4
 8008738:	4547      	cmp	r7, r8
 800873a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800873e:	bf8c      	ite	hi
 8008740:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008744:	2200      	movls	r2, #0
 8008746:	4083      	lsls	r3, r0
 8008748:	40ca      	lsrs	r2, r1
 800874a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800874e:	4313      	orrs	r3, r2
 8008750:	e7de      	b.n	8008710 <__b2d+0x48>
 8008752:	ea42 0501 	orr.w	r5, r2, r1
 8008756:	e7db      	b.n	8008710 <__b2d+0x48>
 8008758:	3ff00000 	.word	0x3ff00000

0800875c <__d2b>:
 800875c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008760:	460f      	mov	r7, r1
 8008762:	2101      	movs	r1, #1
 8008764:	ec59 8b10 	vmov	r8, r9, d0
 8008768:	4616      	mov	r6, r2
 800876a:	f7ff fc1b 	bl	8007fa4 <_Balloc>
 800876e:	4604      	mov	r4, r0
 8008770:	b930      	cbnz	r0, 8008780 <__d2b+0x24>
 8008772:	4602      	mov	r2, r0
 8008774:	4b24      	ldr	r3, [pc, #144]	; (8008808 <__d2b+0xac>)
 8008776:	4825      	ldr	r0, [pc, #148]	; (800880c <__d2b+0xb0>)
 8008778:	f240 310f 	movw	r1, #783	; 0x30f
 800877c:	f001 f9b0 	bl	8009ae0 <__assert_func>
 8008780:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008784:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008788:	bb2d      	cbnz	r5, 80087d6 <__d2b+0x7a>
 800878a:	9301      	str	r3, [sp, #4]
 800878c:	f1b8 0300 	subs.w	r3, r8, #0
 8008790:	d026      	beq.n	80087e0 <__d2b+0x84>
 8008792:	4668      	mov	r0, sp
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	f7ff fd17 	bl	80081c8 <__lo0bits>
 800879a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800879e:	b1e8      	cbz	r0, 80087dc <__d2b+0x80>
 80087a0:	f1c0 0320 	rsb	r3, r0, #32
 80087a4:	fa02 f303 	lsl.w	r3, r2, r3
 80087a8:	430b      	orrs	r3, r1
 80087aa:	40c2      	lsrs	r2, r0
 80087ac:	6163      	str	r3, [r4, #20]
 80087ae:	9201      	str	r2, [sp, #4]
 80087b0:	9b01      	ldr	r3, [sp, #4]
 80087b2:	61a3      	str	r3, [r4, #24]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	bf14      	ite	ne
 80087b8:	2202      	movne	r2, #2
 80087ba:	2201      	moveq	r2, #1
 80087bc:	6122      	str	r2, [r4, #16]
 80087be:	b1bd      	cbz	r5, 80087f0 <__d2b+0x94>
 80087c0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80087c4:	4405      	add	r5, r0
 80087c6:	603d      	str	r5, [r7, #0]
 80087c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80087cc:	6030      	str	r0, [r6, #0]
 80087ce:	4620      	mov	r0, r4
 80087d0:	b003      	add	sp, #12
 80087d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087da:	e7d6      	b.n	800878a <__d2b+0x2e>
 80087dc:	6161      	str	r1, [r4, #20]
 80087de:	e7e7      	b.n	80087b0 <__d2b+0x54>
 80087e0:	a801      	add	r0, sp, #4
 80087e2:	f7ff fcf1 	bl	80081c8 <__lo0bits>
 80087e6:	9b01      	ldr	r3, [sp, #4]
 80087e8:	6163      	str	r3, [r4, #20]
 80087ea:	3020      	adds	r0, #32
 80087ec:	2201      	movs	r2, #1
 80087ee:	e7e5      	b.n	80087bc <__d2b+0x60>
 80087f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80087f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80087f8:	6038      	str	r0, [r7, #0]
 80087fa:	6918      	ldr	r0, [r3, #16]
 80087fc:	f7ff fcc4 	bl	8008188 <__hi0bits>
 8008800:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008804:	e7e2      	b.n	80087cc <__d2b+0x70>
 8008806:	bf00      	nop
 8008808:	0800a93d 	.word	0x0800a93d
 800880c:	0800a94e 	.word	0x0800a94e

08008810 <__ratio>:
 8008810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008814:	4688      	mov	r8, r1
 8008816:	4669      	mov	r1, sp
 8008818:	4681      	mov	r9, r0
 800881a:	f7ff ff55 	bl	80086c8 <__b2d>
 800881e:	a901      	add	r1, sp, #4
 8008820:	4640      	mov	r0, r8
 8008822:	ec55 4b10 	vmov	r4, r5, d0
 8008826:	f7ff ff4f 	bl	80086c8 <__b2d>
 800882a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800882e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008832:	eba3 0c02 	sub.w	ip, r3, r2
 8008836:	e9dd 3200 	ldrd	r3, r2, [sp]
 800883a:	1a9b      	subs	r3, r3, r2
 800883c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008840:	ec51 0b10 	vmov	r0, r1, d0
 8008844:	2b00      	cmp	r3, #0
 8008846:	bfd6      	itet	le
 8008848:	460a      	movle	r2, r1
 800884a:	462a      	movgt	r2, r5
 800884c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008850:	468b      	mov	fp, r1
 8008852:	462f      	mov	r7, r5
 8008854:	bfd4      	ite	le
 8008856:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800885a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800885e:	4620      	mov	r0, r4
 8008860:	ee10 2a10 	vmov	r2, s0
 8008864:	465b      	mov	r3, fp
 8008866:	4639      	mov	r1, r7
 8008868:	f7f7 fff0 	bl	800084c <__aeabi_ddiv>
 800886c:	ec41 0b10 	vmov	d0, r0, r1
 8008870:	b003      	add	sp, #12
 8008872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008876 <__copybits>:
 8008876:	3901      	subs	r1, #1
 8008878:	b570      	push	{r4, r5, r6, lr}
 800887a:	1149      	asrs	r1, r1, #5
 800887c:	6914      	ldr	r4, [r2, #16]
 800887e:	3101      	adds	r1, #1
 8008880:	f102 0314 	add.w	r3, r2, #20
 8008884:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008888:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800888c:	1f05      	subs	r5, r0, #4
 800888e:	42a3      	cmp	r3, r4
 8008890:	d30c      	bcc.n	80088ac <__copybits+0x36>
 8008892:	1aa3      	subs	r3, r4, r2
 8008894:	3b11      	subs	r3, #17
 8008896:	f023 0303 	bic.w	r3, r3, #3
 800889a:	3211      	adds	r2, #17
 800889c:	42a2      	cmp	r2, r4
 800889e:	bf88      	it	hi
 80088a0:	2300      	movhi	r3, #0
 80088a2:	4418      	add	r0, r3
 80088a4:	2300      	movs	r3, #0
 80088a6:	4288      	cmp	r0, r1
 80088a8:	d305      	bcc.n	80088b6 <__copybits+0x40>
 80088aa:	bd70      	pop	{r4, r5, r6, pc}
 80088ac:	f853 6b04 	ldr.w	r6, [r3], #4
 80088b0:	f845 6f04 	str.w	r6, [r5, #4]!
 80088b4:	e7eb      	b.n	800888e <__copybits+0x18>
 80088b6:	f840 3b04 	str.w	r3, [r0], #4
 80088ba:	e7f4      	b.n	80088a6 <__copybits+0x30>

080088bc <__any_on>:
 80088bc:	f100 0214 	add.w	r2, r0, #20
 80088c0:	6900      	ldr	r0, [r0, #16]
 80088c2:	114b      	asrs	r3, r1, #5
 80088c4:	4298      	cmp	r0, r3
 80088c6:	b510      	push	{r4, lr}
 80088c8:	db11      	blt.n	80088ee <__any_on+0x32>
 80088ca:	dd0a      	ble.n	80088e2 <__any_on+0x26>
 80088cc:	f011 011f 	ands.w	r1, r1, #31
 80088d0:	d007      	beq.n	80088e2 <__any_on+0x26>
 80088d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80088d6:	fa24 f001 	lsr.w	r0, r4, r1
 80088da:	fa00 f101 	lsl.w	r1, r0, r1
 80088de:	428c      	cmp	r4, r1
 80088e0:	d10b      	bne.n	80088fa <__any_on+0x3e>
 80088e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d803      	bhi.n	80088f2 <__any_on+0x36>
 80088ea:	2000      	movs	r0, #0
 80088ec:	bd10      	pop	{r4, pc}
 80088ee:	4603      	mov	r3, r0
 80088f0:	e7f7      	b.n	80088e2 <__any_on+0x26>
 80088f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80088f6:	2900      	cmp	r1, #0
 80088f8:	d0f5      	beq.n	80088e6 <__any_on+0x2a>
 80088fa:	2001      	movs	r0, #1
 80088fc:	e7f6      	b.n	80088ec <__any_on+0x30>

080088fe <sulp>:
 80088fe:	b570      	push	{r4, r5, r6, lr}
 8008900:	4604      	mov	r4, r0
 8008902:	460d      	mov	r5, r1
 8008904:	ec45 4b10 	vmov	d0, r4, r5
 8008908:	4616      	mov	r6, r2
 800890a:	f7ff feb7 	bl	800867c <__ulp>
 800890e:	ec51 0b10 	vmov	r0, r1, d0
 8008912:	b17e      	cbz	r6, 8008934 <sulp+0x36>
 8008914:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008918:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800891c:	2b00      	cmp	r3, #0
 800891e:	dd09      	ble.n	8008934 <sulp+0x36>
 8008920:	051b      	lsls	r3, r3, #20
 8008922:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008926:	2400      	movs	r4, #0
 8008928:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800892c:	4622      	mov	r2, r4
 800892e:	462b      	mov	r3, r5
 8008930:	f7f7 fe62 	bl	80005f8 <__aeabi_dmul>
 8008934:	bd70      	pop	{r4, r5, r6, pc}
	...

08008938 <_strtod_l>:
 8008938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893c:	ed2d 8b02 	vpush	{d8}
 8008940:	b09b      	sub	sp, #108	; 0x6c
 8008942:	4604      	mov	r4, r0
 8008944:	9213      	str	r2, [sp, #76]	; 0x4c
 8008946:	2200      	movs	r2, #0
 8008948:	9216      	str	r2, [sp, #88]	; 0x58
 800894a:	460d      	mov	r5, r1
 800894c:	f04f 0800 	mov.w	r8, #0
 8008950:	f04f 0900 	mov.w	r9, #0
 8008954:	460a      	mov	r2, r1
 8008956:	9215      	str	r2, [sp, #84]	; 0x54
 8008958:	7811      	ldrb	r1, [r2, #0]
 800895a:	292b      	cmp	r1, #43	; 0x2b
 800895c:	d04c      	beq.n	80089f8 <_strtod_l+0xc0>
 800895e:	d83a      	bhi.n	80089d6 <_strtod_l+0x9e>
 8008960:	290d      	cmp	r1, #13
 8008962:	d834      	bhi.n	80089ce <_strtod_l+0x96>
 8008964:	2908      	cmp	r1, #8
 8008966:	d834      	bhi.n	80089d2 <_strtod_l+0x9a>
 8008968:	2900      	cmp	r1, #0
 800896a:	d03d      	beq.n	80089e8 <_strtod_l+0xb0>
 800896c:	2200      	movs	r2, #0
 800896e:	920a      	str	r2, [sp, #40]	; 0x28
 8008970:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008972:	7832      	ldrb	r2, [r6, #0]
 8008974:	2a30      	cmp	r2, #48	; 0x30
 8008976:	f040 80b4 	bne.w	8008ae2 <_strtod_l+0x1aa>
 800897a:	7872      	ldrb	r2, [r6, #1]
 800897c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008980:	2a58      	cmp	r2, #88	; 0x58
 8008982:	d170      	bne.n	8008a66 <_strtod_l+0x12e>
 8008984:	9302      	str	r3, [sp, #8]
 8008986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008988:	9301      	str	r3, [sp, #4]
 800898a:	ab16      	add	r3, sp, #88	; 0x58
 800898c:	9300      	str	r3, [sp, #0]
 800898e:	4a8e      	ldr	r2, [pc, #568]	; (8008bc8 <_strtod_l+0x290>)
 8008990:	ab17      	add	r3, sp, #92	; 0x5c
 8008992:	a915      	add	r1, sp, #84	; 0x54
 8008994:	4620      	mov	r0, r4
 8008996:	f001 f93f 	bl	8009c18 <__gethex>
 800899a:	f010 070f 	ands.w	r7, r0, #15
 800899e:	4605      	mov	r5, r0
 80089a0:	d005      	beq.n	80089ae <_strtod_l+0x76>
 80089a2:	2f06      	cmp	r7, #6
 80089a4:	d12a      	bne.n	80089fc <_strtod_l+0xc4>
 80089a6:	3601      	adds	r6, #1
 80089a8:	2300      	movs	r3, #0
 80089aa:	9615      	str	r6, [sp, #84]	; 0x54
 80089ac:	930a      	str	r3, [sp, #40]	; 0x28
 80089ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f040 857f 	bne.w	80094b4 <_strtod_l+0xb7c>
 80089b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089b8:	b1db      	cbz	r3, 80089f2 <_strtod_l+0xba>
 80089ba:	4642      	mov	r2, r8
 80089bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80089c0:	ec43 2b10 	vmov	d0, r2, r3
 80089c4:	b01b      	add	sp, #108	; 0x6c
 80089c6:	ecbd 8b02 	vpop	{d8}
 80089ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ce:	2920      	cmp	r1, #32
 80089d0:	d1cc      	bne.n	800896c <_strtod_l+0x34>
 80089d2:	3201      	adds	r2, #1
 80089d4:	e7bf      	b.n	8008956 <_strtod_l+0x1e>
 80089d6:	292d      	cmp	r1, #45	; 0x2d
 80089d8:	d1c8      	bne.n	800896c <_strtod_l+0x34>
 80089da:	2101      	movs	r1, #1
 80089dc:	910a      	str	r1, [sp, #40]	; 0x28
 80089de:	1c51      	adds	r1, r2, #1
 80089e0:	9115      	str	r1, [sp, #84]	; 0x54
 80089e2:	7852      	ldrb	r2, [r2, #1]
 80089e4:	2a00      	cmp	r2, #0
 80089e6:	d1c3      	bne.n	8008970 <_strtod_l+0x38>
 80089e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089ea:	9515      	str	r5, [sp, #84]	; 0x54
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f040 855f 	bne.w	80094b0 <_strtod_l+0xb78>
 80089f2:	4642      	mov	r2, r8
 80089f4:	464b      	mov	r3, r9
 80089f6:	e7e3      	b.n	80089c0 <_strtod_l+0x88>
 80089f8:	2100      	movs	r1, #0
 80089fa:	e7ef      	b.n	80089dc <_strtod_l+0xa4>
 80089fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80089fe:	b13a      	cbz	r2, 8008a10 <_strtod_l+0xd8>
 8008a00:	2135      	movs	r1, #53	; 0x35
 8008a02:	a818      	add	r0, sp, #96	; 0x60
 8008a04:	f7ff ff37 	bl	8008876 <__copybits>
 8008a08:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f7ff fb0a 	bl	8008024 <_Bfree>
 8008a10:	3f01      	subs	r7, #1
 8008a12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008a14:	2f04      	cmp	r7, #4
 8008a16:	d806      	bhi.n	8008a26 <_strtod_l+0xee>
 8008a18:	e8df f007 	tbb	[pc, r7]
 8008a1c:	201d0314 	.word	0x201d0314
 8008a20:	14          	.byte	0x14
 8008a21:	00          	.byte	0x00
 8008a22:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008a26:	05e9      	lsls	r1, r5, #23
 8008a28:	bf48      	it	mi
 8008a2a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008a2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a32:	0d1b      	lsrs	r3, r3, #20
 8008a34:	051b      	lsls	r3, r3, #20
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1b9      	bne.n	80089ae <_strtod_l+0x76>
 8008a3a:	f7fe fb07 	bl	800704c <__errno>
 8008a3e:	2322      	movs	r3, #34	; 0x22
 8008a40:	6003      	str	r3, [r0, #0]
 8008a42:	e7b4      	b.n	80089ae <_strtod_l+0x76>
 8008a44:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008a48:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008a4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008a50:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008a54:	e7e7      	b.n	8008a26 <_strtod_l+0xee>
 8008a56:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008bd0 <_strtod_l+0x298>
 8008a5a:	e7e4      	b.n	8008a26 <_strtod_l+0xee>
 8008a5c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008a60:	f04f 38ff 	mov.w	r8, #4294967295
 8008a64:	e7df      	b.n	8008a26 <_strtod_l+0xee>
 8008a66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a68:	1c5a      	adds	r2, r3, #1
 8008a6a:	9215      	str	r2, [sp, #84]	; 0x54
 8008a6c:	785b      	ldrb	r3, [r3, #1]
 8008a6e:	2b30      	cmp	r3, #48	; 0x30
 8008a70:	d0f9      	beq.n	8008a66 <_strtod_l+0x12e>
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d09b      	beq.n	80089ae <_strtod_l+0x76>
 8008a76:	2301      	movs	r3, #1
 8008a78:	f04f 0a00 	mov.w	sl, #0
 8008a7c:	9304      	str	r3, [sp, #16]
 8008a7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a80:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a82:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008a86:	46d3      	mov	fp, sl
 8008a88:	220a      	movs	r2, #10
 8008a8a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008a8c:	7806      	ldrb	r6, [r0, #0]
 8008a8e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008a92:	b2d9      	uxtb	r1, r3
 8008a94:	2909      	cmp	r1, #9
 8008a96:	d926      	bls.n	8008ae6 <_strtod_l+0x1ae>
 8008a98:	494c      	ldr	r1, [pc, #304]	; (8008bcc <_strtod_l+0x294>)
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f000 ffe6 	bl	8009a6c <strncmp>
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	d030      	beq.n	8008b06 <_strtod_l+0x1ce>
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	4632      	mov	r2, r6
 8008aa8:	9005      	str	r0, [sp, #20]
 8008aaa:	465e      	mov	r6, fp
 8008aac:	4603      	mov	r3, r0
 8008aae:	2a65      	cmp	r2, #101	; 0x65
 8008ab0:	d001      	beq.n	8008ab6 <_strtod_l+0x17e>
 8008ab2:	2a45      	cmp	r2, #69	; 0x45
 8008ab4:	d113      	bne.n	8008ade <_strtod_l+0x1a6>
 8008ab6:	b91e      	cbnz	r6, 8008ac0 <_strtod_l+0x188>
 8008ab8:	9a04      	ldr	r2, [sp, #16]
 8008aba:	4302      	orrs	r2, r0
 8008abc:	d094      	beq.n	80089e8 <_strtod_l+0xb0>
 8008abe:	2600      	movs	r6, #0
 8008ac0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008ac2:	1c6a      	adds	r2, r5, #1
 8008ac4:	9215      	str	r2, [sp, #84]	; 0x54
 8008ac6:	786a      	ldrb	r2, [r5, #1]
 8008ac8:	2a2b      	cmp	r2, #43	; 0x2b
 8008aca:	d074      	beq.n	8008bb6 <_strtod_l+0x27e>
 8008acc:	2a2d      	cmp	r2, #45	; 0x2d
 8008ace:	d078      	beq.n	8008bc2 <_strtod_l+0x28a>
 8008ad0:	f04f 0c00 	mov.w	ip, #0
 8008ad4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008ad8:	2909      	cmp	r1, #9
 8008ada:	d97f      	bls.n	8008bdc <_strtod_l+0x2a4>
 8008adc:	9515      	str	r5, [sp, #84]	; 0x54
 8008ade:	2700      	movs	r7, #0
 8008ae0:	e09e      	b.n	8008c20 <_strtod_l+0x2e8>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	e7c8      	b.n	8008a78 <_strtod_l+0x140>
 8008ae6:	f1bb 0f08 	cmp.w	fp, #8
 8008aea:	bfd8      	it	le
 8008aec:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008aee:	f100 0001 	add.w	r0, r0, #1
 8008af2:	bfda      	itte	le
 8008af4:	fb02 3301 	mlale	r3, r2, r1, r3
 8008af8:	9309      	strle	r3, [sp, #36]	; 0x24
 8008afa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008afe:	f10b 0b01 	add.w	fp, fp, #1
 8008b02:	9015      	str	r0, [sp, #84]	; 0x54
 8008b04:	e7c1      	b.n	8008a8a <_strtod_l+0x152>
 8008b06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b08:	1c5a      	adds	r2, r3, #1
 8008b0a:	9215      	str	r2, [sp, #84]	; 0x54
 8008b0c:	785a      	ldrb	r2, [r3, #1]
 8008b0e:	f1bb 0f00 	cmp.w	fp, #0
 8008b12:	d037      	beq.n	8008b84 <_strtod_l+0x24c>
 8008b14:	9005      	str	r0, [sp, #20]
 8008b16:	465e      	mov	r6, fp
 8008b18:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008b1c:	2b09      	cmp	r3, #9
 8008b1e:	d912      	bls.n	8008b46 <_strtod_l+0x20e>
 8008b20:	2301      	movs	r3, #1
 8008b22:	e7c4      	b.n	8008aae <_strtod_l+0x176>
 8008b24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b26:	1c5a      	adds	r2, r3, #1
 8008b28:	9215      	str	r2, [sp, #84]	; 0x54
 8008b2a:	785a      	ldrb	r2, [r3, #1]
 8008b2c:	3001      	adds	r0, #1
 8008b2e:	2a30      	cmp	r2, #48	; 0x30
 8008b30:	d0f8      	beq.n	8008b24 <_strtod_l+0x1ec>
 8008b32:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008b36:	2b08      	cmp	r3, #8
 8008b38:	f200 84c1 	bhi.w	80094be <_strtod_l+0xb86>
 8008b3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b3e:	9005      	str	r0, [sp, #20]
 8008b40:	2000      	movs	r0, #0
 8008b42:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b44:	4606      	mov	r6, r0
 8008b46:	3a30      	subs	r2, #48	; 0x30
 8008b48:	f100 0301 	add.w	r3, r0, #1
 8008b4c:	d014      	beq.n	8008b78 <_strtod_l+0x240>
 8008b4e:	9905      	ldr	r1, [sp, #20]
 8008b50:	4419      	add	r1, r3
 8008b52:	9105      	str	r1, [sp, #20]
 8008b54:	4633      	mov	r3, r6
 8008b56:	eb00 0c06 	add.w	ip, r0, r6
 8008b5a:	210a      	movs	r1, #10
 8008b5c:	4563      	cmp	r3, ip
 8008b5e:	d113      	bne.n	8008b88 <_strtod_l+0x250>
 8008b60:	1833      	adds	r3, r6, r0
 8008b62:	2b08      	cmp	r3, #8
 8008b64:	f106 0601 	add.w	r6, r6, #1
 8008b68:	4406      	add	r6, r0
 8008b6a:	dc1a      	bgt.n	8008ba2 <_strtod_l+0x26a>
 8008b6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b6e:	230a      	movs	r3, #10
 8008b70:	fb03 2301 	mla	r3, r3, r1, r2
 8008b74:	9309      	str	r3, [sp, #36]	; 0x24
 8008b76:	2300      	movs	r3, #0
 8008b78:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b7a:	1c51      	adds	r1, r2, #1
 8008b7c:	9115      	str	r1, [sp, #84]	; 0x54
 8008b7e:	7852      	ldrb	r2, [r2, #1]
 8008b80:	4618      	mov	r0, r3
 8008b82:	e7c9      	b.n	8008b18 <_strtod_l+0x1e0>
 8008b84:	4658      	mov	r0, fp
 8008b86:	e7d2      	b.n	8008b2e <_strtod_l+0x1f6>
 8008b88:	2b08      	cmp	r3, #8
 8008b8a:	f103 0301 	add.w	r3, r3, #1
 8008b8e:	dc03      	bgt.n	8008b98 <_strtod_l+0x260>
 8008b90:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008b92:	434f      	muls	r7, r1
 8008b94:	9709      	str	r7, [sp, #36]	; 0x24
 8008b96:	e7e1      	b.n	8008b5c <_strtod_l+0x224>
 8008b98:	2b10      	cmp	r3, #16
 8008b9a:	bfd8      	it	le
 8008b9c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008ba0:	e7dc      	b.n	8008b5c <_strtod_l+0x224>
 8008ba2:	2e10      	cmp	r6, #16
 8008ba4:	bfdc      	itt	le
 8008ba6:	230a      	movle	r3, #10
 8008ba8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008bac:	e7e3      	b.n	8008b76 <_strtod_l+0x23e>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	9305      	str	r3, [sp, #20]
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e780      	b.n	8008ab8 <_strtod_l+0x180>
 8008bb6:	f04f 0c00 	mov.w	ip, #0
 8008bba:	1caa      	adds	r2, r5, #2
 8008bbc:	9215      	str	r2, [sp, #84]	; 0x54
 8008bbe:	78aa      	ldrb	r2, [r5, #2]
 8008bc0:	e788      	b.n	8008ad4 <_strtod_l+0x19c>
 8008bc2:	f04f 0c01 	mov.w	ip, #1
 8008bc6:	e7f8      	b.n	8008bba <_strtod_l+0x282>
 8008bc8:	0800aaa8 	.word	0x0800aaa8
 8008bcc:	0800aaa4 	.word	0x0800aaa4
 8008bd0:	7ff00000 	.word	0x7ff00000
 8008bd4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008bd6:	1c51      	adds	r1, r2, #1
 8008bd8:	9115      	str	r1, [sp, #84]	; 0x54
 8008bda:	7852      	ldrb	r2, [r2, #1]
 8008bdc:	2a30      	cmp	r2, #48	; 0x30
 8008bde:	d0f9      	beq.n	8008bd4 <_strtod_l+0x29c>
 8008be0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008be4:	2908      	cmp	r1, #8
 8008be6:	f63f af7a 	bhi.w	8008ade <_strtod_l+0x1a6>
 8008bea:	3a30      	subs	r2, #48	; 0x30
 8008bec:	9208      	str	r2, [sp, #32]
 8008bee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008bf0:	920c      	str	r2, [sp, #48]	; 0x30
 8008bf2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008bf4:	1c57      	adds	r7, r2, #1
 8008bf6:	9715      	str	r7, [sp, #84]	; 0x54
 8008bf8:	7852      	ldrb	r2, [r2, #1]
 8008bfa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008bfe:	f1be 0f09 	cmp.w	lr, #9
 8008c02:	d938      	bls.n	8008c76 <_strtod_l+0x33e>
 8008c04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c06:	1a7f      	subs	r7, r7, r1
 8008c08:	2f08      	cmp	r7, #8
 8008c0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008c0e:	dc03      	bgt.n	8008c18 <_strtod_l+0x2e0>
 8008c10:	9908      	ldr	r1, [sp, #32]
 8008c12:	428f      	cmp	r7, r1
 8008c14:	bfa8      	it	ge
 8008c16:	460f      	movge	r7, r1
 8008c18:	f1bc 0f00 	cmp.w	ip, #0
 8008c1c:	d000      	beq.n	8008c20 <_strtod_l+0x2e8>
 8008c1e:	427f      	negs	r7, r7
 8008c20:	2e00      	cmp	r6, #0
 8008c22:	d14f      	bne.n	8008cc4 <_strtod_l+0x38c>
 8008c24:	9904      	ldr	r1, [sp, #16]
 8008c26:	4301      	orrs	r1, r0
 8008c28:	f47f aec1 	bne.w	80089ae <_strtod_l+0x76>
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f47f aedb 	bne.w	80089e8 <_strtod_l+0xb0>
 8008c32:	2a69      	cmp	r2, #105	; 0x69
 8008c34:	d029      	beq.n	8008c8a <_strtod_l+0x352>
 8008c36:	dc26      	bgt.n	8008c86 <_strtod_l+0x34e>
 8008c38:	2a49      	cmp	r2, #73	; 0x49
 8008c3a:	d026      	beq.n	8008c8a <_strtod_l+0x352>
 8008c3c:	2a4e      	cmp	r2, #78	; 0x4e
 8008c3e:	f47f aed3 	bne.w	80089e8 <_strtod_l+0xb0>
 8008c42:	499b      	ldr	r1, [pc, #620]	; (8008eb0 <_strtod_l+0x578>)
 8008c44:	a815      	add	r0, sp, #84	; 0x54
 8008c46:	f001 fa27 	bl	800a098 <__match>
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	f43f aecc 	beq.w	80089e8 <_strtod_l+0xb0>
 8008c50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	2b28      	cmp	r3, #40	; 0x28
 8008c56:	d12f      	bne.n	8008cb8 <_strtod_l+0x380>
 8008c58:	4996      	ldr	r1, [pc, #600]	; (8008eb4 <_strtod_l+0x57c>)
 8008c5a:	aa18      	add	r2, sp, #96	; 0x60
 8008c5c:	a815      	add	r0, sp, #84	; 0x54
 8008c5e:	f001 fa2f 	bl	800a0c0 <__hexnan>
 8008c62:	2805      	cmp	r0, #5
 8008c64:	d128      	bne.n	8008cb8 <_strtod_l+0x380>
 8008c66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008c6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008c70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008c74:	e69b      	b.n	80089ae <_strtod_l+0x76>
 8008c76:	9f08      	ldr	r7, [sp, #32]
 8008c78:	210a      	movs	r1, #10
 8008c7a:	fb01 2107 	mla	r1, r1, r7, r2
 8008c7e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008c82:	9208      	str	r2, [sp, #32]
 8008c84:	e7b5      	b.n	8008bf2 <_strtod_l+0x2ba>
 8008c86:	2a6e      	cmp	r2, #110	; 0x6e
 8008c88:	e7d9      	b.n	8008c3e <_strtod_l+0x306>
 8008c8a:	498b      	ldr	r1, [pc, #556]	; (8008eb8 <_strtod_l+0x580>)
 8008c8c:	a815      	add	r0, sp, #84	; 0x54
 8008c8e:	f001 fa03 	bl	800a098 <__match>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	f43f aea8 	beq.w	80089e8 <_strtod_l+0xb0>
 8008c98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c9a:	4988      	ldr	r1, [pc, #544]	; (8008ebc <_strtod_l+0x584>)
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	a815      	add	r0, sp, #84	; 0x54
 8008ca0:	9315      	str	r3, [sp, #84]	; 0x54
 8008ca2:	f001 f9f9 	bl	800a098 <__match>
 8008ca6:	b910      	cbnz	r0, 8008cae <_strtod_l+0x376>
 8008ca8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008caa:	3301      	adds	r3, #1
 8008cac:	9315      	str	r3, [sp, #84]	; 0x54
 8008cae:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008ecc <_strtod_l+0x594>
 8008cb2:	f04f 0800 	mov.w	r8, #0
 8008cb6:	e67a      	b.n	80089ae <_strtod_l+0x76>
 8008cb8:	4881      	ldr	r0, [pc, #516]	; (8008ec0 <_strtod_l+0x588>)
 8008cba:	f000 ff09 	bl	8009ad0 <nan>
 8008cbe:	ec59 8b10 	vmov	r8, r9, d0
 8008cc2:	e674      	b.n	80089ae <_strtod_l+0x76>
 8008cc4:	9b05      	ldr	r3, [sp, #20]
 8008cc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cc8:	1afb      	subs	r3, r7, r3
 8008cca:	f1bb 0f00 	cmp.w	fp, #0
 8008cce:	bf08      	it	eq
 8008cd0:	46b3      	moveq	fp, r6
 8008cd2:	2e10      	cmp	r6, #16
 8008cd4:	9308      	str	r3, [sp, #32]
 8008cd6:	4635      	mov	r5, r6
 8008cd8:	bfa8      	it	ge
 8008cda:	2510      	movge	r5, #16
 8008cdc:	f7f7 fc12 	bl	8000504 <__aeabi_ui2d>
 8008ce0:	2e09      	cmp	r6, #9
 8008ce2:	4680      	mov	r8, r0
 8008ce4:	4689      	mov	r9, r1
 8008ce6:	dd13      	ble.n	8008d10 <_strtod_l+0x3d8>
 8008ce8:	4b76      	ldr	r3, [pc, #472]	; (8008ec4 <_strtod_l+0x58c>)
 8008cea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008cee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008cf2:	f7f7 fc81 	bl	80005f8 <__aeabi_dmul>
 8008cf6:	4680      	mov	r8, r0
 8008cf8:	4650      	mov	r0, sl
 8008cfa:	4689      	mov	r9, r1
 8008cfc:	f7f7 fc02 	bl	8000504 <__aeabi_ui2d>
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	4640      	mov	r0, r8
 8008d06:	4649      	mov	r1, r9
 8008d08:	f7f7 fac0 	bl	800028c <__adddf3>
 8008d0c:	4680      	mov	r8, r0
 8008d0e:	4689      	mov	r9, r1
 8008d10:	2e0f      	cmp	r6, #15
 8008d12:	dc38      	bgt.n	8008d86 <_strtod_l+0x44e>
 8008d14:	9b08      	ldr	r3, [sp, #32]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f43f ae49 	beq.w	80089ae <_strtod_l+0x76>
 8008d1c:	dd24      	ble.n	8008d68 <_strtod_l+0x430>
 8008d1e:	2b16      	cmp	r3, #22
 8008d20:	dc0b      	bgt.n	8008d3a <_strtod_l+0x402>
 8008d22:	4968      	ldr	r1, [pc, #416]	; (8008ec4 <_strtod_l+0x58c>)
 8008d24:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d2c:	4642      	mov	r2, r8
 8008d2e:	464b      	mov	r3, r9
 8008d30:	f7f7 fc62 	bl	80005f8 <__aeabi_dmul>
 8008d34:	4680      	mov	r8, r0
 8008d36:	4689      	mov	r9, r1
 8008d38:	e639      	b.n	80089ae <_strtod_l+0x76>
 8008d3a:	9a08      	ldr	r2, [sp, #32]
 8008d3c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008d40:	4293      	cmp	r3, r2
 8008d42:	db20      	blt.n	8008d86 <_strtod_l+0x44e>
 8008d44:	4c5f      	ldr	r4, [pc, #380]	; (8008ec4 <_strtod_l+0x58c>)
 8008d46:	f1c6 060f 	rsb	r6, r6, #15
 8008d4a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008d4e:	4642      	mov	r2, r8
 8008d50:	464b      	mov	r3, r9
 8008d52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d56:	f7f7 fc4f 	bl	80005f8 <__aeabi_dmul>
 8008d5a:	9b08      	ldr	r3, [sp, #32]
 8008d5c:	1b9e      	subs	r6, r3, r6
 8008d5e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008d62:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008d66:	e7e3      	b.n	8008d30 <_strtod_l+0x3f8>
 8008d68:	9b08      	ldr	r3, [sp, #32]
 8008d6a:	3316      	adds	r3, #22
 8008d6c:	db0b      	blt.n	8008d86 <_strtod_l+0x44e>
 8008d6e:	9b05      	ldr	r3, [sp, #20]
 8008d70:	1bdf      	subs	r7, r3, r7
 8008d72:	4b54      	ldr	r3, [pc, #336]	; (8008ec4 <_strtod_l+0x58c>)
 8008d74:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008d78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d7c:	4640      	mov	r0, r8
 8008d7e:	4649      	mov	r1, r9
 8008d80:	f7f7 fd64 	bl	800084c <__aeabi_ddiv>
 8008d84:	e7d6      	b.n	8008d34 <_strtod_l+0x3fc>
 8008d86:	9b08      	ldr	r3, [sp, #32]
 8008d88:	1b75      	subs	r5, r6, r5
 8008d8a:	441d      	add	r5, r3
 8008d8c:	2d00      	cmp	r5, #0
 8008d8e:	dd70      	ble.n	8008e72 <_strtod_l+0x53a>
 8008d90:	f015 030f 	ands.w	r3, r5, #15
 8008d94:	d00a      	beq.n	8008dac <_strtod_l+0x474>
 8008d96:	494b      	ldr	r1, [pc, #300]	; (8008ec4 <_strtod_l+0x58c>)
 8008d98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d9c:	4642      	mov	r2, r8
 8008d9e:	464b      	mov	r3, r9
 8008da0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008da4:	f7f7 fc28 	bl	80005f8 <__aeabi_dmul>
 8008da8:	4680      	mov	r8, r0
 8008daa:	4689      	mov	r9, r1
 8008dac:	f035 050f 	bics.w	r5, r5, #15
 8008db0:	d04d      	beq.n	8008e4e <_strtod_l+0x516>
 8008db2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008db6:	dd22      	ble.n	8008dfe <_strtod_l+0x4c6>
 8008db8:	2500      	movs	r5, #0
 8008dba:	46ab      	mov	fp, r5
 8008dbc:	9509      	str	r5, [sp, #36]	; 0x24
 8008dbe:	9505      	str	r5, [sp, #20]
 8008dc0:	2322      	movs	r3, #34	; 0x22
 8008dc2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008ecc <_strtod_l+0x594>
 8008dc6:	6023      	str	r3, [r4, #0]
 8008dc8:	f04f 0800 	mov.w	r8, #0
 8008dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f43f aded 	beq.w	80089ae <_strtod_l+0x76>
 8008dd4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	f7ff f924 	bl	8008024 <_Bfree>
 8008ddc:	9905      	ldr	r1, [sp, #20]
 8008dde:	4620      	mov	r0, r4
 8008de0:	f7ff f920 	bl	8008024 <_Bfree>
 8008de4:	4659      	mov	r1, fp
 8008de6:	4620      	mov	r0, r4
 8008de8:	f7ff f91c 	bl	8008024 <_Bfree>
 8008dec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dee:	4620      	mov	r0, r4
 8008df0:	f7ff f918 	bl	8008024 <_Bfree>
 8008df4:	4629      	mov	r1, r5
 8008df6:	4620      	mov	r0, r4
 8008df8:	f7ff f914 	bl	8008024 <_Bfree>
 8008dfc:	e5d7      	b.n	80089ae <_strtod_l+0x76>
 8008dfe:	4b32      	ldr	r3, [pc, #200]	; (8008ec8 <_strtod_l+0x590>)
 8008e00:	9304      	str	r3, [sp, #16]
 8008e02:	2300      	movs	r3, #0
 8008e04:	112d      	asrs	r5, r5, #4
 8008e06:	4640      	mov	r0, r8
 8008e08:	4649      	mov	r1, r9
 8008e0a:	469a      	mov	sl, r3
 8008e0c:	2d01      	cmp	r5, #1
 8008e0e:	dc21      	bgt.n	8008e54 <_strtod_l+0x51c>
 8008e10:	b10b      	cbz	r3, 8008e16 <_strtod_l+0x4de>
 8008e12:	4680      	mov	r8, r0
 8008e14:	4689      	mov	r9, r1
 8008e16:	492c      	ldr	r1, [pc, #176]	; (8008ec8 <_strtod_l+0x590>)
 8008e18:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008e1c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008e20:	4642      	mov	r2, r8
 8008e22:	464b      	mov	r3, r9
 8008e24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e28:	f7f7 fbe6 	bl	80005f8 <__aeabi_dmul>
 8008e2c:	4b27      	ldr	r3, [pc, #156]	; (8008ecc <_strtod_l+0x594>)
 8008e2e:	460a      	mov	r2, r1
 8008e30:	400b      	ands	r3, r1
 8008e32:	4927      	ldr	r1, [pc, #156]	; (8008ed0 <_strtod_l+0x598>)
 8008e34:	428b      	cmp	r3, r1
 8008e36:	4680      	mov	r8, r0
 8008e38:	d8be      	bhi.n	8008db8 <_strtod_l+0x480>
 8008e3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008e3e:	428b      	cmp	r3, r1
 8008e40:	bf86      	itte	hi
 8008e42:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008ed4 <_strtod_l+0x59c>
 8008e46:	f04f 38ff 	movhi.w	r8, #4294967295
 8008e4a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008e4e:	2300      	movs	r3, #0
 8008e50:	9304      	str	r3, [sp, #16]
 8008e52:	e07b      	b.n	8008f4c <_strtod_l+0x614>
 8008e54:	07ea      	lsls	r2, r5, #31
 8008e56:	d505      	bpl.n	8008e64 <_strtod_l+0x52c>
 8008e58:	9b04      	ldr	r3, [sp, #16]
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	f7f7 fbcb 	bl	80005f8 <__aeabi_dmul>
 8008e62:	2301      	movs	r3, #1
 8008e64:	9a04      	ldr	r2, [sp, #16]
 8008e66:	3208      	adds	r2, #8
 8008e68:	f10a 0a01 	add.w	sl, sl, #1
 8008e6c:	106d      	asrs	r5, r5, #1
 8008e6e:	9204      	str	r2, [sp, #16]
 8008e70:	e7cc      	b.n	8008e0c <_strtod_l+0x4d4>
 8008e72:	d0ec      	beq.n	8008e4e <_strtod_l+0x516>
 8008e74:	426d      	negs	r5, r5
 8008e76:	f015 020f 	ands.w	r2, r5, #15
 8008e7a:	d00a      	beq.n	8008e92 <_strtod_l+0x55a>
 8008e7c:	4b11      	ldr	r3, [pc, #68]	; (8008ec4 <_strtod_l+0x58c>)
 8008e7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e82:	4640      	mov	r0, r8
 8008e84:	4649      	mov	r1, r9
 8008e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8a:	f7f7 fcdf 	bl	800084c <__aeabi_ddiv>
 8008e8e:	4680      	mov	r8, r0
 8008e90:	4689      	mov	r9, r1
 8008e92:	112d      	asrs	r5, r5, #4
 8008e94:	d0db      	beq.n	8008e4e <_strtod_l+0x516>
 8008e96:	2d1f      	cmp	r5, #31
 8008e98:	dd1e      	ble.n	8008ed8 <_strtod_l+0x5a0>
 8008e9a:	2500      	movs	r5, #0
 8008e9c:	46ab      	mov	fp, r5
 8008e9e:	9509      	str	r5, [sp, #36]	; 0x24
 8008ea0:	9505      	str	r5, [sp, #20]
 8008ea2:	2322      	movs	r3, #34	; 0x22
 8008ea4:	f04f 0800 	mov.w	r8, #0
 8008ea8:	f04f 0900 	mov.w	r9, #0
 8008eac:	6023      	str	r3, [r4, #0]
 8008eae:	e78d      	b.n	8008dcc <_strtod_l+0x494>
 8008eb0:	0800a895 	.word	0x0800a895
 8008eb4:	0800aabc 	.word	0x0800aabc
 8008eb8:	0800a88d 	.word	0x0800a88d
 8008ebc:	0800a8c4 	.word	0x0800a8c4
 8008ec0:	0800ac4d 	.word	0x0800ac4d
 8008ec4:	0800a9d0 	.word	0x0800a9d0
 8008ec8:	0800a9a8 	.word	0x0800a9a8
 8008ecc:	7ff00000 	.word	0x7ff00000
 8008ed0:	7ca00000 	.word	0x7ca00000
 8008ed4:	7fefffff 	.word	0x7fefffff
 8008ed8:	f015 0310 	ands.w	r3, r5, #16
 8008edc:	bf18      	it	ne
 8008ede:	236a      	movne	r3, #106	; 0x6a
 8008ee0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8009284 <_strtod_l+0x94c>
 8008ee4:	9304      	str	r3, [sp, #16]
 8008ee6:	4640      	mov	r0, r8
 8008ee8:	4649      	mov	r1, r9
 8008eea:	2300      	movs	r3, #0
 8008eec:	07ea      	lsls	r2, r5, #31
 8008eee:	d504      	bpl.n	8008efa <_strtod_l+0x5c2>
 8008ef0:	e9da 2300 	ldrd	r2, r3, [sl]
 8008ef4:	f7f7 fb80 	bl	80005f8 <__aeabi_dmul>
 8008ef8:	2301      	movs	r3, #1
 8008efa:	106d      	asrs	r5, r5, #1
 8008efc:	f10a 0a08 	add.w	sl, sl, #8
 8008f00:	d1f4      	bne.n	8008eec <_strtod_l+0x5b4>
 8008f02:	b10b      	cbz	r3, 8008f08 <_strtod_l+0x5d0>
 8008f04:	4680      	mov	r8, r0
 8008f06:	4689      	mov	r9, r1
 8008f08:	9b04      	ldr	r3, [sp, #16]
 8008f0a:	b1bb      	cbz	r3, 8008f3c <_strtod_l+0x604>
 8008f0c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008f10:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	4649      	mov	r1, r9
 8008f18:	dd10      	ble.n	8008f3c <_strtod_l+0x604>
 8008f1a:	2b1f      	cmp	r3, #31
 8008f1c:	f340 811e 	ble.w	800915c <_strtod_l+0x824>
 8008f20:	2b34      	cmp	r3, #52	; 0x34
 8008f22:	bfde      	ittt	le
 8008f24:	f04f 33ff 	movle.w	r3, #4294967295
 8008f28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008f2c:	4093      	lslle	r3, r2
 8008f2e:	f04f 0800 	mov.w	r8, #0
 8008f32:	bfcc      	ite	gt
 8008f34:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008f38:	ea03 0901 	andle.w	r9, r3, r1
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	2300      	movs	r3, #0
 8008f40:	4640      	mov	r0, r8
 8008f42:	4649      	mov	r1, r9
 8008f44:	f7f7 fdc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	d1a6      	bne.n	8008e9a <_strtod_l+0x562>
 8008f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f4e:	9300      	str	r3, [sp, #0]
 8008f50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f52:	4633      	mov	r3, r6
 8008f54:	465a      	mov	r2, fp
 8008f56:	4620      	mov	r0, r4
 8008f58:	f7ff f8cc 	bl	80080f4 <__s2b>
 8008f5c:	9009      	str	r0, [sp, #36]	; 0x24
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	f43f af2a 	beq.w	8008db8 <_strtod_l+0x480>
 8008f64:	9a08      	ldr	r2, [sp, #32]
 8008f66:	9b05      	ldr	r3, [sp, #20]
 8008f68:	2a00      	cmp	r2, #0
 8008f6a:	eba3 0307 	sub.w	r3, r3, r7
 8008f6e:	bfa8      	it	ge
 8008f70:	2300      	movge	r3, #0
 8008f72:	930c      	str	r3, [sp, #48]	; 0x30
 8008f74:	2500      	movs	r5, #0
 8008f76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008f7a:	9312      	str	r3, [sp, #72]	; 0x48
 8008f7c:	46ab      	mov	fp, r5
 8008f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f80:	4620      	mov	r0, r4
 8008f82:	6859      	ldr	r1, [r3, #4]
 8008f84:	f7ff f80e 	bl	8007fa4 <_Balloc>
 8008f88:	9005      	str	r0, [sp, #20]
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	f43f af18 	beq.w	8008dc0 <_strtod_l+0x488>
 8008f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f92:	691a      	ldr	r2, [r3, #16]
 8008f94:	3202      	adds	r2, #2
 8008f96:	f103 010c 	add.w	r1, r3, #12
 8008f9a:	0092      	lsls	r2, r2, #2
 8008f9c:	300c      	adds	r0, #12
 8008f9e:	f000 fd87 	bl	8009ab0 <memcpy>
 8008fa2:	ec49 8b10 	vmov	d0, r8, r9
 8008fa6:	aa18      	add	r2, sp, #96	; 0x60
 8008fa8:	a917      	add	r1, sp, #92	; 0x5c
 8008faa:	4620      	mov	r0, r4
 8008fac:	f7ff fbd6 	bl	800875c <__d2b>
 8008fb0:	ec49 8b18 	vmov	d8, r8, r9
 8008fb4:	9016      	str	r0, [sp, #88]	; 0x58
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	f43f af02 	beq.w	8008dc0 <_strtod_l+0x488>
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f7ff f930 	bl	8008224 <__i2b>
 8008fc4:	4683      	mov	fp, r0
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	f43f aefa 	beq.w	8008dc0 <_strtod_l+0x488>
 8008fcc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008fce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008fd0:	2e00      	cmp	r6, #0
 8008fd2:	bfab      	itete	ge
 8008fd4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008fd6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008fd8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008fda:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008fde:	bfac      	ite	ge
 8008fe0:	eb06 0a03 	addge.w	sl, r6, r3
 8008fe4:	1b9f      	sublt	r7, r3, r6
 8008fe6:	9b04      	ldr	r3, [sp, #16]
 8008fe8:	1af6      	subs	r6, r6, r3
 8008fea:	4416      	add	r6, r2
 8008fec:	4ba0      	ldr	r3, [pc, #640]	; (8009270 <_strtod_l+0x938>)
 8008fee:	3e01      	subs	r6, #1
 8008ff0:	429e      	cmp	r6, r3
 8008ff2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008ff6:	f280 80c4 	bge.w	8009182 <_strtod_l+0x84a>
 8008ffa:	1b9b      	subs	r3, r3, r6
 8008ffc:	2b1f      	cmp	r3, #31
 8008ffe:	eba2 0203 	sub.w	r2, r2, r3
 8009002:	f04f 0101 	mov.w	r1, #1
 8009006:	f300 80b0 	bgt.w	800916a <_strtod_l+0x832>
 800900a:	fa01 f303 	lsl.w	r3, r1, r3
 800900e:	930e      	str	r3, [sp, #56]	; 0x38
 8009010:	2300      	movs	r3, #0
 8009012:	930d      	str	r3, [sp, #52]	; 0x34
 8009014:	eb0a 0602 	add.w	r6, sl, r2
 8009018:	9b04      	ldr	r3, [sp, #16]
 800901a:	45b2      	cmp	sl, r6
 800901c:	4417      	add	r7, r2
 800901e:	441f      	add	r7, r3
 8009020:	4653      	mov	r3, sl
 8009022:	bfa8      	it	ge
 8009024:	4633      	movge	r3, r6
 8009026:	42bb      	cmp	r3, r7
 8009028:	bfa8      	it	ge
 800902a:	463b      	movge	r3, r7
 800902c:	2b00      	cmp	r3, #0
 800902e:	bfc2      	ittt	gt
 8009030:	1af6      	subgt	r6, r6, r3
 8009032:	1aff      	subgt	r7, r7, r3
 8009034:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800903a:	2b00      	cmp	r3, #0
 800903c:	dd17      	ble.n	800906e <_strtod_l+0x736>
 800903e:	4659      	mov	r1, fp
 8009040:	461a      	mov	r2, r3
 8009042:	4620      	mov	r0, r4
 8009044:	f7ff f9ae 	bl	80083a4 <__pow5mult>
 8009048:	4683      	mov	fp, r0
 800904a:	2800      	cmp	r0, #0
 800904c:	f43f aeb8 	beq.w	8008dc0 <_strtod_l+0x488>
 8009050:	4601      	mov	r1, r0
 8009052:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009054:	4620      	mov	r0, r4
 8009056:	f7ff f8fb 	bl	8008250 <__multiply>
 800905a:	900b      	str	r0, [sp, #44]	; 0x2c
 800905c:	2800      	cmp	r0, #0
 800905e:	f43f aeaf 	beq.w	8008dc0 <_strtod_l+0x488>
 8009062:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009064:	4620      	mov	r0, r4
 8009066:	f7fe ffdd 	bl	8008024 <_Bfree>
 800906a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800906c:	9316      	str	r3, [sp, #88]	; 0x58
 800906e:	2e00      	cmp	r6, #0
 8009070:	f300 808c 	bgt.w	800918c <_strtod_l+0x854>
 8009074:	9b08      	ldr	r3, [sp, #32]
 8009076:	2b00      	cmp	r3, #0
 8009078:	dd08      	ble.n	800908c <_strtod_l+0x754>
 800907a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800907c:	9905      	ldr	r1, [sp, #20]
 800907e:	4620      	mov	r0, r4
 8009080:	f7ff f990 	bl	80083a4 <__pow5mult>
 8009084:	9005      	str	r0, [sp, #20]
 8009086:	2800      	cmp	r0, #0
 8009088:	f43f ae9a 	beq.w	8008dc0 <_strtod_l+0x488>
 800908c:	2f00      	cmp	r7, #0
 800908e:	dd08      	ble.n	80090a2 <_strtod_l+0x76a>
 8009090:	9905      	ldr	r1, [sp, #20]
 8009092:	463a      	mov	r2, r7
 8009094:	4620      	mov	r0, r4
 8009096:	f7ff f9df 	bl	8008458 <__lshift>
 800909a:	9005      	str	r0, [sp, #20]
 800909c:	2800      	cmp	r0, #0
 800909e:	f43f ae8f 	beq.w	8008dc0 <_strtod_l+0x488>
 80090a2:	f1ba 0f00 	cmp.w	sl, #0
 80090a6:	dd08      	ble.n	80090ba <_strtod_l+0x782>
 80090a8:	4659      	mov	r1, fp
 80090aa:	4652      	mov	r2, sl
 80090ac:	4620      	mov	r0, r4
 80090ae:	f7ff f9d3 	bl	8008458 <__lshift>
 80090b2:	4683      	mov	fp, r0
 80090b4:	2800      	cmp	r0, #0
 80090b6:	f43f ae83 	beq.w	8008dc0 <_strtod_l+0x488>
 80090ba:	9a05      	ldr	r2, [sp, #20]
 80090bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80090be:	4620      	mov	r0, r4
 80090c0:	f7ff fa52 	bl	8008568 <__mdiff>
 80090c4:	4605      	mov	r5, r0
 80090c6:	2800      	cmp	r0, #0
 80090c8:	f43f ae7a 	beq.w	8008dc0 <_strtod_l+0x488>
 80090cc:	68c3      	ldr	r3, [r0, #12]
 80090ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80090d0:	2300      	movs	r3, #0
 80090d2:	60c3      	str	r3, [r0, #12]
 80090d4:	4659      	mov	r1, fp
 80090d6:	f7ff fa2b 	bl	8008530 <__mcmp>
 80090da:	2800      	cmp	r0, #0
 80090dc:	da60      	bge.n	80091a0 <_strtod_l+0x868>
 80090de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090e0:	ea53 0308 	orrs.w	r3, r3, r8
 80090e4:	f040 8084 	bne.w	80091f0 <_strtod_l+0x8b8>
 80090e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d17f      	bne.n	80091f0 <_strtod_l+0x8b8>
 80090f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80090f4:	0d1b      	lsrs	r3, r3, #20
 80090f6:	051b      	lsls	r3, r3, #20
 80090f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80090fc:	d978      	bls.n	80091f0 <_strtod_l+0x8b8>
 80090fe:	696b      	ldr	r3, [r5, #20]
 8009100:	b913      	cbnz	r3, 8009108 <_strtod_l+0x7d0>
 8009102:	692b      	ldr	r3, [r5, #16]
 8009104:	2b01      	cmp	r3, #1
 8009106:	dd73      	ble.n	80091f0 <_strtod_l+0x8b8>
 8009108:	4629      	mov	r1, r5
 800910a:	2201      	movs	r2, #1
 800910c:	4620      	mov	r0, r4
 800910e:	f7ff f9a3 	bl	8008458 <__lshift>
 8009112:	4659      	mov	r1, fp
 8009114:	4605      	mov	r5, r0
 8009116:	f7ff fa0b 	bl	8008530 <__mcmp>
 800911a:	2800      	cmp	r0, #0
 800911c:	dd68      	ble.n	80091f0 <_strtod_l+0x8b8>
 800911e:	9904      	ldr	r1, [sp, #16]
 8009120:	4a54      	ldr	r2, [pc, #336]	; (8009274 <_strtod_l+0x93c>)
 8009122:	464b      	mov	r3, r9
 8009124:	2900      	cmp	r1, #0
 8009126:	f000 8084 	beq.w	8009232 <_strtod_l+0x8fa>
 800912a:	ea02 0109 	and.w	r1, r2, r9
 800912e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009132:	dc7e      	bgt.n	8009232 <_strtod_l+0x8fa>
 8009134:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009138:	f77f aeb3 	ble.w	8008ea2 <_strtod_l+0x56a>
 800913c:	4b4e      	ldr	r3, [pc, #312]	; (8009278 <_strtod_l+0x940>)
 800913e:	4640      	mov	r0, r8
 8009140:	4649      	mov	r1, r9
 8009142:	2200      	movs	r2, #0
 8009144:	f7f7 fa58 	bl	80005f8 <__aeabi_dmul>
 8009148:	4b4a      	ldr	r3, [pc, #296]	; (8009274 <_strtod_l+0x93c>)
 800914a:	400b      	ands	r3, r1
 800914c:	4680      	mov	r8, r0
 800914e:	4689      	mov	r9, r1
 8009150:	2b00      	cmp	r3, #0
 8009152:	f47f ae3f 	bne.w	8008dd4 <_strtod_l+0x49c>
 8009156:	2322      	movs	r3, #34	; 0x22
 8009158:	6023      	str	r3, [r4, #0]
 800915a:	e63b      	b.n	8008dd4 <_strtod_l+0x49c>
 800915c:	f04f 32ff 	mov.w	r2, #4294967295
 8009160:	fa02 f303 	lsl.w	r3, r2, r3
 8009164:	ea03 0808 	and.w	r8, r3, r8
 8009168:	e6e8      	b.n	8008f3c <_strtod_l+0x604>
 800916a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800916e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009172:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009176:	36e2      	adds	r6, #226	; 0xe2
 8009178:	fa01 f306 	lsl.w	r3, r1, r6
 800917c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009180:	e748      	b.n	8009014 <_strtod_l+0x6dc>
 8009182:	2100      	movs	r1, #0
 8009184:	2301      	movs	r3, #1
 8009186:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800918a:	e743      	b.n	8009014 <_strtod_l+0x6dc>
 800918c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800918e:	4632      	mov	r2, r6
 8009190:	4620      	mov	r0, r4
 8009192:	f7ff f961 	bl	8008458 <__lshift>
 8009196:	9016      	str	r0, [sp, #88]	; 0x58
 8009198:	2800      	cmp	r0, #0
 800919a:	f47f af6b 	bne.w	8009074 <_strtod_l+0x73c>
 800919e:	e60f      	b.n	8008dc0 <_strtod_l+0x488>
 80091a0:	46ca      	mov	sl, r9
 80091a2:	d171      	bne.n	8009288 <_strtod_l+0x950>
 80091a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80091a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091aa:	b352      	cbz	r2, 8009202 <_strtod_l+0x8ca>
 80091ac:	4a33      	ldr	r2, [pc, #204]	; (800927c <_strtod_l+0x944>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d12a      	bne.n	8009208 <_strtod_l+0x8d0>
 80091b2:	9b04      	ldr	r3, [sp, #16]
 80091b4:	4641      	mov	r1, r8
 80091b6:	b1fb      	cbz	r3, 80091f8 <_strtod_l+0x8c0>
 80091b8:	4b2e      	ldr	r3, [pc, #184]	; (8009274 <_strtod_l+0x93c>)
 80091ba:	ea09 0303 	and.w	r3, r9, r3
 80091be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80091c2:	f04f 32ff 	mov.w	r2, #4294967295
 80091c6:	d81a      	bhi.n	80091fe <_strtod_l+0x8c6>
 80091c8:	0d1b      	lsrs	r3, r3, #20
 80091ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80091ce:	fa02 f303 	lsl.w	r3, r2, r3
 80091d2:	4299      	cmp	r1, r3
 80091d4:	d118      	bne.n	8009208 <_strtod_l+0x8d0>
 80091d6:	4b2a      	ldr	r3, [pc, #168]	; (8009280 <_strtod_l+0x948>)
 80091d8:	459a      	cmp	sl, r3
 80091da:	d102      	bne.n	80091e2 <_strtod_l+0x8aa>
 80091dc:	3101      	adds	r1, #1
 80091de:	f43f adef 	beq.w	8008dc0 <_strtod_l+0x488>
 80091e2:	4b24      	ldr	r3, [pc, #144]	; (8009274 <_strtod_l+0x93c>)
 80091e4:	ea0a 0303 	and.w	r3, sl, r3
 80091e8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80091ec:	f04f 0800 	mov.w	r8, #0
 80091f0:	9b04      	ldr	r3, [sp, #16]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1a2      	bne.n	800913c <_strtod_l+0x804>
 80091f6:	e5ed      	b.n	8008dd4 <_strtod_l+0x49c>
 80091f8:	f04f 33ff 	mov.w	r3, #4294967295
 80091fc:	e7e9      	b.n	80091d2 <_strtod_l+0x89a>
 80091fe:	4613      	mov	r3, r2
 8009200:	e7e7      	b.n	80091d2 <_strtod_l+0x89a>
 8009202:	ea53 0308 	orrs.w	r3, r3, r8
 8009206:	d08a      	beq.n	800911e <_strtod_l+0x7e6>
 8009208:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800920a:	b1e3      	cbz	r3, 8009246 <_strtod_l+0x90e>
 800920c:	ea13 0f0a 	tst.w	r3, sl
 8009210:	d0ee      	beq.n	80091f0 <_strtod_l+0x8b8>
 8009212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009214:	9a04      	ldr	r2, [sp, #16]
 8009216:	4640      	mov	r0, r8
 8009218:	4649      	mov	r1, r9
 800921a:	b1c3      	cbz	r3, 800924e <_strtod_l+0x916>
 800921c:	f7ff fb6f 	bl	80088fe <sulp>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	ec51 0b18 	vmov	r0, r1, d8
 8009228:	f7f7 f830 	bl	800028c <__adddf3>
 800922c:	4680      	mov	r8, r0
 800922e:	4689      	mov	r9, r1
 8009230:	e7de      	b.n	80091f0 <_strtod_l+0x8b8>
 8009232:	4013      	ands	r3, r2
 8009234:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009238:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800923c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009240:	f04f 38ff 	mov.w	r8, #4294967295
 8009244:	e7d4      	b.n	80091f0 <_strtod_l+0x8b8>
 8009246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009248:	ea13 0f08 	tst.w	r3, r8
 800924c:	e7e0      	b.n	8009210 <_strtod_l+0x8d8>
 800924e:	f7ff fb56 	bl	80088fe <sulp>
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	ec51 0b18 	vmov	r0, r1, d8
 800925a:	f7f7 f815 	bl	8000288 <__aeabi_dsub>
 800925e:	2200      	movs	r2, #0
 8009260:	2300      	movs	r3, #0
 8009262:	4680      	mov	r8, r0
 8009264:	4689      	mov	r9, r1
 8009266:	f7f7 fc2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800926a:	2800      	cmp	r0, #0
 800926c:	d0c0      	beq.n	80091f0 <_strtod_l+0x8b8>
 800926e:	e618      	b.n	8008ea2 <_strtod_l+0x56a>
 8009270:	fffffc02 	.word	0xfffffc02
 8009274:	7ff00000 	.word	0x7ff00000
 8009278:	39500000 	.word	0x39500000
 800927c:	000fffff 	.word	0x000fffff
 8009280:	7fefffff 	.word	0x7fefffff
 8009284:	0800aad0 	.word	0x0800aad0
 8009288:	4659      	mov	r1, fp
 800928a:	4628      	mov	r0, r5
 800928c:	f7ff fac0 	bl	8008810 <__ratio>
 8009290:	ec57 6b10 	vmov	r6, r7, d0
 8009294:	ee10 0a10 	vmov	r0, s0
 8009298:	2200      	movs	r2, #0
 800929a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800929e:	4639      	mov	r1, r7
 80092a0:	f7f7 fc26 	bl	8000af0 <__aeabi_dcmple>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d071      	beq.n	800938c <_strtod_l+0xa54>
 80092a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d17c      	bne.n	80093a8 <_strtod_l+0xa70>
 80092ae:	f1b8 0f00 	cmp.w	r8, #0
 80092b2:	d15a      	bne.n	800936a <_strtod_l+0xa32>
 80092b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d15d      	bne.n	8009378 <_strtod_l+0xa40>
 80092bc:	4b90      	ldr	r3, [pc, #576]	; (8009500 <_strtod_l+0xbc8>)
 80092be:	2200      	movs	r2, #0
 80092c0:	4630      	mov	r0, r6
 80092c2:	4639      	mov	r1, r7
 80092c4:	f7f7 fc0a 	bl	8000adc <__aeabi_dcmplt>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d15c      	bne.n	8009386 <_strtod_l+0xa4e>
 80092cc:	4630      	mov	r0, r6
 80092ce:	4639      	mov	r1, r7
 80092d0:	4b8c      	ldr	r3, [pc, #560]	; (8009504 <_strtod_l+0xbcc>)
 80092d2:	2200      	movs	r2, #0
 80092d4:	f7f7 f990 	bl	80005f8 <__aeabi_dmul>
 80092d8:	4606      	mov	r6, r0
 80092da:	460f      	mov	r7, r1
 80092dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80092e0:	9606      	str	r6, [sp, #24]
 80092e2:	9307      	str	r3, [sp, #28]
 80092e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80092ec:	4b86      	ldr	r3, [pc, #536]	; (8009508 <_strtod_l+0xbd0>)
 80092ee:	ea0a 0303 	and.w	r3, sl, r3
 80092f2:	930d      	str	r3, [sp, #52]	; 0x34
 80092f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80092f6:	4b85      	ldr	r3, [pc, #532]	; (800950c <_strtod_l+0xbd4>)
 80092f8:	429a      	cmp	r2, r3
 80092fa:	f040 8090 	bne.w	800941e <_strtod_l+0xae6>
 80092fe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009302:	ec49 8b10 	vmov	d0, r8, r9
 8009306:	f7ff f9b9 	bl	800867c <__ulp>
 800930a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800930e:	ec51 0b10 	vmov	r0, r1, d0
 8009312:	f7f7 f971 	bl	80005f8 <__aeabi_dmul>
 8009316:	4642      	mov	r2, r8
 8009318:	464b      	mov	r3, r9
 800931a:	f7f6 ffb7 	bl	800028c <__adddf3>
 800931e:	460b      	mov	r3, r1
 8009320:	4979      	ldr	r1, [pc, #484]	; (8009508 <_strtod_l+0xbd0>)
 8009322:	4a7b      	ldr	r2, [pc, #492]	; (8009510 <_strtod_l+0xbd8>)
 8009324:	4019      	ands	r1, r3
 8009326:	4291      	cmp	r1, r2
 8009328:	4680      	mov	r8, r0
 800932a:	d944      	bls.n	80093b6 <_strtod_l+0xa7e>
 800932c:	ee18 2a90 	vmov	r2, s17
 8009330:	4b78      	ldr	r3, [pc, #480]	; (8009514 <_strtod_l+0xbdc>)
 8009332:	429a      	cmp	r2, r3
 8009334:	d104      	bne.n	8009340 <_strtod_l+0xa08>
 8009336:	ee18 3a10 	vmov	r3, s16
 800933a:	3301      	adds	r3, #1
 800933c:	f43f ad40 	beq.w	8008dc0 <_strtod_l+0x488>
 8009340:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009514 <_strtod_l+0xbdc>
 8009344:	f04f 38ff 	mov.w	r8, #4294967295
 8009348:	9916      	ldr	r1, [sp, #88]	; 0x58
 800934a:	4620      	mov	r0, r4
 800934c:	f7fe fe6a 	bl	8008024 <_Bfree>
 8009350:	9905      	ldr	r1, [sp, #20]
 8009352:	4620      	mov	r0, r4
 8009354:	f7fe fe66 	bl	8008024 <_Bfree>
 8009358:	4659      	mov	r1, fp
 800935a:	4620      	mov	r0, r4
 800935c:	f7fe fe62 	bl	8008024 <_Bfree>
 8009360:	4629      	mov	r1, r5
 8009362:	4620      	mov	r0, r4
 8009364:	f7fe fe5e 	bl	8008024 <_Bfree>
 8009368:	e609      	b.n	8008f7e <_strtod_l+0x646>
 800936a:	f1b8 0f01 	cmp.w	r8, #1
 800936e:	d103      	bne.n	8009378 <_strtod_l+0xa40>
 8009370:	f1b9 0f00 	cmp.w	r9, #0
 8009374:	f43f ad95 	beq.w	8008ea2 <_strtod_l+0x56a>
 8009378:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80094d0 <_strtod_l+0xb98>
 800937c:	4f60      	ldr	r7, [pc, #384]	; (8009500 <_strtod_l+0xbc8>)
 800937e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009382:	2600      	movs	r6, #0
 8009384:	e7ae      	b.n	80092e4 <_strtod_l+0x9ac>
 8009386:	4f5f      	ldr	r7, [pc, #380]	; (8009504 <_strtod_l+0xbcc>)
 8009388:	2600      	movs	r6, #0
 800938a:	e7a7      	b.n	80092dc <_strtod_l+0x9a4>
 800938c:	4b5d      	ldr	r3, [pc, #372]	; (8009504 <_strtod_l+0xbcc>)
 800938e:	4630      	mov	r0, r6
 8009390:	4639      	mov	r1, r7
 8009392:	2200      	movs	r2, #0
 8009394:	f7f7 f930 	bl	80005f8 <__aeabi_dmul>
 8009398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800939a:	4606      	mov	r6, r0
 800939c:	460f      	mov	r7, r1
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d09c      	beq.n	80092dc <_strtod_l+0x9a4>
 80093a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80093a6:	e79d      	b.n	80092e4 <_strtod_l+0x9ac>
 80093a8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80094d8 <_strtod_l+0xba0>
 80093ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80093b0:	ec57 6b17 	vmov	r6, r7, d7
 80093b4:	e796      	b.n	80092e4 <_strtod_l+0x9ac>
 80093b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80093ba:	9b04      	ldr	r3, [sp, #16]
 80093bc:	46ca      	mov	sl, r9
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1c2      	bne.n	8009348 <_strtod_l+0xa10>
 80093c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093c8:	0d1b      	lsrs	r3, r3, #20
 80093ca:	051b      	lsls	r3, r3, #20
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d1bb      	bne.n	8009348 <_strtod_l+0xa10>
 80093d0:	4630      	mov	r0, r6
 80093d2:	4639      	mov	r1, r7
 80093d4:	f7f7 fc70 	bl	8000cb8 <__aeabi_d2lz>
 80093d8:	f7f7 f8e0 	bl	800059c <__aeabi_l2d>
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	4630      	mov	r0, r6
 80093e2:	4639      	mov	r1, r7
 80093e4:	f7f6 ff50 	bl	8000288 <__aeabi_dsub>
 80093e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093ee:	ea43 0308 	orr.w	r3, r3, r8
 80093f2:	4313      	orrs	r3, r2
 80093f4:	4606      	mov	r6, r0
 80093f6:	460f      	mov	r7, r1
 80093f8:	d054      	beq.n	80094a4 <_strtod_l+0xb6c>
 80093fa:	a339      	add	r3, pc, #228	; (adr r3, 80094e0 <_strtod_l+0xba8>)
 80093fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009400:	f7f7 fb6c 	bl	8000adc <__aeabi_dcmplt>
 8009404:	2800      	cmp	r0, #0
 8009406:	f47f ace5 	bne.w	8008dd4 <_strtod_l+0x49c>
 800940a:	a337      	add	r3, pc, #220	; (adr r3, 80094e8 <_strtod_l+0xbb0>)
 800940c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009410:	4630      	mov	r0, r6
 8009412:	4639      	mov	r1, r7
 8009414:	f7f7 fb80 	bl	8000b18 <__aeabi_dcmpgt>
 8009418:	2800      	cmp	r0, #0
 800941a:	d095      	beq.n	8009348 <_strtod_l+0xa10>
 800941c:	e4da      	b.n	8008dd4 <_strtod_l+0x49c>
 800941e:	9b04      	ldr	r3, [sp, #16]
 8009420:	b333      	cbz	r3, 8009470 <_strtod_l+0xb38>
 8009422:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009424:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009428:	d822      	bhi.n	8009470 <_strtod_l+0xb38>
 800942a:	a331      	add	r3, pc, #196	; (adr r3, 80094f0 <_strtod_l+0xbb8>)
 800942c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009430:	4630      	mov	r0, r6
 8009432:	4639      	mov	r1, r7
 8009434:	f7f7 fb5c 	bl	8000af0 <__aeabi_dcmple>
 8009438:	b1a0      	cbz	r0, 8009464 <_strtod_l+0xb2c>
 800943a:	4639      	mov	r1, r7
 800943c:	4630      	mov	r0, r6
 800943e:	f7f7 fbb3 	bl	8000ba8 <__aeabi_d2uiz>
 8009442:	2801      	cmp	r0, #1
 8009444:	bf38      	it	cc
 8009446:	2001      	movcc	r0, #1
 8009448:	f7f7 f85c 	bl	8000504 <__aeabi_ui2d>
 800944c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800944e:	4606      	mov	r6, r0
 8009450:	460f      	mov	r7, r1
 8009452:	bb23      	cbnz	r3, 800949e <_strtod_l+0xb66>
 8009454:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009458:	9010      	str	r0, [sp, #64]	; 0x40
 800945a:	9311      	str	r3, [sp, #68]	; 0x44
 800945c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009460:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009466:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009468:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800946c:	1a9b      	subs	r3, r3, r2
 800946e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009470:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009474:	eeb0 0a48 	vmov.f32	s0, s16
 8009478:	eef0 0a68 	vmov.f32	s1, s17
 800947c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009480:	f7ff f8fc 	bl	800867c <__ulp>
 8009484:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009488:	ec53 2b10 	vmov	r2, r3, d0
 800948c:	f7f7 f8b4 	bl	80005f8 <__aeabi_dmul>
 8009490:	ec53 2b18 	vmov	r2, r3, d8
 8009494:	f7f6 fefa 	bl	800028c <__adddf3>
 8009498:	4680      	mov	r8, r0
 800949a:	4689      	mov	r9, r1
 800949c:	e78d      	b.n	80093ba <_strtod_l+0xa82>
 800949e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80094a2:	e7db      	b.n	800945c <_strtod_l+0xb24>
 80094a4:	a314      	add	r3, pc, #80	; (adr r3, 80094f8 <_strtod_l+0xbc0>)
 80094a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094aa:	f7f7 fb17 	bl	8000adc <__aeabi_dcmplt>
 80094ae:	e7b3      	b.n	8009418 <_strtod_l+0xae0>
 80094b0:	2300      	movs	r3, #0
 80094b2:	930a      	str	r3, [sp, #40]	; 0x28
 80094b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80094b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094b8:	6013      	str	r3, [r2, #0]
 80094ba:	f7ff ba7c 	b.w	80089b6 <_strtod_l+0x7e>
 80094be:	2a65      	cmp	r2, #101	; 0x65
 80094c0:	f43f ab75 	beq.w	8008bae <_strtod_l+0x276>
 80094c4:	2a45      	cmp	r2, #69	; 0x45
 80094c6:	f43f ab72 	beq.w	8008bae <_strtod_l+0x276>
 80094ca:	2301      	movs	r3, #1
 80094cc:	f7ff bbaa 	b.w	8008c24 <_strtod_l+0x2ec>
 80094d0:	00000000 	.word	0x00000000
 80094d4:	bff00000 	.word	0xbff00000
 80094d8:	00000000 	.word	0x00000000
 80094dc:	3ff00000 	.word	0x3ff00000
 80094e0:	94a03595 	.word	0x94a03595
 80094e4:	3fdfffff 	.word	0x3fdfffff
 80094e8:	35afe535 	.word	0x35afe535
 80094ec:	3fe00000 	.word	0x3fe00000
 80094f0:	ffc00000 	.word	0xffc00000
 80094f4:	41dfffff 	.word	0x41dfffff
 80094f8:	94a03595 	.word	0x94a03595
 80094fc:	3fcfffff 	.word	0x3fcfffff
 8009500:	3ff00000 	.word	0x3ff00000
 8009504:	3fe00000 	.word	0x3fe00000
 8009508:	7ff00000 	.word	0x7ff00000
 800950c:	7fe00000 	.word	0x7fe00000
 8009510:	7c9fffff 	.word	0x7c9fffff
 8009514:	7fefffff 	.word	0x7fefffff

08009518 <_strtod_r>:
 8009518:	4b01      	ldr	r3, [pc, #4]	; (8009520 <_strtod_r+0x8>)
 800951a:	f7ff ba0d 	b.w	8008938 <_strtod_l>
 800951e:	bf00      	nop
 8009520:	20000068 	.word	0x20000068

08009524 <_strtol_l.constprop.0>:
 8009524:	2b01      	cmp	r3, #1
 8009526:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800952a:	d001      	beq.n	8009530 <_strtol_l.constprop.0+0xc>
 800952c:	2b24      	cmp	r3, #36	; 0x24
 800952e:	d906      	bls.n	800953e <_strtol_l.constprop.0+0x1a>
 8009530:	f7fd fd8c 	bl	800704c <__errno>
 8009534:	2316      	movs	r3, #22
 8009536:	6003      	str	r3, [r0, #0]
 8009538:	2000      	movs	r0, #0
 800953a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800953e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009624 <_strtol_l.constprop.0+0x100>
 8009542:	460d      	mov	r5, r1
 8009544:	462e      	mov	r6, r5
 8009546:	f815 4b01 	ldrb.w	r4, [r5], #1
 800954a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800954e:	f017 0708 	ands.w	r7, r7, #8
 8009552:	d1f7      	bne.n	8009544 <_strtol_l.constprop.0+0x20>
 8009554:	2c2d      	cmp	r4, #45	; 0x2d
 8009556:	d132      	bne.n	80095be <_strtol_l.constprop.0+0x9a>
 8009558:	782c      	ldrb	r4, [r5, #0]
 800955a:	2701      	movs	r7, #1
 800955c:	1cb5      	adds	r5, r6, #2
 800955e:	2b00      	cmp	r3, #0
 8009560:	d05b      	beq.n	800961a <_strtol_l.constprop.0+0xf6>
 8009562:	2b10      	cmp	r3, #16
 8009564:	d109      	bne.n	800957a <_strtol_l.constprop.0+0x56>
 8009566:	2c30      	cmp	r4, #48	; 0x30
 8009568:	d107      	bne.n	800957a <_strtol_l.constprop.0+0x56>
 800956a:	782c      	ldrb	r4, [r5, #0]
 800956c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009570:	2c58      	cmp	r4, #88	; 0x58
 8009572:	d14d      	bne.n	8009610 <_strtol_l.constprop.0+0xec>
 8009574:	786c      	ldrb	r4, [r5, #1]
 8009576:	2310      	movs	r3, #16
 8009578:	3502      	adds	r5, #2
 800957a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800957e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009582:	f04f 0e00 	mov.w	lr, #0
 8009586:	fbb8 f9f3 	udiv	r9, r8, r3
 800958a:	4676      	mov	r6, lr
 800958c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009590:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009594:	f1bc 0f09 	cmp.w	ip, #9
 8009598:	d816      	bhi.n	80095c8 <_strtol_l.constprop.0+0xa4>
 800959a:	4664      	mov	r4, ip
 800959c:	42a3      	cmp	r3, r4
 800959e:	dd24      	ble.n	80095ea <_strtol_l.constprop.0+0xc6>
 80095a0:	f1be 3fff 	cmp.w	lr, #4294967295
 80095a4:	d008      	beq.n	80095b8 <_strtol_l.constprop.0+0x94>
 80095a6:	45b1      	cmp	r9, r6
 80095a8:	d31c      	bcc.n	80095e4 <_strtol_l.constprop.0+0xc0>
 80095aa:	d101      	bne.n	80095b0 <_strtol_l.constprop.0+0x8c>
 80095ac:	45a2      	cmp	sl, r4
 80095ae:	db19      	blt.n	80095e4 <_strtol_l.constprop.0+0xc0>
 80095b0:	fb06 4603 	mla	r6, r6, r3, r4
 80095b4:	f04f 0e01 	mov.w	lr, #1
 80095b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095bc:	e7e8      	b.n	8009590 <_strtol_l.constprop.0+0x6c>
 80095be:	2c2b      	cmp	r4, #43	; 0x2b
 80095c0:	bf04      	itt	eq
 80095c2:	782c      	ldrbeq	r4, [r5, #0]
 80095c4:	1cb5      	addeq	r5, r6, #2
 80095c6:	e7ca      	b.n	800955e <_strtol_l.constprop.0+0x3a>
 80095c8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80095cc:	f1bc 0f19 	cmp.w	ip, #25
 80095d0:	d801      	bhi.n	80095d6 <_strtol_l.constprop.0+0xb2>
 80095d2:	3c37      	subs	r4, #55	; 0x37
 80095d4:	e7e2      	b.n	800959c <_strtol_l.constprop.0+0x78>
 80095d6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80095da:	f1bc 0f19 	cmp.w	ip, #25
 80095de:	d804      	bhi.n	80095ea <_strtol_l.constprop.0+0xc6>
 80095e0:	3c57      	subs	r4, #87	; 0x57
 80095e2:	e7db      	b.n	800959c <_strtol_l.constprop.0+0x78>
 80095e4:	f04f 3eff 	mov.w	lr, #4294967295
 80095e8:	e7e6      	b.n	80095b8 <_strtol_l.constprop.0+0x94>
 80095ea:	f1be 3fff 	cmp.w	lr, #4294967295
 80095ee:	d105      	bne.n	80095fc <_strtol_l.constprop.0+0xd8>
 80095f0:	2322      	movs	r3, #34	; 0x22
 80095f2:	6003      	str	r3, [r0, #0]
 80095f4:	4646      	mov	r6, r8
 80095f6:	b942      	cbnz	r2, 800960a <_strtol_l.constprop.0+0xe6>
 80095f8:	4630      	mov	r0, r6
 80095fa:	e79e      	b.n	800953a <_strtol_l.constprop.0+0x16>
 80095fc:	b107      	cbz	r7, 8009600 <_strtol_l.constprop.0+0xdc>
 80095fe:	4276      	negs	r6, r6
 8009600:	2a00      	cmp	r2, #0
 8009602:	d0f9      	beq.n	80095f8 <_strtol_l.constprop.0+0xd4>
 8009604:	f1be 0f00 	cmp.w	lr, #0
 8009608:	d000      	beq.n	800960c <_strtol_l.constprop.0+0xe8>
 800960a:	1e69      	subs	r1, r5, #1
 800960c:	6011      	str	r1, [r2, #0]
 800960e:	e7f3      	b.n	80095f8 <_strtol_l.constprop.0+0xd4>
 8009610:	2430      	movs	r4, #48	; 0x30
 8009612:	2b00      	cmp	r3, #0
 8009614:	d1b1      	bne.n	800957a <_strtol_l.constprop.0+0x56>
 8009616:	2308      	movs	r3, #8
 8009618:	e7af      	b.n	800957a <_strtol_l.constprop.0+0x56>
 800961a:	2c30      	cmp	r4, #48	; 0x30
 800961c:	d0a5      	beq.n	800956a <_strtol_l.constprop.0+0x46>
 800961e:	230a      	movs	r3, #10
 8009620:	e7ab      	b.n	800957a <_strtol_l.constprop.0+0x56>
 8009622:	bf00      	nop
 8009624:	0800aaf9 	.word	0x0800aaf9

08009628 <_strtol_r>:
 8009628:	f7ff bf7c 	b.w	8009524 <_strtol_l.constprop.0>

0800962c <__ssputs_r>:
 800962c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009630:	688e      	ldr	r6, [r1, #8]
 8009632:	461f      	mov	r7, r3
 8009634:	42be      	cmp	r6, r7
 8009636:	680b      	ldr	r3, [r1, #0]
 8009638:	4682      	mov	sl, r0
 800963a:	460c      	mov	r4, r1
 800963c:	4690      	mov	r8, r2
 800963e:	d82c      	bhi.n	800969a <__ssputs_r+0x6e>
 8009640:	898a      	ldrh	r2, [r1, #12]
 8009642:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009646:	d026      	beq.n	8009696 <__ssputs_r+0x6a>
 8009648:	6965      	ldr	r5, [r4, #20]
 800964a:	6909      	ldr	r1, [r1, #16]
 800964c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009650:	eba3 0901 	sub.w	r9, r3, r1
 8009654:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009658:	1c7b      	adds	r3, r7, #1
 800965a:	444b      	add	r3, r9
 800965c:	106d      	asrs	r5, r5, #1
 800965e:	429d      	cmp	r5, r3
 8009660:	bf38      	it	cc
 8009662:	461d      	movcc	r5, r3
 8009664:	0553      	lsls	r3, r2, #21
 8009666:	d527      	bpl.n	80096b8 <__ssputs_r+0x8c>
 8009668:	4629      	mov	r1, r5
 800966a:	f7fe fc0f 	bl	8007e8c <_malloc_r>
 800966e:	4606      	mov	r6, r0
 8009670:	b360      	cbz	r0, 80096cc <__ssputs_r+0xa0>
 8009672:	6921      	ldr	r1, [r4, #16]
 8009674:	464a      	mov	r2, r9
 8009676:	f000 fa1b 	bl	8009ab0 <memcpy>
 800967a:	89a3      	ldrh	r3, [r4, #12]
 800967c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009684:	81a3      	strh	r3, [r4, #12]
 8009686:	6126      	str	r6, [r4, #16]
 8009688:	6165      	str	r5, [r4, #20]
 800968a:	444e      	add	r6, r9
 800968c:	eba5 0509 	sub.w	r5, r5, r9
 8009690:	6026      	str	r6, [r4, #0]
 8009692:	60a5      	str	r5, [r4, #8]
 8009694:	463e      	mov	r6, r7
 8009696:	42be      	cmp	r6, r7
 8009698:	d900      	bls.n	800969c <__ssputs_r+0x70>
 800969a:	463e      	mov	r6, r7
 800969c:	6820      	ldr	r0, [r4, #0]
 800969e:	4632      	mov	r2, r6
 80096a0:	4641      	mov	r1, r8
 80096a2:	f000 f9c9 	bl	8009a38 <memmove>
 80096a6:	68a3      	ldr	r3, [r4, #8]
 80096a8:	1b9b      	subs	r3, r3, r6
 80096aa:	60a3      	str	r3, [r4, #8]
 80096ac:	6823      	ldr	r3, [r4, #0]
 80096ae:	4433      	add	r3, r6
 80096b0:	6023      	str	r3, [r4, #0]
 80096b2:	2000      	movs	r0, #0
 80096b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096b8:	462a      	mov	r2, r5
 80096ba:	f000 fdae 	bl	800a21a <_realloc_r>
 80096be:	4606      	mov	r6, r0
 80096c0:	2800      	cmp	r0, #0
 80096c2:	d1e0      	bne.n	8009686 <__ssputs_r+0x5a>
 80096c4:	6921      	ldr	r1, [r4, #16]
 80096c6:	4650      	mov	r0, sl
 80096c8:	f7fe fb6c 	bl	8007da4 <_free_r>
 80096cc:	230c      	movs	r3, #12
 80096ce:	f8ca 3000 	str.w	r3, [sl]
 80096d2:	89a3      	ldrh	r3, [r4, #12]
 80096d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096d8:	81a3      	strh	r3, [r4, #12]
 80096da:	f04f 30ff 	mov.w	r0, #4294967295
 80096de:	e7e9      	b.n	80096b4 <__ssputs_r+0x88>

080096e0 <_svfiprintf_r>:
 80096e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e4:	4698      	mov	r8, r3
 80096e6:	898b      	ldrh	r3, [r1, #12]
 80096e8:	061b      	lsls	r3, r3, #24
 80096ea:	b09d      	sub	sp, #116	; 0x74
 80096ec:	4607      	mov	r7, r0
 80096ee:	460d      	mov	r5, r1
 80096f0:	4614      	mov	r4, r2
 80096f2:	d50e      	bpl.n	8009712 <_svfiprintf_r+0x32>
 80096f4:	690b      	ldr	r3, [r1, #16]
 80096f6:	b963      	cbnz	r3, 8009712 <_svfiprintf_r+0x32>
 80096f8:	2140      	movs	r1, #64	; 0x40
 80096fa:	f7fe fbc7 	bl	8007e8c <_malloc_r>
 80096fe:	6028      	str	r0, [r5, #0]
 8009700:	6128      	str	r0, [r5, #16]
 8009702:	b920      	cbnz	r0, 800970e <_svfiprintf_r+0x2e>
 8009704:	230c      	movs	r3, #12
 8009706:	603b      	str	r3, [r7, #0]
 8009708:	f04f 30ff 	mov.w	r0, #4294967295
 800970c:	e0d0      	b.n	80098b0 <_svfiprintf_r+0x1d0>
 800970e:	2340      	movs	r3, #64	; 0x40
 8009710:	616b      	str	r3, [r5, #20]
 8009712:	2300      	movs	r3, #0
 8009714:	9309      	str	r3, [sp, #36]	; 0x24
 8009716:	2320      	movs	r3, #32
 8009718:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800971c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009720:	2330      	movs	r3, #48	; 0x30
 8009722:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80098c8 <_svfiprintf_r+0x1e8>
 8009726:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800972a:	f04f 0901 	mov.w	r9, #1
 800972e:	4623      	mov	r3, r4
 8009730:	469a      	mov	sl, r3
 8009732:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009736:	b10a      	cbz	r2, 800973c <_svfiprintf_r+0x5c>
 8009738:	2a25      	cmp	r2, #37	; 0x25
 800973a:	d1f9      	bne.n	8009730 <_svfiprintf_r+0x50>
 800973c:	ebba 0b04 	subs.w	fp, sl, r4
 8009740:	d00b      	beq.n	800975a <_svfiprintf_r+0x7a>
 8009742:	465b      	mov	r3, fp
 8009744:	4622      	mov	r2, r4
 8009746:	4629      	mov	r1, r5
 8009748:	4638      	mov	r0, r7
 800974a:	f7ff ff6f 	bl	800962c <__ssputs_r>
 800974e:	3001      	adds	r0, #1
 8009750:	f000 80a9 	beq.w	80098a6 <_svfiprintf_r+0x1c6>
 8009754:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009756:	445a      	add	r2, fp
 8009758:	9209      	str	r2, [sp, #36]	; 0x24
 800975a:	f89a 3000 	ldrb.w	r3, [sl]
 800975e:	2b00      	cmp	r3, #0
 8009760:	f000 80a1 	beq.w	80098a6 <_svfiprintf_r+0x1c6>
 8009764:	2300      	movs	r3, #0
 8009766:	f04f 32ff 	mov.w	r2, #4294967295
 800976a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800976e:	f10a 0a01 	add.w	sl, sl, #1
 8009772:	9304      	str	r3, [sp, #16]
 8009774:	9307      	str	r3, [sp, #28]
 8009776:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800977a:	931a      	str	r3, [sp, #104]	; 0x68
 800977c:	4654      	mov	r4, sl
 800977e:	2205      	movs	r2, #5
 8009780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009784:	4850      	ldr	r0, [pc, #320]	; (80098c8 <_svfiprintf_r+0x1e8>)
 8009786:	f7f6 fd23 	bl	80001d0 <memchr>
 800978a:	9a04      	ldr	r2, [sp, #16]
 800978c:	b9d8      	cbnz	r0, 80097c6 <_svfiprintf_r+0xe6>
 800978e:	06d0      	lsls	r0, r2, #27
 8009790:	bf44      	itt	mi
 8009792:	2320      	movmi	r3, #32
 8009794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009798:	0711      	lsls	r1, r2, #28
 800979a:	bf44      	itt	mi
 800979c:	232b      	movmi	r3, #43	; 0x2b
 800979e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097a2:	f89a 3000 	ldrb.w	r3, [sl]
 80097a6:	2b2a      	cmp	r3, #42	; 0x2a
 80097a8:	d015      	beq.n	80097d6 <_svfiprintf_r+0xf6>
 80097aa:	9a07      	ldr	r2, [sp, #28]
 80097ac:	4654      	mov	r4, sl
 80097ae:	2000      	movs	r0, #0
 80097b0:	f04f 0c0a 	mov.w	ip, #10
 80097b4:	4621      	mov	r1, r4
 80097b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097ba:	3b30      	subs	r3, #48	; 0x30
 80097bc:	2b09      	cmp	r3, #9
 80097be:	d94d      	bls.n	800985c <_svfiprintf_r+0x17c>
 80097c0:	b1b0      	cbz	r0, 80097f0 <_svfiprintf_r+0x110>
 80097c2:	9207      	str	r2, [sp, #28]
 80097c4:	e014      	b.n	80097f0 <_svfiprintf_r+0x110>
 80097c6:	eba0 0308 	sub.w	r3, r0, r8
 80097ca:	fa09 f303 	lsl.w	r3, r9, r3
 80097ce:	4313      	orrs	r3, r2
 80097d0:	9304      	str	r3, [sp, #16]
 80097d2:	46a2      	mov	sl, r4
 80097d4:	e7d2      	b.n	800977c <_svfiprintf_r+0x9c>
 80097d6:	9b03      	ldr	r3, [sp, #12]
 80097d8:	1d19      	adds	r1, r3, #4
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	9103      	str	r1, [sp, #12]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	bfbb      	ittet	lt
 80097e2:	425b      	neglt	r3, r3
 80097e4:	f042 0202 	orrlt.w	r2, r2, #2
 80097e8:	9307      	strge	r3, [sp, #28]
 80097ea:	9307      	strlt	r3, [sp, #28]
 80097ec:	bfb8      	it	lt
 80097ee:	9204      	strlt	r2, [sp, #16]
 80097f0:	7823      	ldrb	r3, [r4, #0]
 80097f2:	2b2e      	cmp	r3, #46	; 0x2e
 80097f4:	d10c      	bne.n	8009810 <_svfiprintf_r+0x130>
 80097f6:	7863      	ldrb	r3, [r4, #1]
 80097f8:	2b2a      	cmp	r3, #42	; 0x2a
 80097fa:	d134      	bne.n	8009866 <_svfiprintf_r+0x186>
 80097fc:	9b03      	ldr	r3, [sp, #12]
 80097fe:	1d1a      	adds	r2, r3, #4
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	9203      	str	r2, [sp, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	bfb8      	it	lt
 8009808:	f04f 33ff 	movlt.w	r3, #4294967295
 800980c:	3402      	adds	r4, #2
 800980e:	9305      	str	r3, [sp, #20]
 8009810:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80098d8 <_svfiprintf_r+0x1f8>
 8009814:	7821      	ldrb	r1, [r4, #0]
 8009816:	2203      	movs	r2, #3
 8009818:	4650      	mov	r0, sl
 800981a:	f7f6 fcd9 	bl	80001d0 <memchr>
 800981e:	b138      	cbz	r0, 8009830 <_svfiprintf_r+0x150>
 8009820:	9b04      	ldr	r3, [sp, #16]
 8009822:	eba0 000a 	sub.w	r0, r0, sl
 8009826:	2240      	movs	r2, #64	; 0x40
 8009828:	4082      	lsls	r2, r0
 800982a:	4313      	orrs	r3, r2
 800982c:	3401      	adds	r4, #1
 800982e:	9304      	str	r3, [sp, #16]
 8009830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009834:	4825      	ldr	r0, [pc, #148]	; (80098cc <_svfiprintf_r+0x1ec>)
 8009836:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800983a:	2206      	movs	r2, #6
 800983c:	f7f6 fcc8 	bl	80001d0 <memchr>
 8009840:	2800      	cmp	r0, #0
 8009842:	d038      	beq.n	80098b6 <_svfiprintf_r+0x1d6>
 8009844:	4b22      	ldr	r3, [pc, #136]	; (80098d0 <_svfiprintf_r+0x1f0>)
 8009846:	bb1b      	cbnz	r3, 8009890 <_svfiprintf_r+0x1b0>
 8009848:	9b03      	ldr	r3, [sp, #12]
 800984a:	3307      	adds	r3, #7
 800984c:	f023 0307 	bic.w	r3, r3, #7
 8009850:	3308      	adds	r3, #8
 8009852:	9303      	str	r3, [sp, #12]
 8009854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009856:	4433      	add	r3, r6
 8009858:	9309      	str	r3, [sp, #36]	; 0x24
 800985a:	e768      	b.n	800972e <_svfiprintf_r+0x4e>
 800985c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009860:	460c      	mov	r4, r1
 8009862:	2001      	movs	r0, #1
 8009864:	e7a6      	b.n	80097b4 <_svfiprintf_r+0xd4>
 8009866:	2300      	movs	r3, #0
 8009868:	3401      	adds	r4, #1
 800986a:	9305      	str	r3, [sp, #20]
 800986c:	4619      	mov	r1, r3
 800986e:	f04f 0c0a 	mov.w	ip, #10
 8009872:	4620      	mov	r0, r4
 8009874:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009878:	3a30      	subs	r2, #48	; 0x30
 800987a:	2a09      	cmp	r2, #9
 800987c:	d903      	bls.n	8009886 <_svfiprintf_r+0x1a6>
 800987e:	2b00      	cmp	r3, #0
 8009880:	d0c6      	beq.n	8009810 <_svfiprintf_r+0x130>
 8009882:	9105      	str	r1, [sp, #20]
 8009884:	e7c4      	b.n	8009810 <_svfiprintf_r+0x130>
 8009886:	fb0c 2101 	mla	r1, ip, r1, r2
 800988a:	4604      	mov	r4, r0
 800988c:	2301      	movs	r3, #1
 800988e:	e7f0      	b.n	8009872 <_svfiprintf_r+0x192>
 8009890:	ab03      	add	r3, sp, #12
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	462a      	mov	r2, r5
 8009896:	4b0f      	ldr	r3, [pc, #60]	; (80098d4 <_svfiprintf_r+0x1f4>)
 8009898:	a904      	add	r1, sp, #16
 800989a:	4638      	mov	r0, r7
 800989c:	f7fc fc9a 	bl	80061d4 <_printf_float>
 80098a0:	1c42      	adds	r2, r0, #1
 80098a2:	4606      	mov	r6, r0
 80098a4:	d1d6      	bne.n	8009854 <_svfiprintf_r+0x174>
 80098a6:	89ab      	ldrh	r3, [r5, #12]
 80098a8:	065b      	lsls	r3, r3, #25
 80098aa:	f53f af2d 	bmi.w	8009708 <_svfiprintf_r+0x28>
 80098ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098b0:	b01d      	add	sp, #116	; 0x74
 80098b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b6:	ab03      	add	r3, sp, #12
 80098b8:	9300      	str	r3, [sp, #0]
 80098ba:	462a      	mov	r2, r5
 80098bc:	4b05      	ldr	r3, [pc, #20]	; (80098d4 <_svfiprintf_r+0x1f4>)
 80098be:	a904      	add	r1, sp, #16
 80098c0:	4638      	mov	r0, r7
 80098c2:	f7fc ff2b 	bl	800671c <_printf_i>
 80098c6:	e7eb      	b.n	80098a0 <_svfiprintf_r+0x1c0>
 80098c8:	0800abf9 	.word	0x0800abf9
 80098cc:	0800ac03 	.word	0x0800ac03
 80098d0:	080061d5 	.word	0x080061d5
 80098d4:	0800962d 	.word	0x0800962d
 80098d8:	0800abff 	.word	0x0800abff

080098dc <__sflush_r>:
 80098dc:	898a      	ldrh	r2, [r1, #12]
 80098de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e2:	4605      	mov	r5, r0
 80098e4:	0710      	lsls	r0, r2, #28
 80098e6:	460c      	mov	r4, r1
 80098e8:	d458      	bmi.n	800999c <__sflush_r+0xc0>
 80098ea:	684b      	ldr	r3, [r1, #4]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	dc05      	bgt.n	80098fc <__sflush_r+0x20>
 80098f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	dc02      	bgt.n	80098fc <__sflush_r+0x20>
 80098f6:	2000      	movs	r0, #0
 80098f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098fe:	2e00      	cmp	r6, #0
 8009900:	d0f9      	beq.n	80098f6 <__sflush_r+0x1a>
 8009902:	2300      	movs	r3, #0
 8009904:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009908:	682f      	ldr	r7, [r5, #0]
 800990a:	6a21      	ldr	r1, [r4, #32]
 800990c:	602b      	str	r3, [r5, #0]
 800990e:	d032      	beq.n	8009976 <__sflush_r+0x9a>
 8009910:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009912:	89a3      	ldrh	r3, [r4, #12]
 8009914:	075a      	lsls	r2, r3, #29
 8009916:	d505      	bpl.n	8009924 <__sflush_r+0x48>
 8009918:	6863      	ldr	r3, [r4, #4]
 800991a:	1ac0      	subs	r0, r0, r3
 800991c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800991e:	b10b      	cbz	r3, 8009924 <__sflush_r+0x48>
 8009920:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009922:	1ac0      	subs	r0, r0, r3
 8009924:	2300      	movs	r3, #0
 8009926:	4602      	mov	r2, r0
 8009928:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800992a:	6a21      	ldr	r1, [r4, #32]
 800992c:	4628      	mov	r0, r5
 800992e:	47b0      	blx	r6
 8009930:	1c43      	adds	r3, r0, #1
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	d106      	bne.n	8009944 <__sflush_r+0x68>
 8009936:	6829      	ldr	r1, [r5, #0]
 8009938:	291d      	cmp	r1, #29
 800993a:	d82b      	bhi.n	8009994 <__sflush_r+0xb8>
 800993c:	4a29      	ldr	r2, [pc, #164]	; (80099e4 <__sflush_r+0x108>)
 800993e:	410a      	asrs	r2, r1
 8009940:	07d6      	lsls	r6, r2, #31
 8009942:	d427      	bmi.n	8009994 <__sflush_r+0xb8>
 8009944:	2200      	movs	r2, #0
 8009946:	6062      	str	r2, [r4, #4]
 8009948:	04d9      	lsls	r1, r3, #19
 800994a:	6922      	ldr	r2, [r4, #16]
 800994c:	6022      	str	r2, [r4, #0]
 800994e:	d504      	bpl.n	800995a <__sflush_r+0x7e>
 8009950:	1c42      	adds	r2, r0, #1
 8009952:	d101      	bne.n	8009958 <__sflush_r+0x7c>
 8009954:	682b      	ldr	r3, [r5, #0]
 8009956:	b903      	cbnz	r3, 800995a <__sflush_r+0x7e>
 8009958:	6560      	str	r0, [r4, #84]	; 0x54
 800995a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800995c:	602f      	str	r7, [r5, #0]
 800995e:	2900      	cmp	r1, #0
 8009960:	d0c9      	beq.n	80098f6 <__sflush_r+0x1a>
 8009962:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009966:	4299      	cmp	r1, r3
 8009968:	d002      	beq.n	8009970 <__sflush_r+0x94>
 800996a:	4628      	mov	r0, r5
 800996c:	f7fe fa1a 	bl	8007da4 <_free_r>
 8009970:	2000      	movs	r0, #0
 8009972:	6360      	str	r0, [r4, #52]	; 0x34
 8009974:	e7c0      	b.n	80098f8 <__sflush_r+0x1c>
 8009976:	2301      	movs	r3, #1
 8009978:	4628      	mov	r0, r5
 800997a:	47b0      	blx	r6
 800997c:	1c41      	adds	r1, r0, #1
 800997e:	d1c8      	bne.n	8009912 <__sflush_r+0x36>
 8009980:	682b      	ldr	r3, [r5, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d0c5      	beq.n	8009912 <__sflush_r+0x36>
 8009986:	2b1d      	cmp	r3, #29
 8009988:	d001      	beq.n	800998e <__sflush_r+0xb2>
 800998a:	2b16      	cmp	r3, #22
 800998c:	d101      	bne.n	8009992 <__sflush_r+0xb6>
 800998e:	602f      	str	r7, [r5, #0]
 8009990:	e7b1      	b.n	80098f6 <__sflush_r+0x1a>
 8009992:	89a3      	ldrh	r3, [r4, #12]
 8009994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009998:	81a3      	strh	r3, [r4, #12]
 800999a:	e7ad      	b.n	80098f8 <__sflush_r+0x1c>
 800999c:	690f      	ldr	r7, [r1, #16]
 800999e:	2f00      	cmp	r7, #0
 80099a0:	d0a9      	beq.n	80098f6 <__sflush_r+0x1a>
 80099a2:	0793      	lsls	r3, r2, #30
 80099a4:	680e      	ldr	r6, [r1, #0]
 80099a6:	bf08      	it	eq
 80099a8:	694b      	ldreq	r3, [r1, #20]
 80099aa:	600f      	str	r7, [r1, #0]
 80099ac:	bf18      	it	ne
 80099ae:	2300      	movne	r3, #0
 80099b0:	eba6 0807 	sub.w	r8, r6, r7
 80099b4:	608b      	str	r3, [r1, #8]
 80099b6:	f1b8 0f00 	cmp.w	r8, #0
 80099ba:	dd9c      	ble.n	80098f6 <__sflush_r+0x1a>
 80099bc:	6a21      	ldr	r1, [r4, #32]
 80099be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099c0:	4643      	mov	r3, r8
 80099c2:	463a      	mov	r2, r7
 80099c4:	4628      	mov	r0, r5
 80099c6:	47b0      	blx	r6
 80099c8:	2800      	cmp	r0, #0
 80099ca:	dc06      	bgt.n	80099da <__sflush_r+0xfe>
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099d2:	81a3      	strh	r3, [r4, #12]
 80099d4:	f04f 30ff 	mov.w	r0, #4294967295
 80099d8:	e78e      	b.n	80098f8 <__sflush_r+0x1c>
 80099da:	4407      	add	r7, r0
 80099dc:	eba8 0800 	sub.w	r8, r8, r0
 80099e0:	e7e9      	b.n	80099b6 <__sflush_r+0xda>
 80099e2:	bf00      	nop
 80099e4:	dfbffffe 	.word	0xdfbffffe

080099e8 <_fflush_r>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	690b      	ldr	r3, [r1, #16]
 80099ec:	4605      	mov	r5, r0
 80099ee:	460c      	mov	r4, r1
 80099f0:	b913      	cbnz	r3, 80099f8 <_fflush_r+0x10>
 80099f2:	2500      	movs	r5, #0
 80099f4:	4628      	mov	r0, r5
 80099f6:	bd38      	pop	{r3, r4, r5, pc}
 80099f8:	b118      	cbz	r0, 8009a02 <_fflush_r+0x1a>
 80099fa:	6a03      	ldr	r3, [r0, #32]
 80099fc:	b90b      	cbnz	r3, 8009a02 <_fflush_r+0x1a>
 80099fe:	f7fd fa39 	bl	8006e74 <__sinit>
 8009a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d0f3      	beq.n	80099f2 <_fflush_r+0xa>
 8009a0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a0c:	07d0      	lsls	r0, r2, #31
 8009a0e:	d404      	bmi.n	8009a1a <_fflush_r+0x32>
 8009a10:	0599      	lsls	r1, r3, #22
 8009a12:	d402      	bmi.n	8009a1a <_fflush_r+0x32>
 8009a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a16:	f7fd fb43 	bl	80070a0 <__retarget_lock_acquire_recursive>
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	f7ff ff5d 	bl	80098dc <__sflush_r>
 8009a22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a24:	07da      	lsls	r2, r3, #31
 8009a26:	4605      	mov	r5, r0
 8009a28:	d4e4      	bmi.n	80099f4 <_fflush_r+0xc>
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	059b      	lsls	r3, r3, #22
 8009a2e:	d4e1      	bmi.n	80099f4 <_fflush_r+0xc>
 8009a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a32:	f7fd fb36 	bl	80070a2 <__retarget_lock_release_recursive>
 8009a36:	e7dd      	b.n	80099f4 <_fflush_r+0xc>

08009a38 <memmove>:
 8009a38:	4288      	cmp	r0, r1
 8009a3a:	b510      	push	{r4, lr}
 8009a3c:	eb01 0402 	add.w	r4, r1, r2
 8009a40:	d902      	bls.n	8009a48 <memmove+0x10>
 8009a42:	4284      	cmp	r4, r0
 8009a44:	4623      	mov	r3, r4
 8009a46:	d807      	bhi.n	8009a58 <memmove+0x20>
 8009a48:	1e43      	subs	r3, r0, #1
 8009a4a:	42a1      	cmp	r1, r4
 8009a4c:	d008      	beq.n	8009a60 <memmove+0x28>
 8009a4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a56:	e7f8      	b.n	8009a4a <memmove+0x12>
 8009a58:	4402      	add	r2, r0
 8009a5a:	4601      	mov	r1, r0
 8009a5c:	428a      	cmp	r2, r1
 8009a5e:	d100      	bne.n	8009a62 <memmove+0x2a>
 8009a60:	bd10      	pop	{r4, pc}
 8009a62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a6a:	e7f7      	b.n	8009a5c <memmove+0x24>

08009a6c <strncmp>:
 8009a6c:	b510      	push	{r4, lr}
 8009a6e:	b16a      	cbz	r2, 8009a8c <strncmp+0x20>
 8009a70:	3901      	subs	r1, #1
 8009a72:	1884      	adds	r4, r0, r2
 8009a74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a78:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d103      	bne.n	8009a88 <strncmp+0x1c>
 8009a80:	42a0      	cmp	r0, r4
 8009a82:	d001      	beq.n	8009a88 <strncmp+0x1c>
 8009a84:	2a00      	cmp	r2, #0
 8009a86:	d1f5      	bne.n	8009a74 <strncmp+0x8>
 8009a88:	1ad0      	subs	r0, r2, r3
 8009a8a:	bd10      	pop	{r4, pc}
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	e7fc      	b.n	8009a8a <strncmp+0x1e>

08009a90 <_sbrk_r>:
 8009a90:	b538      	push	{r3, r4, r5, lr}
 8009a92:	4d06      	ldr	r5, [pc, #24]	; (8009aac <_sbrk_r+0x1c>)
 8009a94:	2300      	movs	r3, #0
 8009a96:	4604      	mov	r4, r0
 8009a98:	4608      	mov	r0, r1
 8009a9a:	602b      	str	r3, [r5, #0]
 8009a9c:	f7f7 fe1e 	bl	80016dc <_sbrk>
 8009aa0:	1c43      	adds	r3, r0, #1
 8009aa2:	d102      	bne.n	8009aaa <_sbrk_r+0x1a>
 8009aa4:	682b      	ldr	r3, [r5, #0]
 8009aa6:	b103      	cbz	r3, 8009aaa <_sbrk_r+0x1a>
 8009aa8:	6023      	str	r3, [r4, #0]
 8009aaa:	bd38      	pop	{r3, r4, r5, pc}
 8009aac:	20000428 	.word	0x20000428

08009ab0 <memcpy>:
 8009ab0:	440a      	add	r2, r1
 8009ab2:	4291      	cmp	r1, r2
 8009ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ab8:	d100      	bne.n	8009abc <memcpy+0xc>
 8009aba:	4770      	bx	lr
 8009abc:	b510      	push	{r4, lr}
 8009abe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ac2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ac6:	4291      	cmp	r1, r2
 8009ac8:	d1f9      	bne.n	8009abe <memcpy+0xe>
 8009aca:	bd10      	pop	{r4, pc}
 8009acc:	0000      	movs	r0, r0
	...

08009ad0 <nan>:
 8009ad0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009ad8 <nan+0x8>
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop
 8009ad8:	00000000 	.word	0x00000000
 8009adc:	7ff80000 	.word	0x7ff80000

08009ae0 <__assert_func>:
 8009ae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ae2:	4614      	mov	r4, r2
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	4b09      	ldr	r3, [pc, #36]	; (8009b0c <__assert_func+0x2c>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4605      	mov	r5, r0
 8009aec:	68d8      	ldr	r0, [r3, #12]
 8009aee:	b14c      	cbz	r4, 8009b04 <__assert_func+0x24>
 8009af0:	4b07      	ldr	r3, [pc, #28]	; (8009b10 <__assert_func+0x30>)
 8009af2:	9100      	str	r1, [sp, #0]
 8009af4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009af8:	4906      	ldr	r1, [pc, #24]	; (8009b14 <__assert_func+0x34>)
 8009afa:	462b      	mov	r3, r5
 8009afc:	f000 fbca 	bl	800a294 <fiprintf>
 8009b00:	f000 fbda 	bl	800a2b8 <abort>
 8009b04:	4b04      	ldr	r3, [pc, #16]	; (8009b18 <__assert_func+0x38>)
 8009b06:	461c      	mov	r4, r3
 8009b08:	e7f3      	b.n	8009af2 <__assert_func+0x12>
 8009b0a:	bf00      	nop
 8009b0c:	20000064 	.word	0x20000064
 8009b10:	0800ac12 	.word	0x0800ac12
 8009b14:	0800ac1f 	.word	0x0800ac1f
 8009b18:	0800ac4d 	.word	0x0800ac4d

08009b1c <_calloc_r>:
 8009b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b1e:	fba1 2402 	umull	r2, r4, r1, r2
 8009b22:	b94c      	cbnz	r4, 8009b38 <_calloc_r+0x1c>
 8009b24:	4611      	mov	r1, r2
 8009b26:	9201      	str	r2, [sp, #4]
 8009b28:	f7fe f9b0 	bl	8007e8c <_malloc_r>
 8009b2c:	9a01      	ldr	r2, [sp, #4]
 8009b2e:	4605      	mov	r5, r0
 8009b30:	b930      	cbnz	r0, 8009b40 <_calloc_r+0x24>
 8009b32:	4628      	mov	r0, r5
 8009b34:	b003      	add	sp, #12
 8009b36:	bd30      	pop	{r4, r5, pc}
 8009b38:	220c      	movs	r2, #12
 8009b3a:	6002      	str	r2, [r0, #0]
 8009b3c:	2500      	movs	r5, #0
 8009b3e:	e7f8      	b.n	8009b32 <_calloc_r+0x16>
 8009b40:	4621      	mov	r1, r4
 8009b42:	f7fd fa30 	bl	8006fa6 <memset>
 8009b46:	e7f4      	b.n	8009b32 <_calloc_r+0x16>

08009b48 <rshift>:
 8009b48:	6903      	ldr	r3, [r0, #16]
 8009b4a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009b4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b52:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009b56:	f100 0414 	add.w	r4, r0, #20
 8009b5a:	dd45      	ble.n	8009be8 <rshift+0xa0>
 8009b5c:	f011 011f 	ands.w	r1, r1, #31
 8009b60:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009b64:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009b68:	d10c      	bne.n	8009b84 <rshift+0x3c>
 8009b6a:	f100 0710 	add.w	r7, r0, #16
 8009b6e:	4629      	mov	r1, r5
 8009b70:	42b1      	cmp	r1, r6
 8009b72:	d334      	bcc.n	8009bde <rshift+0x96>
 8009b74:	1a9b      	subs	r3, r3, r2
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	1eea      	subs	r2, r5, #3
 8009b7a:	4296      	cmp	r6, r2
 8009b7c:	bf38      	it	cc
 8009b7e:	2300      	movcc	r3, #0
 8009b80:	4423      	add	r3, r4
 8009b82:	e015      	b.n	8009bb0 <rshift+0x68>
 8009b84:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009b88:	f1c1 0820 	rsb	r8, r1, #32
 8009b8c:	40cf      	lsrs	r7, r1
 8009b8e:	f105 0e04 	add.w	lr, r5, #4
 8009b92:	46a1      	mov	r9, r4
 8009b94:	4576      	cmp	r6, lr
 8009b96:	46f4      	mov	ip, lr
 8009b98:	d815      	bhi.n	8009bc6 <rshift+0x7e>
 8009b9a:	1a9a      	subs	r2, r3, r2
 8009b9c:	0092      	lsls	r2, r2, #2
 8009b9e:	3a04      	subs	r2, #4
 8009ba0:	3501      	adds	r5, #1
 8009ba2:	42ae      	cmp	r6, r5
 8009ba4:	bf38      	it	cc
 8009ba6:	2200      	movcc	r2, #0
 8009ba8:	18a3      	adds	r3, r4, r2
 8009baa:	50a7      	str	r7, [r4, r2]
 8009bac:	b107      	cbz	r7, 8009bb0 <rshift+0x68>
 8009bae:	3304      	adds	r3, #4
 8009bb0:	1b1a      	subs	r2, r3, r4
 8009bb2:	42a3      	cmp	r3, r4
 8009bb4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009bb8:	bf08      	it	eq
 8009bba:	2300      	moveq	r3, #0
 8009bbc:	6102      	str	r2, [r0, #16]
 8009bbe:	bf08      	it	eq
 8009bc0:	6143      	streq	r3, [r0, #20]
 8009bc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bc6:	f8dc c000 	ldr.w	ip, [ip]
 8009bca:	fa0c fc08 	lsl.w	ip, ip, r8
 8009bce:	ea4c 0707 	orr.w	r7, ip, r7
 8009bd2:	f849 7b04 	str.w	r7, [r9], #4
 8009bd6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009bda:	40cf      	lsrs	r7, r1
 8009bdc:	e7da      	b.n	8009b94 <rshift+0x4c>
 8009bde:	f851 cb04 	ldr.w	ip, [r1], #4
 8009be2:	f847 cf04 	str.w	ip, [r7, #4]!
 8009be6:	e7c3      	b.n	8009b70 <rshift+0x28>
 8009be8:	4623      	mov	r3, r4
 8009bea:	e7e1      	b.n	8009bb0 <rshift+0x68>

08009bec <__hexdig_fun>:
 8009bec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009bf0:	2b09      	cmp	r3, #9
 8009bf2:	d802      	bhi.n	8009bfa <__hexdig_fun+0xe>
 8009bf4:	3820      	subs	r0, #32
 8009bf6:	b2c0      	uxtb	r0, r0
 8009bf8:	4770      	bx	lr
 8009bfa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009bfe:	2b05      	cmp	r3, #5
 8009c00:	d801      	bhi.n	8009c06 <__hexdig_fun+0x1a>
 8009c02:	3847      	subs	r0, #71	; 0x47
 8009c04:	e7f7      	b.n	8009bf6 <__hexdig_fun+0xa>
 8009c06:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009c0a:	2b05      	cmp	r3, #5
 8009c0c:	d801      	bhi.n	8009c12 <__hexdig_fun+0x26>
 8009c0e:	3827      	subs	r0, #39	; 0x27
 8009c10:	e7f1      	b.n	8009bf6 <__hexdig_fun+0xa>
 8009c12:	2000      	movs	r0, #0
 8009c14:	4770      	bx	lr
	...

08009c18 <__gethex>:
 8009c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1c:	4617      	mov	r7, r2
 8009c1e:	680a      	ldr	r2, [r1, #0]
 8009c20:	b085      	sub	sp, #20
 8009c22:	f102 0b02 	add.w	fp, r2, #2
 8009c26:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009c2a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009c2e:	4681      	mov	r9, r0
 8009c30:	468a      	mov	sl, r1
 8009c32:	9302      	str	r3, [sp, #8]
 8009c34:	32fe      	adds	r2, #254	; 0xfe
 8009c36:	eb02 030b 	add.w	r3, r2, fp
 8009c3a:	46d8      	mov	r8, fp
 8009c3c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009c40:	9301      	str	r3, [sp, #4]
 8009c42:	2830      	cmp	r0, #48	; 0x30
 8009c44:	d0f7      	beq.n	8009c36 <__gethex+0x1e>
 8009c46:	f7ff ffd1 	bl	8009bec <__hexdig_fun>
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	d138      	bne.n	8009cc2 <__gethex+0xaa>
 8009c50:	49a7      	ldr	r1, [pc, #668]	; (8009ef0 <__gethex+0x2d8>)
 8009c52:	2201      	movs	r2, #1
 8009c54:	4640      	mov	r0, r8
 8009c56:	f7ff ff09 	bl	8009a6c <strncmp>
 8009c5a:	4606      	mov	r6, r0
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d169      	bne.n	8009d34 <__gethex+0x11c>
 8009c60:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009c64:	465d      	mov	r5, fp
 8009c66:	f7ff ffc1 	bl	8009bec <__hexdig_fun>
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	d064      	beq.n	8009d38 <__gethex+0x120>
 8009c6e:	465a      	mov	r2, fp
 8009c70:	7810      	ldrb	r0, [r2, #0]
 8009c72:	2830      	cmp	r0, #48	; 0x30
 8009c74:	4690      	mov	r8, r2
 8009c76:	f102 0201 	add.w	r2, r2, #1
 8009c7a:	d0f9      	beq.n	8009c70 <__gethex+0x58>
 8009c7c:	f7ff ffb6 	bl	8009bec <__hexdig_fun>
 8009c80:	2301      	movs	r3, #1
 8009c82:	fab0 f480 	clz	r4, r0
 8009c86:	0964      	lsrs	r4, r4, #5
 8009c88:	465e      	mov	r6, fp
 8009c8a:	9301      	str	r3, [sp, #4]
 8009c8c:	4642      	mov	r2, r8
 8009c8e:	4615      	mov	r5, r2
 8009c90:	3201      	adds	r2, #1
 8009c92:	7828      	ldrb	r0, [r5, #0]
 8009c94:	f7ff ffaa 	bl	8009bec <__hexdig_fun>
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	d1f8      	bne.n	8009c8e <__gethex+0x76>
 8009c9c:	4994      	ldr	r1, [pc, #592]	; (8009ef0 <__gethex+0x2d8>)
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	f7ff fee3 	bl	8009a6c <strncmp>
 8009ca6:	b978      	cbnz	r0, 8009cc8 <__gethex+0xb0>
 8009ca8:	b946      	cbnz	r6, 8009cbc <__gethex+0xa4>
 8009caa:	1c6e      	adds	r6, r5, #1
 8009cac:	4632      	mov	r2, r6
 8009cae:	4615      	mov	r5, r2
 8009cb0:	3201      	adds	r2, #1
 8009cb2:	7828      	ldrb	r0, [r5, #0]
 8009cb4:	f7ff ff9a 	bl	8009bec <__hexdig_fun>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d1f8      	bne.n	8009cae <__gethex+0x96>
 8009cbc:	1b73      	subs	r3, r6, r5
 8009cbe:	009e      	lsls	r6, r3, #2
 8009cc0:	e004      	b.n	8009ccc <__gethex+0xb4>
 8009cc2:	2400      	movs	r4, #0
 8009cc4:	4626      	mov	r6, r4
 8009cc6:	e7e1      	b.n	8009c8c <__gethex+0x74>
 8009cc8:	2e00      	cmp	r6, #0
 8009cca:	d1f7      	bne.n	8009cbc <__gethex+0xa4>
 8009ccc:	782b      	ldrb	r3, [r5, #0]
 8009cce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009cd2:	2b50      	cmp	r3, #80	; 0x50
 8009cd4:	d13d      	bne.n	8009d52 <__gethex+0x13a>
 8009cd6:	786b      	ldrb	r3, [r5, #1]
 8009cd8:	2b2b      	cmp	r3, #43	; 0x2b
 8009cda:	d02f      	beq.n	8009d3c <__gethex+0x124>
 8009cdc:	2b2d      	cmp	r3, #45	; 0x2d
 8009cde:	d031      	beq.n	8009d44 <__gethex+0x12c>
 8009ce0:	1c69      	adds	r1, r5, #1
 8009ce2:	f04f 0b00 	mov.w	fp, #0
 8009ce6:	7808      	ldrb	r0, [r1, #0]
 8009ce8:	f7ff ff80 	bl	8009bec <__hexdig_fun>
 8009cec:	1e42      	subs	r2, r0, #1
 8009cee:	b2d2      	uxtb	r2, r2
 8009cf0:	2a18      	cmp	r2, #24
 8009cf2:	d82e      	bhi.n	8009d52 <__gethex+0x13a>
 8009cf4:	f1a0 0210 	sub.w	r2, r0, #16
 8009cf8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009cfc:	f7ff ff76 	bl	8009bec <__hexdig_fun>
 8009d00:	f100 3cff 	add.w	ip, r0, #4294967295
 8009d04:	fa5f fc8c 	uxtb.w	ip, ip
 8009d08:	f1bc 0f18 	cmp.w	ip, #24
 8009d0c:	d91d      	bls.n	8009d4a <__gethex+0x132>
 8009d0e:	f1bb 0f00 	cmp.w	fp, #0
 8009d12:	d000      	beq.n	8009d16 <__gethex+0xfe>
 8009d14:	4252      	negs	r2, r2
 8009d16:	4416      	add	r6, r2
 8009d18:	f8ca 1000 	str.w	r1, [sl]
 8009d1c:	b1dc      	cbz	r4, 8009d56 <__gethex+0x13e>
 8009d1e:	9b01      	ldr	r3, [sp, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	bf14      	ite	ne
 8009d24:	f04f 0800 	movne.w	r8, #0
 8009d28:	f04f 0806 	moveq.w	r8, #6
 8009d2c:	4640      	mov	r0, r8
 8009d2e:	b005      	add	sp, #20
 8009d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d34:	4645      	mov	r5, r8
 8009d36:	4626      	mov	r6, r4
 8009d38:	2401      	movs	r4, #1
 8009d3a:	e7c7      	b.n	8009ccc <__gethex+0xb4>
 8009d3c:	f04f 0b00 	mov.w	fp, #0
 8009d40:	1ca9      	adds	r1, r5, #2
 8009d42:	e7d0      	b.n	8009ce6 <__gethex+0xce>
 8009d44:	f04f 0b01 	mov.w	fp, #1
 8009d48:	e7fa      	b.n	8009d40 <__gethex+0x128>
 8009d4a:	230a      	movs	r3, #10
 8009d4c:	fb03 0002 	mla	r0, r3, r2, r0
 8009d50:	e7d0      	b.n	8009cf4 <__gethex+0xdc>
 8009d52:	4629      	mov	r1, r5
 8009d54:	e7e0      	b.n	8009d18 <__gethex+0x100>
 8009d56:	eba5 0308 	sub.w	r3, r5, r8
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	4621      	mov	r1, r4
 8009d5e:	2b07      	cmp	r3, #7
 8009d60:	dc0a      	bgt.n	8009d78 <__gethex+0x160>
 8009d62:	4648      	mov	r0, r9
 8009d64:	f7fe f91e 	bl	8007fa4 <_Balloc>
 8009d68:	4604      	mov	r4, r0
 8009d6a:	b940      	cbnz	r0, 8009d7e <__gethex+0x166>
 8009d6c:	4b61      	ldr	r3, [pc, #388]	; (8009ef4 <__gethex+0x2dc>)
 8009d6e:	4602      	mov	r2, r0
 8009d70:	21e4      	movs	r1, #228	; 0xe4
 8009d72:	4861      	ldr	r0, [pc, #388]	; (8009ef8 <__gethex+0x2e0>)
 8009d74:	f7ff feb4 	bl	8009ae0 <__assert_func>
 8009d78:	3101      	adds	r1, #1
 8009d7a:	105b      	asrs	r3, r3, #1
 8009d7c:	e7ef      	b.n	8009d5e <__gethex+0x146>
 8009d7e:	f100 0a14 	add.w	sl, r0, #20
 8009d82:	2300      	movs	r3, #0
 8009d84:	495a      	ldr	r1, [pc, #360]	; (8009ef0 <__gethex+0x2d8>)
 8009d86:	f8cd a004 	str.w	sl, [sp, #4]
 8009d8a:	469b      	mov	fp, r3
 8009d8c:	45a8      	cmp	r8, r5
 8009d8e:	d342      	bcc.n	8009e16 <__gethex+0x1fe>
 8009d90:	9801      	ldr	r0, [sp, #4]
 8009d92:	f840 bb04 	str.w	fp, [r0], #4
 8009d96:	eba0 000a 	sub.w	r0, r0, sl
 8009d9a:	1080      	asrs	r0, r0, #2
 8009d9c:	6120      	str	r0, [r4, #16]
 8009d9e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009da2:	4658      	mov	r0, fp
 8009da4:	f7fe f9f0 	bl	8008188 <__hi0bits>
 8009da8:	683d      	ldr	r5, [r7, #0]
 8009daa:	eba8 0000 	sub.w	r0, r8, r0
 8009dae:	42a8      	cmp	r0, r5
 8009db0:	dd59      	ble.n	8009e66 <__gethex+0x24e>
 8009db2:	eba0 0805 	sub.w	r8, r0, r5
 8009db6:	4641      	mov	r1, r8
 8009db8:	4620      	mov	r0, r4
 8009dba:	f7fe fd7f 	bl	80088bc <__any_on>
 8009dbe:	4683      	mov	fp, r0
 8009dc0:	b1b8      	cbz	r0, 8009df2 <__gethex+0x1da>
 8009dc2:	f108 33ff 	add.w	r3, r8, #4294967295
 8009dc6:	1159      	asrs	r1, r3, #5
 8009dc8:	f003 021f 	and.w	r2, r3, #31
 8009dcc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009dd0:	f04f 0b01 	mov.w	fp, #1
 8009dd4:	fa0b f202 	lsl.w	r2, fp, r2
 8009dd8:	420a      	tst	r2, r1
 8009dda:	d00a      	beq.n	8009df2 <__gethex+0x1da>
 8009ddc:	455b      	cmp	r3, fp
 8009dde:	dd06      	ble.n	8009dee <__gethex+0x1d6>
 8009de0:	f1a8 0102 	sub.w	r1, r8, #2
 8009de4:	4620      	mov	r0, r4
 8009de6:	f7fe fd69 	bl	80088bc <__any_on>
 8009dea:	2800      	cmp	r0, #0
 8009dec:	d138      	bne.n	8009e60 <__gethex+0x248>
 8009dee:	f04f 0b02 	mov.w	fp, #2
 8009df2:	4641      	mov	r1, r8
 8009df4:	4620      	mov	r0, r4
 8009df6:	f7ff fea7 	bl	8009b48 <rshift>
 8009dfa:	4446      	add	r6, r8
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	42b3      	cmp	r3, r6
 8009e00:	da41      	bge.n	8009e86 <__gethex+0x26e>
 8009e02:	4621      	mov	r1, r4
 8009e04:	4648      	mov	r0, r9
 8009e06:	f7fe f90d 	bl	8008024 <_Bfree>
 8009e0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	6013      	str	r3, [r2, #0]
 8009e10:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009e14:	e78a      	b.n	8009d2c <__gethex+0x114>
 8009e16:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009e1a:	2a2e      	cmp	r2, #46	; 0x2e
 8009e1c:	d014      	beq.n	8009e48 <__gethex+0x230>
 8009e1e:	2b20      	cmp	r3, #32
 8009e20:	d106      	bne.n	8009e30 <__gethex+0x218>
 8009e22:	9b01      	ldr	r3, [sp, #4]
 8009e24:	f843 bb04 	str.w	fp, [r3], #4
 8009e28:	f04f 0b00 	mov.w	fp, #0
 8009e2c:	9301      	str	r3, [sp, #4]
 8009e2e:	465b      	mov	r3, fp
 8009e30:	7828      	ldrb	r0, [r5, #0]
 8009e32:	9303      	str	r3, [sp, #12]
 8009e34:	f7ff feda 	bl	8009bec <__hexdig_fun>
 8009e38:	9b03      	ldr	r3, [sp, #12]
 8009e3a:	f000 000f 	and.w	r0, r0, #15
 8009e3e:	4098      	lsls	r0, r3
 8009e40:	ea4b 0b00 	orr.w	fp, fp, r0
 8009e44:	3304      	adds	r3, #4
 8009e46:	e7a1      	b.n	8009d8c <__gethex+0x174>
 8009e48:	45a8      	cmp	r8, r5
 8009e4a:	d8e8      	bhi.n	8009e1e <__gethex+0x206>
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	4628      	mov	r0, r5
 8009e50:	9303      	str	r3, [sp, #12]
 8009e52:	f7ff fe0b 	bl	8009a6c <strncmp>
 8009e56:	4926      	ldr	r1, [pc, #152]	; (8009ef0 <__gethex+0x2d8>)
 8009e58:	9b03      	ldr	r3, [sp, #12]
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	d1df      	bne.n	8009e1e <__gethex+0x206>
 8009e5e:	e795      	b.n	8009d8c <__gethex+0x174>
 8009e60:	f04f 0b03 	mov.w	fp, #3
 8009e64:	e7c5      	b.n	8009df2 <__gethex+0x1da>
 8009e66:	da0b      	bge.n	8009e80 <__gethex+0x268>
 8009e68:	eba5 0800 	sub.w	r8, r5, r0
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	4642      	mov	r2, r8
 8009e70:	4648      	mov	r0, r9
 8009e72:	f7fe faf1 	bl	8008458 <__lshift>
 8009e76:	eba6 0608 	sub.w	r6, r6, r8
 8009e7a:	4604      	mov	r4, r0
 8009e7c:	f100 0a14 	add.w	sl, r0, #20
 8009e80:	f04f 0b00 	mov.w	fp, #0
 8009e84:	e7ba      	b.n	8009dfc <__gethex+0x1e4>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	42b3      	cmp	r3, r6
 8009e8a:	dd73      	ble.n	8009f74 <__gethex+0x35c>
 8009e8c:	1b9e      	subs	r6, r3, r6
 8009e8e:	42b5      	cmp	r5, r6
 8009e90:	dc34      	bgt.n	8009efc <__gethex+0x2e4>
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2b02      	cmp	r3, #2
 8009e96:	d023      	beq.n	8009ee0 <__gethex+0x2c8>
 8009e98:	2b03      	cmp	r3, #3
 8009e9a:	d025      	beq.n	8009ee8 <__gethex+0x2d0>
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d115      	bne.n	8009ecc <__gethex+0x2b4>
 8009ea0:	42b5      	cmp	r5, r6
 8009ea2:	d113      	bne.n	8009ecc <__gethex+0x2b4>
 8009ea4:	2d01      	cmp	r5, #1
 8009ea6:	d10b      	bne.n	8009ec0 <__gethex+0x2a8>
 8009ea8:	9a02      	ldr	r2, [sp, #8]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6013      	str	r3, [r2, #0]
 8009eae:	2301      	movs	r3, #1
 8009eb0:	6123      	str	r3, [r4, #16]
 8009eb2:	f8ca 3000 	str.w	r3, [sl]
 8009eb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009eb8:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009ebc:	601c      	str	r4, [r3, #0]
 8009ebe:	e735      	b.n	8009d2c <__gethex+0x114>
 8009ec0:	1e69      	subs	r1, r5, #1
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f7fe fcfa 	bl	80088bc <__any_on>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	d1ed      	bne.n	8009ea8 <__gethex+0x290>
 8009ecc:	4621      	mov	r1, r4
 8009ece:	4648      	mov	r0, r9
 8009ed0:	f7fe f8a8 	bl	8008024 <_Bfree>
 8009ed4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	6013      	str	r3, [r2, #0]
 8009eda:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009ede:	e725      	b.n	8009d2c <__gethex+0x114>
 8009ee0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1f2      	bne.n	8009ecc <__gethex+0x2b4>
 8009ee6:	e7df      	b.n	8009ea8 <__gethex+0x290>
 8009ee8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d1dc      	bne.n	8009ea8 <__gethex+0x290>
 8009eee:	e7ed      	b.n	8009ecc <__gethex+0x2b4>
 8009ef0:	0800aaa4 	.word	0x0800aaa4
 8009ef4:	0800a93d 	.word	0x0800a93d
 8009ef8:	0800ac4e 	.word	0x0800ac4e
 8009efc:	f106 38ff 	add.w	r8, r6, #4294967295
 8009f00:	f1bb 0f00 	cmp.w	fp, #0
 8009f04:	d133      	bne.n	8009f6e <__gethex+0x356>
 8009f06:	f1b8 0f00 	cmp.w	r8, #0
 8009f0a:	d004      	beq.n	8009f16 <__gethex+0x2fe>
 8009f0c:	4641      	mov	r1, r8
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f7fe fcd4 	bl	80088bc <__any_on>
 8009f14:	4683      	mov	fp, r0
 8009f16:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009f20:	f008 081f 	and.w	r8, r8, #31
 8009f24:	fa03 f308 	lsl.w	r3, r3, r8
 8009f28:	4213      	tst	r3, r2
 8009f2a:	4631      	mov	r1, r6
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	bf18      	it	ne
 8009f30:	f04b 0b02 	orrne.w	fp, fp, #2
 8009f34:	1bad      	subs	r5, r5, r6
 8009f36:	f7ff fe07 	bl	8009b48 <rshift>
 8009f3a:	687e      	ldr	r6, [r7, #4]
 8009f3c:	f04f 0802 	mov.w	r8, #2
 8009f40:	f1bb 0f00 	cmp.w	fp, #0
 8009f44:	d04a      	beq.n	8009fdc <__gethex+0x3c4>
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d016      	beq.n	8009f7a <__gethex+0x362>
 8009f4c:	2b03      	cmp	r3, #3
 8009f4e:	d018      	beq.n	8009f82 <__gethex+0x36a>
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d109      	bne.n	8009f68 <__gethex+0x350>
 8009f54:	f01b 0f02 	tst.w	fp, #2
 8009f58:	d006      	beq.n	8009f68 <__gethex+0x350>
 8009f5a:	f8da 3000 	ldr.w	r3, [sl]
 8009f5e:	ea4b 0b03 	orr.w	fp, fp, r3
 8009f62:	f01b 0f01 	tst.w	fp, #1
 8009f66:	d10f      	bne.n	8009f88 <__gethex+0x370>
 8009f68:	f048 0810 	orr.w	r8, r8, #16
 8009f6c:	e036      	b.n	8009fdc <__gethex+0x3c4>
 8009f6e:	f04f 0b01 	mov.w	fp, #1
 8009f72:	e7d0      	b.n	8009f16 <__gethex+0x2fe>
 8009f74:	f04f 0801 	mov.w	r8, #1
 8009f78:	e7e2      	b.n	8009f40 <__gethex+0x328>
 8009f7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f7c:	f1c3 0301 	rsb	r3, r3, #1
 8009f80:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d0ef      	beq.n	8009f68 <__gethex+0x350>
 8009f88:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009f8c:	f104 0214 	add.w	r2, r4, #20
 8009f90:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009f94:	9301      	str	r3, [sp, #4]
 8009f96:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	4694      	mov	ip, r2
 8009f9e:	f852 1b04 	ldr.w	r1, [r2], #4
 8009fa2:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009fa6:	d01e      	beq.n	8009fe6 <__gethex+0x3ce>
 8009fa8:	3101      	adds	r1, #1
 8009faa:	f8cc 1000 	str.w	r1, [ip]
 8009fae:	f1b8 0f02 	cmp.w	r8, #2
 8009fb2:	f104 0214 	add.w	r2, r4, #20
 8009fb6:	d13d      	bne.n	800a034 <__gethex+0x41c>
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	42ab      	cmp	r3, r5
 8009fbe:	d10b      	bne.n	8009fd8 <__gethex+0x3c0>
 8009fc0:	1169      	asrs	r1, r5, #5
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	f005 051f 	and.w	r5, r5, #31
 8009fc8:	fa03 f505 	lsl.w	r5, r3, r5
 8009fcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009fd0:	421d      	tst	r5, r3
 8009fd2:	bf18      	it	ne
 8009fd4:	f04f 0801 	movne.w	r8, #1
 8009fd8:	f048 0820 	orr.w	r8, r8, #32
 8009fdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fde:	601c      	str	r4, [r3, #0]
 8009fe0:	9b02      	ldr	r3, [sp, #8]
 8009fe2:	601e      	str	r6, [r3, #0]
 8009fe4:	e6a2      	b.n	8009d2c <__gethex+0x114>
 8009fe6:	4290      	cmp	r0, r2
 8009fe8:	f842 3c04 	str.w	r3, [r2, #-4]
 8009fec:	d8d6      	bhi.n	8009f9c <__gethex+0x384>
 8009fee:	68a2      	ldr	r2, [r4, #8]
 8009ff0:	4593      	cmp	fp, r2
 8009ff2:	db17      	blt.n	800a024 <__gethex+0x40c>
 8009ff4:	6861      	ldr	r1, [r4, #4]
 8009ff6:	4648      	mov	r0, r9
 8009ff8:	3101      	adds	r1, #1
 8009ffa:	f7fd ffd3 	bl	8007fa4 <_Balloc>
 8009ffe:	4682      	mov	sl, r0
 800a000:	b918      	cbnz	r0, 800a00a <__gethex+0x3f2>
 800a002:	4b1b      	ldr	r3, [pc, #108]	; (800a070 <__gethex+0x458>)
 800a004:	4602      	mov	r2, r0
 800a006:	2184      	movs	r1, #132	; 0x84
 800a008:	e6b3      	b.n	8009d72 <__gethex+0x15a>
 800a00a:	6922      	ldr	r2, [r4, #16]
 800a00c:	3202      	adds	r2, #2
 800a00e:	f104 010c 	add.w	r1, r4, #12
 800a012:	0092      	lsls	r2, r2, #2
 800a014:	300c      	adds	r0, #12
 800a016:	f7ff fd4b 	bl	8009ab0 <memcpy>
 800a01a:	4621      	mov	r1, r4
 800a01c:	4648      	mov	r0, r9
 800a01e:	f7fe f801 	bl	8008024 <_Bfree>
 800a022:	4654      	mov	r4, sl
 800a024:	6922      	ldr	r2, [r4, #16]
 800a026:	1c51      	adds	r1, r2, #1
 800a028:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a02c:	6121      	str	r1, [r4, #16]
 800a02e:	2101      	movs	r1, #1
 800a030:	6151      	str	r1, [r2, #20]
 800a032:	e7bc      	b.n	8009fae <__gethex+0x396>
 800a034:	6921      	ldr	r1, [r4, #16]
 800a036:	4559      	cmp	r1, fp
 800a038:	dd0b      	ble.n	800a052 <__gethex+0x43a>
 800a03a:	2101      	movs	r1, #1
 800a03c:	4620      	mov	r0, r4
 800a03e:	f7ff fd83 	bl	8009b48 <rshift>
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	3601      	adds	r6, #1
 800a046:	42b3      	cmp	r3, r6
 800a048:	f6ff aedb 	blt.w	8009e02 <__gethex+0x1ea>
 800a04c:	f04f 0801 	mov.w	r8, #1
 800a050:	e7c2      	b.n	8009fd8 <__gethex+0x3c0>
 800a052:	f015 051f 	ands.w	r5, r5, #31
 800a056:	d0f9      	beq.n	800a04c <__gethex+0x434>
 800a058:	9b01      	ldr	r3, [sp, #4]
 800a05a:	441a      	add	r2, r3
 800a05c:	f1c5 0520 	rsb	r5, r5, #32
 800a060:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a064:	f7fe f890 	bl	8008188 <__hi0bits>
 800a068:	42a8      	cmp	r0, r5
 800a06a:	dbe6      	blt.n	800a03a <__gethex+0x422>
 800a06c:	e7ee      	b.n	800a04c <__gethex+0x434>
 800a06e:	bf00      	nop
 800a070:	0800a93d 	.word	0x0800a93d

0800a074 <L_shift>:
 800a074:	f1c2 0208 	rsb	r2, r2, #8
 800a078:	0092      	lsls	r2, r2, #2
 800a07a:	b570      	push	{r4, r5, r6, lr}
 800a07c:	f1c2 0620 	rsb	r6, r2, #32
 800a080:	6843      	ldr	r3, [r0, #4]
 800a082:	6804      	ldr	r4, [r0, #0]
 800a084:	fa03 f506 	lsl.w	r5, r3, r6
 800a088:	432c      	orrs	r4, r5
 800a08a:	40d3      	lsrs	r3, r2
 800a08c:	6004      	str	r4, [r0, #0]
 800a08e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a092:	4288      	cmp	r0, r1
 800a094:	d3f4      	bcc.n	800a080 <L_shift+0xc>
 800a096:	bd70      	pop	{r4, r5, r6, pc}

0800a098 <__match>:
 800a098:	b530      	push	{r4, r5, lr}
 800a09a:	6803      	ldr	r3, [r0, #0]
 800a09c:	3301      	adds	r3, #1
 800a09e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0a2:	b914      	cbnz	r4, 800a0aa <__match+0x12>
 800a0a4:	6003      	str	r3, [r0, #0]
 800a0a6:	2001      	movs	r0, #1
 800a0a8:	bd30      	pop	{r4, r5, pc}
 800a0aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a0b2:	2d19      	cmp	r5, #25
 800a0b4:	bf98      	it	ls
 800a0b6:	3220      	addls	r2, #32
 800a0b8:	42a2      	cmp	r2, r4
 800a0ba:	d0f0      	beq.n	800a09e <__match+0x6>
 800a0bc:	2000      	movs	r0, #0
 800a0be:	e7f3      	b.n	800a0a8 <__match+0x10>

0800a0c0 <__hexnan>:
 800a0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c4:	680b      	ldr	r3, [r1, #0]
 800a0c6:	6801      	ldr	r1, [r0, #0]
 800a0c8:	115e      	asrs	r6, r3, #5
 800a0ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a0ce:	f013 031f 	ands.w	r3, r3, #31
 800a0d2:	b087      	sub	sp, #28
 800a0d4:	bf18      	it	ne
 800a0d6:	3604      	addne	r6, #4
 800a0d8:	2500      	movs	r5, #0
 800a0da:	1f37      	subs	r7, r6, #4
 800a0dc:	4682      	mov	sl, r0
 800a0de:	4690      	mov	r8, r2
 800a0e0:	9301      	str	r3, [sp, #4]
 800a0e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a0e6:	46b9      	mov	r9, r7
 800a0e8:	463c      	mov	r4, r7
 800a0ea:	9502      	str	r5, [sp, #8]
 800a0ec:	46ab      	mov	fp, r5
 800a0ee:	784a      	ldrb	r2, [r1, #1]
 800a0f0:	1c4b      	adds	r3, r1, #1
 800a0f2:	9303      	str	r3, [sp, #12]
 800a0f4:	b342      	cbz	r2, 800a148 <__hexnan+0x88>
 800a0f6:	4610      	mov	r0, r2
 800a0f8:	9105      	str	r1, [sp, #20]
 800a0fa:	9204      	str	r2, [sp, #16]
 800a0fc:	f7ff fd76 	bl	8009bec <__hexdig_fun>
 800a100:	2800      	cmp	r0, #0
 800a102:	d14f      	bne.n	800a1a4 <__hexnan+0xe4>
 800a104:	9a04      	ldr	r2, [sp, #16]
 800a106:	9905      	ldr	r1, [sp, #20]
 800a108:	2a20      	cmp	r2, #32
 800a10a:	d818      	bhi.n	800a13e <__hexnan+0x7e>
 800a10c:	9b02      	ldr	r3, [sp, #8]
 800a10e:	459b      	cmp	fp, r3
 800a110:	dd13      	ble.n	800a13a <__hexnan+0x7a>
 800a112:	454c      	cmp	r4, r9
 800a114:	d206      	bcs.n	800a124 <__hexnan+0x64>
 800a116:	2d07      	cmp	r5, #7
 800a118:	dc04      	bgt.n	800a124 <__hexnan+0x64>
 800a11a:	462a      	mov	r2, r5
 800a11c:	4649      	mov	r1, r9
 800a11e:	4620      	mov	r0, r4
 800a120:	f7ff ffa8 	bl	800a074 <L_shift>
 800a124:	4544      	cmp	r4, r8
 800a126:	d950      	bls.n	800a1ca <__hexnan+0x10a>
 800a128:	2300      	movs	r3, #0
 800a12a:	f1a4 0904 	sub.w	r9, r4, #4
 800a12e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a132:	f8cd b008 	str.w	fp, [sp, #8]
 800a136:	464c      	mov	r4, r9
 800a138:	461d      	mov	r5, r3
 800a13a:	9903      	ldr	r1, [sp, #12]
 800a13c:	e7d7      	b.n	800a0ee <__hexnan+0x2e>
 800a13e:	2a29      	cmp	r2, #41	; 0x29
 800a140:	d155      	bne.n	800a1ee <__hexnan+0x12e>
 800a142:	3102      	adds	r1, #2
 800a144:	f8ca 1000 	str.w	r1, [sl]
 800a148:	f1bb 0f00 	cmp.w	fp, #0
 800a14c:	d04f      	beq.n	800a1ee <__hexnan+0x12e>
 800a14e:	454c      	cmp	r4, r9
 800a150:	d206      	bcs.n	800a160 <__hexnan+0xa0>
 800a152:	2d07      	cmp	r5, #7
 800a154:	dc04      	bgt.n	800a160 <__hexnan+0xa0>
 800a156:	462a      	mov	r2, r5
 800a158:	4649      	mov	r1, r9
 800a15a:	4620      	mov	r0, r4
 800a15c:	f7ff ff8a 	bl	800a074 <L_shift>
 800a160:	4544      	cmp	r4, r8
 800a162:	d934      	bls.n	800a1ce <__hexnan+0x10e>
 800a164:	f1a8 0204 	sub.w	r2, r8, #4
 800a168:	4623      	mov	r3, r4
 800a16a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a16e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a172:	429f      	cmp	r7, r3
 800a174:	d2f9      	bcs.n	800a16a <__hexnan+0xaa>
 800a176:	1b3b      	subs	r3, r7, r4
 800a178:	f023 0303 	bic.w	r3, r3, #3
 800a17c:	3304      	adds	r3, #4
 800a17e:	3e03      	subs	r6, #3
 800a180:	3401      	adds	r4, #1
 800a182:	42a6      	cmp	r6, r4
 800a184:	bf38      	it	cc
 800a186:	2304      	movcc	r3, #4
 800a188:	4443      	add	r3, r8
 800a18a:	2200      	movs	r2, #0
 800a18c:	f843 2b04 	str.w	r2, [r3], #4
 800a190:	429f      	cmp	r7, r3
 800a192:	d2fb      	bcs.n	800a18c <__hexnan+0xcc>
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	b91b      	cbnz	r3, 800a1a0 <__hexnan+0xe0>
 800a198:	4547      	cmp	r7, r8
 800a19a:	d126      	bne.n	800a1ea <__hexnan+0x12a>
 800a19c:	2301      	movs	r3, #1
 800a19e:	603b      	str	r3, [r7, #0]
 800a1a0:	2005      	movs	r0, #5
 800a1a2:	e025      	b.n	800a1f0 <__hexnan+0x130>
 800a1a4:	3501      	adds	r5, #1
 800a1a6:	2d08      	cmp	r5, #8
 800a1a8:	f10b 0b01 	add.w	fp, fp, #1
 800a1ac:	dd06      	ble.n	800a1bc <__hexnan+0xfc>
 800a1ae:	4544      	cmp	r4, r8
 800a1b0:	d9c3      	bls.n	800a13a <__hexnan+0x7a>
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1b8:	2501      	movs	r5, #1
 800a1ba:	3c04      	subs	r4, #4
 800a1bc:	6822      	ldr	r2, [r4, #0]
 800a1be:	f000 000f 	and.w	r0, r0, #15
 800a1c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a1c6:	6020      	str	r0, [r4, #0]
 800a1c8:	e7b7      	b.n	800a13a <__hexnan+0x7a>
 800a1ca:	2508      	movs	r5, #8
 800a1cc:	e7b5      	b.n	800a13a <__hexnan+0x7a>
 800a1ce:	9b01      	ldr	r3, [sp, #4]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d0df      	beq.n	800a194 <__hexnan+0xd4>
 800a1d4:	f1c3 0320 	rsb	r3, r3, #32
 800a1d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a1dc:	40da      	lsrs	r2, r3
 800a1de:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a1e2:	4013      	ands	r3, r2
 800a1e4:	f846 3c04 	str.w	r3, [r6, #-4]
 800a1e8:	e7d4      	b.n	800a194 <__hexnan+0xd4>
 800a1ea:	3f04      	subs	r7, #4
 800a1ec:	e7d2      	b.n	800a194 <__hexnan+0xd4>
 800a1ee:	2004      	movs	r0, #4
 800a1f0:	b007      	add	sp, #28
 800a1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a1f6 <__ascii_mbtowc>:
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	b901      	cbnz	r1, 800a1fc <__ascii_mbtowc+0x6>
 800a1fa:	a901      	add	r1, sp, #4
 800a1fc:	b142      	cbz	r2, 800a210 <__ascii_mbtowc+0x1a>
 800a1fe:	b14b      	cbz	r3, 800a214 <__ascii_mbtowc+0x1e>
 800a200:	7813      	ldrb	r3, [r2, #0]
 800a202:	600b      	str	r3, [r1, #0]
 800a204:	7812      	ldrb	r2, [r2, #0]
 800a206:	1e10      	subs	r0, r2, #0
 800a208:	bf18      	it	ne
 800a20a:	2001      	movne	r0, #1
 800a20c:	b002      	add	sp, #8
 800a20e:	4770      	bx	lr
 800a210:	4610      	mov	r0, r2
 800a212:	e7fb      	b.n	800a20c <__ascii_mbtowc+0x16>
 800a214:	f06f 0001 	mvn.w	r0, #1
 800a218:	e7f8      	b.n	800a20c <__ascii_mbtowc+0x16>

0800a21a <_realloc_r>:
 800a21a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a21e:	4680      	mov	r8, r0
 800a220:	4614      	mov	r4, r2
 800a222:	460e      	mov	r6, r1
 800a224:	b921      	cbnz	r1, 800a230 <_realloc_r+0x16>
 800a226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a22a:	4611      	mov	r1, r2
 800a22c:	f7fd be2e 	b.w	8007e8c <_malloc_r>
 800a230:	b92a      	cbnz	r2, 800a23e <_realloc_r+0x24>
 800a232:	f7fd fdb7 	bl	8007da4 <_free_r>
 800a236:	4625      	mov	r5, r4
 800a238:	4628      	mov	r0, r5
 800a23a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a23e:	f000 f842 	bl	800a2c6 <_malloc_usable_size_r>
 800a242:	4284      	cmp	r4, r0
 800a244:	4607      	mov	r7, r0
 800a246:	d802      	bhi.n	800a24e <_realloc_r+0x34>
 800a248:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a24c:	d812      	bhi.n	800a274 <_realloc_r+0x5a>
 800a24e:	4621      	mov	r1, r4
 800a250:	4640      	mov	r0, r8
 800a252:	f7fd fe1b 	bl	8007e8c <_malloc_r>
 800a256:	4605      	mov	r5, r0
 800a258:	2800      	cmp	r0, #0
 800a25a:	d0ed      	beq.n	800a238 <_realloc_r+0x1e>
 800a25c:	42bc      	cmp	r4, r7
 800a25e:	4622      	mov	r2, r4
 800a260:	4631      	mov	r1, r6
 800a262:	bf28      	it	cs
 800a264:	463a      	movcs	r2, r7
 800a266:	f7ff fc23 	bl	8009ab0 <memcpy>
 800a26a:	4631      	mov	r1, r6
 800a26c:	4640      	mov	r0, r8
 800a26e:	f7fd fd99 	bl	8007da4 <_free_r>
 800a272:	e7e1      	b.n	800a238 <_realloc_r+0x1e>
 800a274:	4635      	mov	r5, r6
 800a276:	e7df      	b.n	800a238 <_realloc_r+0x1e>

0800a278 <__ascii_wctomb>:
 800a278:	b149      	cbz	r1, 800a28e <__ascii_wctomb+0x16>
 800a27a:	2aff      	cmp	r2, #255	; 0xff
 800a27c:	bf85      	ittet	hi
 800a27e:	238a      	movhi	r3, #138	; 0x8a
 800a280:	6003      	strhi	r3, [r0, #0]
 800a282:	700a      	strbls	r2, [r1, #0]
 800a284:	f04f 30ff 	movhi.w	r0, #4294967295
 800a288:	bf98      	it	ls
 800a28a:	2001      	movls	r0, #1
 800a28c:	4770      	bx	lr
 800a28e:	4608      	mov	r0, r1
 800a290:	4770      	bx	lr
	...

0800a294 <fiprintf>:
 800a294:	b40e      	push	{r1, r2, r3}
 800a296:	b503      	push	{r0, r1, lr}
 800a298:	4601      	mov	r1, r0
 800a29a:	ab03      	add	r3, sp, #12
 800a29c:	4805      	ldr	r0, [pc, #20]	; (800a2b4 <fiprintf+0x20>)
 800a29e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2a2:	6800      	ldr	r0, [r0, #0]
 800a2a4:	9301      	str	r3, [sp, #4]
 800a2a6:	f000 f83f 	bl	800a328 <_vfiprintf_r>
 800a2aa:	b002      	add	sp, #8
 800a2ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2b0:	b003      	add	sp, #12
 800a2b2:	4770      	bx	lr
 800a2b4:	20000064 	.word	0x20000064

0800a2b8 <abort>:
 800a2b8:	b508      	push	{r3, lr}
 800a2ba:	2006      	movs	r0, #6
 800a2bc:	f000 fa0c 	bl	800a6d8 <raise>
 800a2c0:	2001      	movs	r0, #1
 800a2c2:	f7f7 f993 	bl	80015ec <_exit>

0800a2c6 <_malloc_usable_size_r>:
 800a2c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2ca:	1f18      	subs	r0, r3, #4
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	bfbc      	itt	lt
 800a2d0:	580b      	ldrlt	r3, [r1, r0]
 800a2d2:	18c0      	addlt	r0, r0, r3
 800a2d4:	4770      	bx	lr

0800a2d6 <__sfputc_r>:
 800a2d6:	6893      	ldr	r3, [r2, #8]
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	b410      	push	{r4}
 800a2de:	6093      	str	r3, [r2, #8]
 800a2e0:	da08      	bge.n	800a2f4 <__sfputc_r+0x1e>
 800a2e2:	6994      	ldr	r4, [r2, #24]
 800a2e4:	42a3      	cmp	r3, r4
 800a2e6:	db01      	blt.n	800a2ec <__sfputc_r+0x16>
 800a2e8:	290a      	cmp	r1, #10
 800a2ea:	d103      	bne.n	800a2f4 <__sfputc_r+0x1e>
 800a2ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2f0:	f000 b934 	b.w	800a55c <__swbuf_r>
 800a2f4:	6813      	ldr	r3, [r2, #0]
 800a2f6:	1c58      	adds	r0, r3, #1
 800a2f8:	6010      	str	r0, [r2, #0]
 800a2fa:	7019      	strb	r1, [r3, #0]
 800a2fc:	4608      	mov	r0, r1
 800a2fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <__sfputs_r>:
 800a304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a306:	4606      	mov	r6, r0
 800a308:	460f      	mov	r7, r1
 800a30a:	4614      	mov	r4, r2
 800a30c:	18d5      	adds	r5, r2, r3
 800a30e:	42ac      	cmp	r4, r5
 800a310:	d101      	bne.n	800a316 <__sfputs_r+0x12>
 800a312:	2000      	movs	r0, #0
 800a314:	e007      	b.n	800a326 <__sfputs_r+0x22>
 800a316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a31a:	463a      	mov	r2, r7
 800a31c:	4630      	mov	r0, r6
 800a31e:	f7ff ffda 	bl	800a2d6 <__sfputc_r>
 800a322:	1c43      	adds	r3, r0, #1
 800a324:	d1f3      	bne.n	800a30e <__sfputs_r+0xa>
 800a326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a328 <_vfiprintf_r>:
 800a328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a32c:	460d      	mov	r5, r1
 800a32e:	b09d      	sub	sp, #116	; 0x74
 800a330:	4614      	mov	r4, r2
 800a332:	4698      	mov	r8, r3
 800a334:	4606      	mov	r6, r0
 800a336:	b118      	cbz	r0, 800a340 <_vfiprintf_r+0x18>
 800a338:	6a03      	ldr	r3, [r0, #32]
 800a33a:	b90b      	cbnz	r3, 800a340 <_vfiprintf_r+0x18>
 800a33c:	f7fc fd9a 	bl	8006e74 <__sinit>
 800a340:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a342:	07d9      	lsls	r1, r3, #31
 800a344:	d405      	bmi.n	800a352 <_vfiprintf_r+0x2a>
 800a346:	89ab      	ldrh	r3, [r5, #12]
 800a348:	059a      	lsls	r2, r3, #22
 800a34a:	d402      	bmi.n	800a352 <_vfiprintf_r+0x2a>
 800a34c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a34e:	f7fc fea7 	bl	80070a0 <__retarget_lock_acquire_recursive>
 800a352:	89ab      	ldrh	r3, [r5, #12]
 800a354:	071b      	lsls	r3, r3, #28
 800a356:	d501      	bpl.n	800a35c <_vfiprintf_r+0x34>
 800a358:	692b      	ldr	r3, [r5, #16]
 800a35a:	b99b      	cbnz	r3, 800a384 <_vfiprintf_r+0x5c>
 800a35c:	4629      	mov	r1, r5
 800a35e:	4630      	mov	r0, r6
 800a360:	f000 f93a 	bl	800a5d8 <__swsetup_r>
 800a364:	b170      	cbz	r0, 800a384 <_vfiprintf_r+0x5c>
 800a366:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a368:	07dc      	lsls	r4, r3, #31
 800a36a:	d504      	bpl.n	800a376 <_vfiprintf_r+0x4e>
 800a36c:	f04f 30ff 	mov.w	r0, #4294967295
 800a370:	b01d      	add	sp, #116	; 0x74
 800a372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a376:	89ab      	ldrh	r3, [r5, #12]
 800a378:	0598      	lsls	r0, r3, #22
 800a37a:	d4f7      	bmi.n	800a36c <_vfiprintf_r+0x44>
 800a37c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a37e:	f7fc fe90 	bl	80070a2 <__retarget_lock_release_recursive>
 800a382:	e7f3      	b.n	800a36c <_vfiprintf_r+0x44>
 800a384:	2300      	movs	r3, #0
 800a386:	9309      	str	r3, [sp, #36]	; 0x24
 800a388:	2320      	movs	r3, #32
 800a38a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a38e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a392:	2330      	movs	r3, #48	; 0x30
 800a394:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a548 <_vfiprintf_r+0x220>
 800a398:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a39c:	f04f 0901 	mov.w	r9, #1
 800a3a0:	4623      	mov	r3, r4
 800a3a2:	469a      	mov	sl, r3
 800a3a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3a8:	b10a      	cbz	r2, 800a3ae <_vfiprintf_r+0x86>
 800a3aa:	2a25      	cmp	r2, #37	; 0x25
 800a3ac:	d1f9      	bne.n	800a3a2 <_vfiprintf_r+0x7a>
 800a3ae:	ebba 0b04 	subs.w	fp, sl, r4
 800a3b2:	d00b      	beq.n	800a3cc <_vfiprintf_r+0xa4>
 800a3b4:	465b      	mov	r3, fp
 800a3b6:	4622      	mov	r2, r4
 800a3b8:	4629      	mov	r1, r5
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	f7ff ffa2 	bl	800a304 <__sfputs_r>
 800a3c0:	3001      	adds	r0, #1
 800a3c2:	f000 80a9 	beq.w	800a518 <_vfiprintf_r+0x1f0>
 800a3c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3c8:	445a      	add	r2, fp
 800a3ca:	9209      	str	r2, [sp, #36]	; 0x24
 800a3cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f000 80a1 	beq.w	800a518 <_vfiprintf_r+0x1f0>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3e0:	f10a 0a01 	add.w	sl, sl, #1
 800a3e4:	9304      	str	r3, [sp, #16]
 800a3e6:	9307      	str	r3, [sp, #28]
 800a3e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3ec:	931a      	str	r3, [sp, #104]	; 0x68
 800a3ee:	4654      	mov	r4, sl
 800a3f0:	2205      	movs	r2, #5
 800a3f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3f6:	4854      	ldr	r0, [pc, #336]	; (800a548 <_vfiprintf_r+0x220>)
 800a3f8:	f7f5 feea 	bl	80001d0 <memchr>
 800a3fc:	9a04      	ldr	r2, [sp, #16]
 800a3fe:	b9d8      	cbnz	r0, 800a438 <_vfiprintf_r+0x110>
 800a400:	06d1      	lsls	r1, r2, #27
 800a402:	bf44      	itt	mi
 800a404:	2320      	movmi	r3, #32
 800a406:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a40a:	0713      	lsls	r3, r2, #28
 800a40c:	bf44      	itt	mi
 800a40e:	232b      	movmi	r3, #43	; 0x2b
 800a410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a414:	f89a 3000 	ldrb.w	r3, [sl]
 800a418:	2b2a      	cmp	r3, #42	; 0x2a
 800a41a:	d015      	beq.n	800a448 <_vfiprintf_r+0x120>
 800a41c:	9a07      	ldr	r2, [sp, #28]
 800a41e:	4654      	mov	r4, sl
 800a420:	2000      	movs	r0, #0
 800a422:	f04f 0c0a 	mov.w	ip, #10
 800a426:	4621      	mov	r1, r4
 800a428:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a42c:	3b30      	subs	r3, #48	; 0x30
 800a42e:	2b09      	cmp	r3, #9
 800a430:	d94d      	bls.n	800a4ce <_vfiprintf_r+0x1a6>
 800a432:	b1b0      	cbz	r0, 800a462 <_vfiprintf_r+0x13a>
 800a434:	9207      	str	r2, [sp, #28]
 800a436:	e014      	b.n	800a462 <_vfiprintf_r+0x13a>
 800a438:	eba0 0308 	sub.w	r3, r0, r8
 800a43c:	fa09 f303 	lsl.w	r3, r9, r3
 800a440:	4313      	orrs	r3, r2
 800a442:	9304      	str	r3, [sp, #16]
 800a444:	46a2      	mov	sl, r4
 800a446:	e7d2      	b.n	800a3ee <_vfiprintf_r+0xc6>
 800a448:	9b03      	ldr	r3, [sp, #12]
 800a44a:	1d19      	adds	r1, r3, #4
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	9103      	str	r1, [sp, #12]
 800a450:	2b00      	cmp	r3, #0
 800a452:	bfbb      	ittet	lt
 800a454:	425b      	neglt	r3, r3
 800a456:	f042 0202 	orrlt.w	r2, r2, #2
 800a45a:	9307      	strge	r3, [sp, #28]
 800a45c:	9307      	strlt	r3, [sp, #28]
 800a45e:	bfb8      	it	lt
 800a460:	9204      	strlt	r2, [sp, #16]
 800a462:	7823      	ldrb	r3, [r4, #0]
 800a464:	2b2e      	cmp	r3, #46	; 0x2e
 800a466:	d10c      	bne.n	800a482 <_vfiprintf_r+0x15a>
 800a468:	7863      	ldrb	r3, [r4, #1]
 800a46a:	2b2a      	cmp	r3, #42	; 0x2a
 800a46c:	d134      	bne.n	800a4d8 <_vfiprintf_r+0x1b0>
 800a46e:	9b03      	ldr	r3, [sp, #12]
 800a470:	1d1a      	adds	r2, r3, #4
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	9203      	str	r2, [sp, #12]
 800a476:	2b00      	cmp	r3, #0
 800a478:	bfb8      	it	lt
 800a47a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a47e:	3402      	adds	r4, #2
 800a480:	9305      	str	r3, [sp, #20]
 800a482:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a558 <_vfiprintf_r+0x230>
 800a486:	7821      	ldrb	r1, [r4, #0]
 800a488:	2203      	movs	r2, #3
 800a48a:	4650      	mov	r0, sl
 800a48c:	f7f5 fea0 	bl	80001d0 <memchr>
 800a490:	b138      	cbz	r0, 800a4a2 <_vfiprintf_r+0x17a>
 800a492:	9b04      	ldr	r3, [sp, #16]
 800a494:	eba0 000a 	sub.w	r0, r0, sl
 800a498:	2240      	movs	r2, #64	; 0x40
 800a49a:	4082      	lsls	r2, r0
 800a49c:	4313      	orrs	r3, r2
 800a49e:	3401      	adds	r4, #1
 800a4a0:	9304      	str	r3, [sp, #16]
 800a4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4a6:	4829      	ldr	r0, [pc, #164]	; (800a54c <_vfiprintf_r+0x224>)
 800a4a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4ac:	2206      	movs	r2, #6
 800a4ae:	f7f5 fe8f 	bl	80001d0 <memchr>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	d03f      	beq.n	800a536 <_vfiprintf_r+0x20e>
 800a4b6:	4b26      	ldr	r3, [pc, #152]	; (800a550 <_vfiprintf_r+0x228>)
 800a4b8:	bb1b      	cbnz	r3, 800a502 <_vfiprintf_r+0x1da>
 800a4ba:	9b03      	ldr	r3, [sp, #12]
 800a4bc:	3307      	adds	r3, #7
 800a4be:	f023 0307 	bic.w	r3, r3, #7
 800a4c2:	3308      	adds	r3, #8
 800a4c4:	9303      	str	r3, [sp, #12]
 800a4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c8:	443b      	add	r3, r7
 800a4ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a4cc:	e768      	b.n	800a3a0 <_vfiprintf_r+0x78>
 800a4ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4d2:	460c      	mov	r4, r1
 800a4d4:	2001      	movs	r0, #1
 800a4d6:	e7a6      	b.n	800a426 <_vfiprintf_r+0xfe>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	3401      	adds	r4, #1
 800a4dc:	9305      	str	r3, [sp, #20]
 800a4de:	4619      	mov	r1, r3
 800a4e0:	f04f 0c0a 	mov.w	ip, #10
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4ea:	3a30      	subs	r2, #48	; 0x30
 800a4ec:	2a09      	cmp	r2, #9
 800a4ee:	d903      	bls.n	800a4f8 <_vfiprintf_r+0x1d0>
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d0c6      	beq.n	800a482 <_vfiprintf_r+0x15a>
 800a4f4:	9105      	str	r1, [sp, #20]
 800a4f6:	e7c4      	b.n	800a482 <_vfiprintf_r+0x15a>
 800a4f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	2301      	movs	r3, #1
 800a500:	e7f0      	b.n	800a4e4 <_vfiprintf_r+0x1bc>
 800a502:	ab03      	add	r3, sp, #12
 800a504:	9300      	str	r3, [sp, #0]
 800a506:	462a      	mov	r2, r5
 800a508:	4b12      	ldr	r3, [pc, #72]	; (800a554 <_vfiprintf_r+0x22c>)
 800a50a:	a904      	add	r1, sp, #16
 800a50c:	4630      	mov	r0, r6
 800a50e:	f7fb fe61 	bl	80061d4 <_printf_float>
 800a512:	4607      	mov	r7, r0
 800a514:	1c78      	adds	r0, r7, #1
 800a516:	d1d6      	bne.n	800a4c6 <_vfiprintf_r+0x19e>
 800a518:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a51a:	07d9      	lsls	r1, r3, #31
 800a51c:	d405      	bmi.n	800a52a <_vfiprintf_r+0x202>
 800a51e:	89ab      	ldrh	r3, [r5, #12]
 800a520:	059a      	lsls	r2, r3, #22
 800a522:	d402      	bmi.n	800a52a <_vfiprintf_r+0x202>
 800a524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a526:	f7fc fdbc 	bl	80070a2 <__retarget_lock_release_recursive>
 800a52a:	89ab      	ldrh	r3, [r5, #12]
 800a52c:	065b      	lsls	r3, r3, #25
 800a52e:	f53f af1d 	bmi.w	800a36c <_vfiprintf_r+0x44>
 800a532:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a534:	e71c      	b.n	800a370 <_vfiprintf_r+0x48>
 800a536:	ab03      	add	r3, sp, #12
 800a538:	9300      	str	r3, [sp, #0]
 800a53a:	462a      	mov	r2, r5
 800a53c:	4b05      	ldr	r3, [pc, #20]	; (800a554 <_vfiprintf_r+0x22c>)
 800a53e:	a904      	add	r1, sp, #16
 800a540:	4630      	mov	r0, r6
 800a542:	f7fc f8eb 	bl	800671c <_printf_i>
 800a546:	e7e4      	b.n	800a512 <_vfiprintf_r+0x1ea>
 800a548:	0800abf9 	.word	0x0800abf9
 800a54c:	0800ac03 	.word	0x0800ac03
 800a550:	080061d5 	.word	0x080061d5
 800a554:	0800a305 	.word	0x0800a305
 800a558:	0800abff 	.word	0x0800abff

0800a55c <__swbuf_r>:
 800a55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55e:	460e      	mov	r6, r1
 800a560:	4614      	mov	r4, r2
 800a562:	4605      	mov	r5, r0
 800a564:	b118      	cbz	r0, 800a56e <__swbuf_r+0x12>
 800a566:	6a03      	ldr	r3, [r0, #32]
 800a568:	b90b      	cbnz	r3, 800a56e <__swbuf_r+0x12>
 800a56a:	f7fc fc83 	bl	8006e74 <__sinit>
 800a56e:	69a3      	ldr	r3, [r4, #24]
 800a570:	60a3      	str	r3, [r4, #8]
 800a572:	89a3      	ldrh	r3, [r4, #12]
 800a574:	071a      	lsls	r2, r3, #28
 800a576:	d525      	bpl.n	800a5c4 <__swbuf_r+0x68>
 800a578:	6923      	ldr	r3, [r4, #16]
 800a57a:	b31b      	cbz	r3, 800a5c4 <__swbuf_r+0x68>
 800a57c:	6823      	ldr	r3, [r4, #0]
 800a57e:	6922      	ldr	r2, [r4, #16]
 800a580:	1a98      	subs	r0, r3, r2
 800a582:	6963      	ldr	r3, [r4, #20]
 800a584:	b2f6      	uxtb	r6, r6
 800a586:	4283      	cmp	r3, r0
 800a588:	4637      	mov	r7, r6
 800a58a:	dc04      	bgt.n	800a596 <__swbuf_r+0x3a>
 800a58c:	4621      	mov	r1, r4
 800a58e:	4628      	mov	r0, r5
 800a590:	f7ff fa2a 	bl	80099e8 <_fflush_r>
 800a594:	b9e0      	cbnz	r0, 800a5d0 <__swbuf_r+0x74>
 800a596:	68a3      	ldr	r3, [r4, #8]
 800a598:	3b01      	subs	r3, #1
 800a59a:	60a3      	str	r3, [r4, #8]
 800a59c:	6823      	ldr	r3, [r4, #0]
 800a59e:	1c5a      	adds	r2, r3, #1
 800a5a0:	6022      	str	r2, [r4, #0]
 800a5a2:	701e      	strb	r6, [r3, #0]
 800a5a4:	6962      	ldr	r2, [r4, #20]
 800a5a6:	1c43      	adds	r3, r0, #1
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d004      	beq.n	800a5b6 <__swbuf_r+0x5a>
 800a5ac:	89a3      	ldrh	r3, [r4, #12]
 800a5ae:	07db      	lsls	r3, r3, #31
 800a5b0:	d506      	bpl.n	800a5c0 <__swbuf_r+0x64>
 800a5b2:	2e0a      	cmp	r6, #10
 800a5b4:	d104      	bne.n	800a5c0 <__swbuf_r+0x64>
 800a5b6:	4621      	mov	r1, r4
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	f7ff fa15 	bl	80099e8 <_fflush_r>
 800a5be:	b938      	cbnz	r0, 800a5d0 <__swbuf_r+0x74>
 800a5c0:	4638      	mov	r0, r7
 800a5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5c4:	4621      	mov	r1, r4
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	f000 f806 	bl	800a5d8 <__swsetup_r>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	d0d5      	beq.n	800a57c <__swbuf_r+0x20>
 800a5d0:	f04f 37ff 	mov.w	r7, #4294967295
 800a5d4:	e7f4      	b.n	800a5c0 <__swbuf_r+0x64>
	...

0800a5d8 <__swsetup_r>:
 800a5d8:	b538      	push	{r3, r4, r5, lr}
 800a5da:	4b2a      	ldr	r3, [pc, #168]	; (800a684 <__swsetup_r+0xac>)
 800a5dc:	4605      	mov	r5, r0
 800a5de:	6818      	ldr	r0, [r3, #0]
 800a5e0:	460c      	mov	r4, r1
 800a5e2:	b118      	cbz	r0, 800a5ec <__swsetup_r+0x14>
 800a5e4:	6a03      	ldr	r3, [r0, #32]
 800a5e6:	b90b      	cbnz	r3, 800a5ec <__swsetup_r+0x14>
 800a5e8:	f7fc fc44 	bl	8006e74 <__sinit>
 800a5ec:	89a3      	ldrh	r3, [r4, #12]
 800a5ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5f2:	0718      	lsls	r0, r3, #28
 800a5f4:	d422      	bmi.n	800a63c <__swsetup_r+0x64>
 800a5f6:	06d9      	lsls	r1, r3, #27
 800a5f8:	d407      	bmi.n	800a60a <__swsetup_r+0x32>
 800a5fa:	2309      	movs	r3, #9
 800a5fc:	602b      	str	r3, [r5, #0]
 800a5fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a602:	81a3      	strh	r3, [r4, #12]
 800a604:	f04f 30ff 	mov.w	r0, #4294967295
 800a608:	e034      	b.n	800a674 <__swsetup_r+0x9c>
 800a60a:	0758      	lsls	r0, r3, #29
 800a60c:	d512      	bpl.n	800a634 <__swsetup_r+0x5c>
 800a60e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a610:	b141      	cbz	r1, 800a624 <__swsetup_r+0x4c>
 800a612:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a616:	4299      	cmp	r1, r3
 800a618:	d002      	beq.n	800a620 <__swsetup_r+0x48>
 800a61a:	4628      	mov	r0, r5
 800a61c:	f7fd fbc2 	bl	8007da4 <_free_r>
 800a620:	2300      	movs	r3, #0
 800a622:	6363      	str	r3, [r4, #52]	; 0x34
 800a624:	89a3      	ldrh	r3, [r4, #12]
 800a626:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a62a:	81a3      	strh	r3, [r4, #12]
 800a62c:	2300      	movs	r3, #0
 800a62e:	6063      	str	r3, [r4, #4]
 800a630:	6923      	ldr	r3, [r4, #16]
 800a632:	6023      	str	r3, [r4, #0]
 800a634:	89a3      	ldrh	r3, [r4, #12]
 800a636:	f043 0308 	orr.w	r3, r3, #8
 800a63a:	81a3      	strh	r3, [r4, #12]
 800a63c:	6923      	ldr	r3, [r4, #16]
 800a63e:	b94b      	cbnz	r3, 800a654 <__swsetup_r+0x7c>
 800a640:	89a3      	ldrh	r3, [r4, #12]
 800a642:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a64a:	d003      	beq.n	800a654 <__swsetup_r+0x7c>
 800a64c:	4621      	mov	r1, r4
 800a64e:	4628      	mov	r0, r5
 800a650:	f000 f884 	bl	800a75c <__smakebuf_r>
 800a654:	89a0      	ldrh	r0, [r4, #12]
 800a656:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a65a:	f010 0301 	ands.w	r3, r0, #1
 800a65e:	d00a      	beq.n	800a676 <__swsetup_r+0x9e>
 800a660:	2300      	movs	r3, #0
 800a662:	60a3      	str	r3, [r4, #8]
 800a664:	6963      	ldr	r3, [r4, #20]
 800a666:	425b      	negs	r3, r3
 800a668:	61a3      	str	r3, [r4, #24]
 800a66a:	6923      	ldr	r3, [r4, #16]
 800a66c:	b943      	cbnz	r3, 800a680 <__swsetup_r+0xa8>
 800a66e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a672:	d1c4      	bne.n	800a5fe <__swsetup_r+0x26>
 800a674:	bd38      	pop	{r3, r4, r5, pc}
 800a676:	0781      	lsls	r1, r0, #30
 800a678:	bf58      	it	pl
 800a67a:	6963      	ldrpl	r3, [r4, #20]
 800a67c:	60a3      	str	r3, [r4, #8]
 800a67e:	e7f4      	b.n	800a66a <__swsetup_r+0x92>
 800a680:	2000      	movs	r0, #0
 800a682:	e7f7      	b.n	800a674 <__swsetup_r+0x9c>
 800a684:	20000064 	.word	0x20000064

0800a688 <_raise_r>:
 800a688:	291f      	cmp	r1, #31
 800a68a:	b538      	push	{r3, r4, r5, lr}
 800a68c:	4604      	mov	r4, r0
 800a68e:	460d      	mov	r5, r1
 800a690:	d904      	bls.n	800a69c <_raise_r+0x14>
 800a692:	2316      	movs	r3, #22
 800a694:	6003      	str	r3, [r0, #0]
 800a696:	f04f 30ff 	mov.w	r0, #4294967295
 800a69a:	bd38      	pop	{r3, r4, r5, pc}
 800a69c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a69e:	b112      	cbz	r2, 800a6a6 <_raise_r+0x1e>
 800a6a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6a4:	b94b      	cbnz	r3, 800a6ba <_raise_r+0x32>
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	f000 f830 	bl	800a70c <_getpid_r>
 800a6ac:	462a      	mov	r2, r5
 800a6ae:	4601      	mov	r1, r0
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6b6:	f000 b817 	b.w	800a6e8 <_kill_r>
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d00a      	beq.n	800a6d4 <_raise_r+0x4c>
 800a6be:	1c59      	adds	r1, r3, #1
 800a6c0:	d103      	bne.n	800a6ca <_raise_r+0x42>
 800a6c2:	2316      	movs	r3, #22
 800a6c4:	6003      	str	r3, [r0, #0]
 800a6c6:	2001      	movs	r0, #1
 800a6c8:	e7e7      	b.n	800a69a <_raise_r+0x12>
 800a6ca:	2400      	movs	r4, #0
 800a6cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	4798      	blx	r3
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	e7e0      	b.n	800a69a <_raise_r+0x12>

0800a6d8 <raise>:
 800a6d8:	4b02      	ldr	r3, [pc, #8]	; (800a6e4 <raise+0xc>)
 800a6da:	4601      	mov	r1, r0
 800a6dc:	6818      	ldr	r0, [r3, #0]
 800a6de:	f7ff bfd3 	b.w	800a688 <_raise_r>
 800a6e2:	bf00      	nop
 800a6e4:	20000064 	.word	0x20000064

0800a6e8 <_kill_r>:
 800a6e8:	b538      	push	{r3, r4, r5, lr}
 800a6ea:	4d07      	ldr	r5, [pc, #28]	; (800a708 <_kill_r+0x20>)
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	4608      	mov	r0, r1
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	602b      	str	r3, [r5, #0]
 800a6f6:	f7f6 ff69 	bl	80015cc <_kill>
 800a6fa:	1c43      	adds	r3, r0, #1
 800a6fc:	d102      	bne.n	800a704 <_kill_r+0x1c>
 800a6fe:	682b      	ldr	r3, [r5, #0]
 800a700:	b103      	cbz	r3, 800a704 <_kill_r+0x1c>
 800a702:	6023      	str	r3, [r4, #0]
 800a704:	bd38      	pop	{r3, r4, r5, pc}
 800a706:	bf00      	nop
 800a708:	20000428 	.word	0x20000428

0800a70c <_getpid_r>:
 800a70c:	f7f6 bf56 	b.w	80015bc <_getpid>

0800a710 <__swhatbuf_r>:
 800a710:	b570      	push	{r4, r5, r6, lr}
 800a712:	460c      	mov	r4, r1
 800a714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a718:	2900      	cmp	r1, #0
 800a71a:	b096      	sub	sp, #88	; 0x58
 800a71c:	4615      	mov	r5, r2
 800a71e:	461e      	mov	r6, r3
 800a720:	da0d      	bge.n	800a73e <__swhatbuf_r+0x2e>
 800a722:	89a3      	ldrh	r3, [r4, #12]
 800a724:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a728:	f04f 0100 	mov.w	r1, #0
 800a72c:	bf0c      	ite	eq
 800a72e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a732:	2340      	movne	r3, #64	; 0x40
 800a734:	2000      	movs	r0, #0
 800a736:	6031      	str	r1, [r6, #0]
 800a738:	602b      	str	r3, [r5, #0]
 800a73a:	b016      	add	sp, #88	; 0x58
 800a73c:	bd70      	pop	{r4, r5, r6, pc}
 800a73e:	466a      	mov	r2, sp
 800a740:	f000 f848 	bl	800a7d4 <_fstat_r>
 800a744:	2800      	cmp	r0, #0
 800a746:	dbec      	blt.n	800a722 <__swhatbuf_r+0x12>
 800a748:	9901      	ldr	r1, [sp, #4]
 800a74a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a74e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a752:	4259      	negs	r1, r3
 800a754:	4159      	adcs	r1, r3
 800a756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a75a:	e7eb      	b.n	800a734 <__swhatbuf_r+0x24>

0800a75c <__smakebuf_r>:
 800a75c:	898b      	ldrh	r3, [r1, #12]
 800a75e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a760:	079d      	lsls	r5, r3, #30
 800a762:	4606      	mov	r6, r0
 800a764:	460c      	mov	r4, r1
 800a766:	d507      	bpl.n	800a778 <__smakebuf_r+0x1c>
 800a768:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a76c:	6023      	str	r3, [r4, #0]
 800a76e:	6123      	str	r3, [r4, #16]
 800a770:	2301      	movs	r3, #1
 800a772:	6163      	str	r3, [r4, #20]
 800a774:	b002      	add	sp, #8
 800a776:	bd70      	pop	{r4, r5, r6, pc}
 800a778:	ab01      	add	r3, sp, #4
 800a77a:	466a      	mov	r2, sp
 800a77c:	f7ff ffc8 	bl	800a710 <__swhatbuf_r>
 800a780:	9900      	ldr	r1, [sp, #0]
 800a782:	4605      	mov	r5, r0
 800a784:	4630      	mov	r0, r6
 800a786:	f7fd fb81 	bl	8007e8c <_malloc_r>
 800a78a:	b948      	cbnz	r0, 800a7a0 <__smakebuf_r+0x44>
 800a78c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a790:	059a      	lsls	r2, r3, #22
 800a792:	d4ef      	bmi.n	800a774 <__smakebuf_r+0x18>
 800a794:	f023 0303 	bic.w	r3, r3, #3
 800a798:	f043 0302 	orr.w	r3, r3, #2
 800a79c:	81a3      	strh	r3, [r4, #12]
 800a79e:	e7e3      	b.n	800a768 <__smakebuf_r+0xc>
 800a7a0:	89a3      	ldrh	r3, [r4, #12]
 800a7a2:	6020      	str	r0, [r4, #0]
 800a7a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7a8:	81a3      	strh	r3, [r4, #12]
 800a7aa:	9b00      	ldr	r3, [sp, #0]
 800a7ac:	6163      	str	r3, [r4, #20]
 800a7ae:	9b01      	ldr	r3, [sp, #4]
 800a7b0:	6120      	str	r0, [r4, #16]
 800a7b2:	b15b      	cbz	r3, 800a7cc <__smakebuf_r+0x70>
 800a7b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	f000 f81d 	bl	800a7f8 <_isatty_r>
 800a7be:	b128      	cbz	r0, 800a7cc <__smakebuf_r+0x70>
 800a7c0:	89a3      	ldrh	r3, [r4, #12]
 800a7c2:	f023 0303 	bic.w	r3, r3, #3
 800a7c6:	f043 0301 	orr.w	r3, r3, #1
 800a7ca:	81a3      	strh	r3, [r4, #12]
 800a7cc:	89a3      	ldrh	r3, [r4, #12]
 800a7ce:	431d      	orrs	r5, r3
 800a7d0:	81a5      	strh	r5, [r4, #12]
 800a7d2:	e7cf      	b.n	800a774 <__smakebuf_r+0x18>

0800a7d4 <_fstat_r>:
 800a7d4:	b538      	push	{r3, r4, r5, lr}
 800a7d6:	4d07      	ldr	r5, [pc, #28]	; (800a7f4 <_fstat_r+0x20>)
 800a7d8:	2300      	movs	r3, #0
 800a7da:	4604      	mov	r4, r0
 800a7dc:	4608      	mov	r0, r1
 800a7de:	4611      	mov	r1, r2
 800a7e0:	602b      	str	r3, [r5, #0]
 800a7e2:	f7f6 ff52 	bl	800168a <_fstat>
 800a7e6:	1c43      	adds	r3, r0, #1
 800a7e8:	d102      	bne.n	800a7f0 <_fstat_r+0x1c>
 800a7ea:	682b      	ldr	r3, [r5, #0]
 800a7ec:	b103      	cbz	r3, 800a7f0 <_fstat_r+0x1c>
 800a7ee:	6023      	str	r3, [r4, #0]
 800a7f0:	bd38      	pop	{r3, r4, r5, pc}
 800a7f2:	bf00      	nop
 800a7f4:	20000428 	.word	0x20000428

0800a7f8 <_isatty_r>:
 800a7f8:	b538      	push	{r3, r4, r5, lr}
 800a7fa:	4d06      	ldr	r5, [pc, #24]	; (800a814 <_isatty_r+0x1c>)
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	4604      	mov	r4, r0
 800a800:	4608      	mov	r0, r1
 800a802:	602b      	str	r3, [r5, #0]
 800a804:	f7f6 ff51 	bl	80016aa <_isatty>
 800a808:	1c43      	adds	r3, r0, #1
 800a80a:	d102      	bne.n	800a812 <_isatty_r+0x1a>
 800a80c:	682b      	ldr	r3, [r5, #0]
 800a80e:	b103      	cbz	r3, 800a812 <_isatty_r+0x1a>
 800a810:	6023      	str	r3, [r4, #0]
 800a812:	bd38      	pop	{r3, r4, r5, pc}
 800a814:	20000428 	.word	0x20000428

0800a818 <_init>:
 800a818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81a:	bf00      	nop
 800a81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a81e:	bc08      	pop	{r3}
 800a820:	469e      	mov	lr, r3
 800a822:	4770      	bx	lr

0800a824 <_fini>:
 800a824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a826:	bf00      	nop
 800a828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a82a:	bc08      	pop	{r3}
 800a82c:	469e      	mov	lr, r3
 800a82e:	4770      	bx	lr
